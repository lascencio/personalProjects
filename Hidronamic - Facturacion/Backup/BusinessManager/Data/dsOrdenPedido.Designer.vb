'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8009
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsOrdenPedido"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsOrdenPedido
    Inherits Global.System.Data.DataSet
    
    Private tableORDEN_PEDIDO_DET As ORDEN_PEDIDO_DETDataTable
    
    Private tableORDEN_PEDIDO As ORDEN_PEDIDODataTable
    
    Private tableDETALLES_PEDIDO As DETALLES_PEDIDODataTable
    
    Private tableORDEN_PEDIDO_LISTA As ORDEN_PEDIDO_LISTADataTable
    
    Private tableORDEN_PEDIDO_PENDIENTES As ORDEN_PEDIDO_PENDIENTESDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ORDEN_PEDIDO_DET")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_PEDIDO_DETDataTable(ds.Tables("ORDEN_PEDIDO_DET")))
            End If
            If (Not (ds.Tables("ORDEN_PEDIDO")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_PEDIDODataTable(ds.Tables("ORDEN_PEDIDO")))
            End If
            If (Not (ds.Tables("DETALLES_PEDIDO")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLES_PEDIDODataTable(ds.Tables("DETALLES_PEDIDO")))
            End If
            If (Not (ds.Tables("ORDEN_PEDIDO_LISTA")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_PEDIDO_LISTADataTable(ds.Tables("ORDEN_PEDIDO_LISTA")))
            End If
            If (Not (ds.Tables("ORDEN_PEDIDO_PENDIENTES")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_PEDIDO_PENDIENTESDataTable(ds.Tables("ORDEN_PEDIDO_PENDIENTES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORDEN_PEDIDO_DET() As ORDEN_PEDIDO_DETDataTable
        Get
            Return Me.tableORDEN_PEDIDO_DET
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORDEN_PEDIDO() As ORDEN_PEDIDODataTable
        Get
            Return Me.tableORDEN_PEDIDO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DETALLES_PEDIDO() As DETALLES_PEDIDODataTable
        Get
            Return Me.tableDETALLES_PEDIDO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORDEN_PEDIDO_LISTA() As ORDEN_PEDIDO_LISTADataTable
        Get
            Return Me.tableORDEN_PEDIDO_LISTA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORDEN_PEDIDO_PENDIENTES() As ORDEN_PEDIDO_PENDIENTESDataTable
        Get
            Return Me.tableORDEN_PEDIDO_PENDIENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsOrdenPedido = CType(MyBase.Clone,dsOrdenPedido)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ORDEN_PEDIDO_DET")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_PEDIDO_DETDataTable(ds.Tables("ORDEN_PEDIDO_DET")))
            End If
            If (Not (ds.Tables("ORDEN_PEDIDO")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_PEDIDODataTable(ds.Tables("ORDEN_PEDIDO")))
            End If
            If (Not (ds.Tables("DETALLES_PEDIDO")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLES_PEDIDODataTable(ds.Tables("DETALLES_PEDIDO")))
            End If
            If (Not (ds.Tables("ORDEN_PEDIDO_LISTA")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_PEDIDO_LISTADataTable(ds.Tables("ORDEN_PEDIDO_LISTA")))
            End If
            If (Not (ds.Tables("ORDEN_PEDIDO_PENDIENTES")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_PEDIDO_PENDIENTESDataTable(ds.Tables("ORDEN_PEDIDO_PENDIENTES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableORDEN_PEDIDO_DET = CType(MyBase.Tables("ORDEN_PEDIDO_DET"),ORDEN_PEDIDO_DETDataTable)
        If (initTable = true) Then
            If (Not (Me.tableORDEN_PEDIDO_DET) Is Nothing) Then
                Me.tableORDEN_PEDIDO_DET.InitVars
            End If
        End If
        Me.tableORDEN_PEDIDO = CType(MyBase.Tables("ORDEN_PEDIDO"),ORDEN_PEDIDODataTable)
        If (initTable = true) Then
            If (Not (Me.tableORDEN_PEDIDO) Is Nothing) Then
                Me.tableORDEN_PEDIDO.InitVars
            End If
        End If
        Me.tableDETALLES_PEDIDO = CType(MyBase.Tables("DETALLES_PEDIDO"),DETALLES_PEDIDODataTable)
        If (initTable = true) Then
            If (Not (Me.tableDETALLES_PEDIDO) Is Nothing) Then
                Me.tableDETALLES_PEDIDO.InitVars
            End If
        End If
        Me.tableORDEN_PEDIDO_LISTA = CType(MyBase.Tables("ORDEN_PEDIDO_LISTA"),ORDEN_PEDIDO_LISTADataTable)
        If (initTable = true) Then
            If (Not (Me.tableORDEN_PEDIDO_LISTA) Is Nothing) Then
                Me.tableORDEN_PEDIDO_LISTA.InitVars
            End If
        End If
        Me.tableORDEN_PEDIDO_PENDIENTES = CType(MyBase.Tables("ORDEN_PEDIDO_PENDIENTES"),ORDEN_PEDIDO_PENDIENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableORDEN_PEDIDO_PENDIENTES) Is Nothing) Then
                Me.tableORDEN_PEDIDO_PENDIENTES.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsOrdenPedido"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsOrdenPedido.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableORDEN_PEDIDO_DET = New ORDEN_PEDIDO_DETDataTable
        MyBase.Tables.Add(Me.tableORDEN_PEDIDO_DET)
        Me.tableORDEN_PEDIDO = New ORDEN_PEDIDODataTable
        MyBase.Tables.Add(Me.tableORDEN_PEDIDO)
        Me.tableDETALLES_PEDIDO = New DETALLES_PEDIDODataTable
        MyBase.Tables.Add(Me.tableDETALLES_PEDIDO)
        Me.tableORDEN_PEDIDO_LISTA = New ORDEN_PEDIDO_LISTADataTable
        MyBase.Tables.Add(Me.tableORDEN_PEDIDO_LISTA)
        Me.tableORDEN_PEDIDO_PENDIENTES = New ORDEN_PEDIDO_PENDIENTESDataTable
        MyBase.Tables.Add(Me.tableORDEN_PEDIDO_PENDIENTES)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORDEN_PEDIDO_DET() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORDEN_PEDIDO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDETALLES_PEDIDO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORDEN_PEDIDO_LISTA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORDEN_PEDIDO_PENDIENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsOrdenPedido = New dsOrdenPedido
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ORDEN_PEDIDO_DETRowChangeEventHandler(ByVal sender As Object, ByVal e As ORDEN_PEDIDO_DETRowChangeEvent)
    
    Public Delegate Sub ORDEN_PEDIDORowChangeEventHandler(ByVal sender As Object, ByVal e As ORDEN_PEDIDORowChangeEvent)
    
    Public Delegate Sub DETALLES_PEDIDORowChangeEventHandler(ByVal sender As Object, ByVal e As DETALLES_PEDIDORowChangeEvent)
    
    Public Delegate Sub ORDEN_PEDIDO_LISTARowChangeEventHandler(ByVal sender As Object, ByVal e As ORDEN_PEDIDO_LISTARowChangeEvent)
    
    Public Delegate Sub ORDEN_PEDIDO_PENDIENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As ORDEN_PEDIDO_PENDIENTESRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORDEN_PEDIDO_DETDataTable
        Inherits Global.System.Data.TypedTableBase(Of ORDEN_PEDIDO_DETRow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnORDEN_PEDIDO As Global.System.Data.DataColumn
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnPRECIO_UNITARIO_MN As Global.System.Data.DataColumn
        
        Private columnPRECIO_UNITARIO_ME As Global.System.Data.DataColumn
        
        Private columnIMPORTE_TOTAL_MN As Global.System.Data.DataColumn
        
        Private columnIMPORTE_TOTAL_ME As Global.System.Data.DataColumn
        
        Private columnCOMENTARIO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_REGISTRO As Global.System.Data.DataColumn
        
        Private columnFECHA_REGISTRO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_MODIFICA As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORDEN_PEDIDO_DET"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDEN_PEDIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN_PEDIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_UNITARIO_MNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_UNITARIO_MN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_UNITARIO_MEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_UNITARIO_ME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_TOTAL_MNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_TOTAL_MN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_TOTAL_MEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_TOTAL_ME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMENTARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMENTARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORDEN_PEDIDO_DETRow
            Get
                Return CType(Me.Rows(index),ORDEN_PEDIDO_DETRow)
            End Get
        End Property
        
        Public Event ORDEN_PEDIDO_DETRowChanging As ORDEN_PEDIDO_DETRowChangeEventHandler
        
        Public Event ORDEN_PEDIDO_DETRowChanged As ORDEN_PEDIDO_DETRowChangeEventHandler
        
        Public Event ORDEN_PEDIDO_DETRowDeleting As ORDEN_PEDIDO_DETRowChangeEventHandler
        
        Public Event ORDEN_PEDIDO_DETRowDeleted As ORDEN_PEDIDO_DETRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORDEN_PEDIDO_DETRow(ByVal row As ORDEN_PEDIDO_DETRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORDEN_PEDIDO_DETRow(ByVal EMPRESA As String, ByVal ORDEN_PEDIDO As String, ByVal PRODUCTO As String, ByVal CANTIDAD As Decimal, ByVal PRECIO_UNITARIO_MN As Decimal, ByVal PRECIO_UNITARIO_ME As Decimal, ByVal IMPORTE_TOTAL_MN As Decimal, ByVal IMPORTE_TOTAL_ME As Decimal, ByVal COMENTARIO As String, ByVal ESTADO As String, ByVal USUARIO_REGISTRO As String, ByVal FECHA_REGISTRO As Date, ByVal USUARIO_MODIFICA As String, ByVal FECHA_MODIFICA As Date) As ORDEN_PEDIDO_DETRow
            Dim rowORDEN_PEDIDO_DETRow As ORDEN_PEDIDO_DETRow = CType(Me.NewRow,ORDEN_PEDIDO_DETRow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, ORDEN_PEDIDO, PRODUCTO, CANTIDAD, PRECIO_UNITARIO_MN, PRECIO_UNITARIO_ME, IMPORTE_TOTAL_MN, IMPORTE_TOTAL_ME, COMENTARIO, ESTADO, USUARIO_REGISTRO, FECHA_REGISTRO, USUARIO_MODIFICA, FECHA_MODIFICA}
            rowORDEN_PEDIDO_DETRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORDEN_PEDIDO_DETRow)
            Return rowORDEN_PEDIDO_DETRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEMPRESAORDEN_PEDIDOPRODUCTO(ByVal EMPRESA As String, ByVal ORDEN_PEDIDO As String, ByVal PRODUCTO As String) As ORDEN_PEDIDO_DETRow
            Return CType(Me.Rows.Find(New Object() {EMPRESA, ORDEN_PEDIDO, PRODUCTO}),ORDEN_PEDIDO_DETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORDEN_PEDIDO_DETDataTable = CType(MyBase.Clone,ORDEN_PEDIDO_DETDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORDEN_PEDIDO_DETDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnORDEN_PEDIDO = MyBase.Columns("ORDEN_PEDIDO")
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnPRECIO_UNITARIO_MN = MyBase.Columns("PRECIO_UNITARIO_MN")
            Me.columnPRECIO_UNITARIO_ME = MyBase.Columns("PRECIO_UNITARIO_ME")
            Me.columnIMPORTE_TOTAL_MN = MyBase.Columns("IMPORTE_TOTAL_MN")
            Me.columnIMPORTE_TOTAL_ME = MyBase.Columns("IMPORTE_TOTAL_ME")
            Me.columnCOMENTARIO = MyBase.Columns("COMENTARIO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnUSUARIO_REGISTRO = MyBase.Columns("USUARIO_REGISTRO")
            Me.columnFECHA_REGISTRO = MyBase.Columns("FECHA_REGISTRO")
            Me.columnUSUARIO_MODIFICA = MyBase.Columns("USUARIO_MODIFICA")
            Me.columnFECHA_MODIFICA = MyBase.Columns("FECHA_MODIFICA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnORDEN_PEDIDO = New Global.System.Data.DataColumn("ORDEN_PEDIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN_PEDIDO)
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnPRECIO_UNITARIO_MN = New Global.System.Data.DataColumn("PRECIO_UNITARIO_MN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_UNITARIO_MN)
            Me.columnPRECIO_UNITARIO_ME = New Global.System.Data.DataColumn("PRECIO_UNITARIO_ME", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_UNITARIO_ME)
            Me.columnIMPORTE_TOTAL_MN = New Global.System.Data.DataColumn("IMPORTE_TOTAL_MN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_TOTAL_MN)
            Me.columnIMPORTE_TOTAL_ME = New Global.System.Data.DataColumn("IMPORTE_TOTAL_ME", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_TOTAL_ME)
            Me.columnCOMENTARIO = New Global.System.Data.DataColumn("COMENTARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMENTARIO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnUSUARIO_REGISTRO = New Global.System.Data.DataColumn("USUARIO_REGISTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_REGISTRO)
            Me.columnFECHA_REGISTRO = New Global.System.Data.DataColumn("FECHA_REGISTRO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_REGISTRO)
            Me.columnUSUARIO_MODIFICA = New Global.System.Data.DataColumn("USUARIO_MODIFICA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_MODIFICA)
            Me.columnFECHA_MODIFICA = New Global.System.Data.DataColumn("FECHA_MODIFICA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEMPRESA, Me.columnORDEN_PEDIDO, Me.columnPRODUCTO}, true))
            Me.columnEMPRESA.AllowDBNull = false
            Me.columnEMPRESA.MaxLength = 3
            Me.columnORDEN_PEDIDO.AllowDBNull = false
            Me.columnORDEN_PEDIDO.MaxLength = 12
            Me.columnPRODUCTO.AllowDBNull = false
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnCANTIDAD.AllowDBNull = false
            Me.columnPRECIO_UNITARIO_MN.AllowDBNull = false
            Me.columnPRECIO_UNITARIO_ME.AllowDBNull = false
            Me.columnIMPORTE_TOTAL_MN.AllowDBNull = false
            Me.columnIMPORTE_TOTAL_ME.AllowDBNull = false
            Me.columnCOMENTARIO.AllowDBNull = false
            Me.columnCOMENTARIO.MaxLength = 250
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO.MaxLength = 1
            Me.columnUSUARIO_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_REGISTRO.MaxLength = 20
            Me.columnFECHA_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_MODIFICA.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORDEN_PEDIDO_DETRow() As ORDEN_PEDIDO_DETRow
            Return CType(Me.NewRow,ORDEN_PEDIDO_DETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORDEN_PEDIDO_DETRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORDEN_PEDIDO_DETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORDEN_PEDIDO_DETRowChangedEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_DETRowChanged(Me, New ORDEN_PEDIDO_DETRowChangeEvent(CType(e.Row,ORDEN_PEDIDO_DETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORDEN_PEDIDO_DETRowChangingEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_DETRowChanging(Me, New ORDEN_PEDIDO_DETRowChangeEvent(CType(e.Row,ORDEN_PEDIDO_DETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORDEN_PEDIDO_DETRowDeletedEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_DETRowDeleted(Me, New ORDEN_PEDIDO_DETRowChangeEvent(CType(e.Row,ORDEN_PEDIDO_DETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORDEN_PEDIDO_DETRowDeletingEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_DETRowDeleting(Me, New ORDEN_PEDIDO_DETRowChangeEvent(CType(e.Row,ORDEN_PEDIDO_DETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORDEN_PEDIDO_DETRow(ByVal row As ORDEN_PEDIDO_DETRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOrdenPedido = New dsOrdenPedido
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORDEN_PEDIDO_DETDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORDEN_PEDIDODataTable
        Inherits Global.System.Data.TypedTableBase(Of ORDEN_PEDIDORow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnORDEN_PEDIDO As Global.System.Data.DataColumn
        
        Private columnEJERCICIO As Global.System.Data.DataColumn
        
        Private columnMES As Global.System.Data.DataColumn
        
        Private columnCUENTA_COMERCIAL As Global.System.Data.DataColumn
        
        Private columnORDEN_FECHA As Global.System.Data.DataColumn
        
        Private columnCODIGO_VENDEDOR As Global.System.Data.DataColumn
        
        Private columnLISTA_PRECIO As Global.System.Data.DataColumn
        
        Private columnCENTRO_DISTRIBUCION As Global.System.Data.DataColumn
        
        Private columnIMPORTE_TOTAL_ME As Global.System.Data.DataColumn
        
        Private columnIMPORTE_TOTAL_MN As Global.System.Data.DataColumn
        
        Private columnPAGO_TIPO As Global.System.Data.DataColumn
        
        Private columnPAGO_BANCO As Global.System.Data.DataColumn
        
        Private columnPAGO_MONEDA As Global.System.Data.DataColumn
        
        Private columnPAGO_FECHA As Global.System.Data.DataColumn
        
        Private columnPAGO_IMPORTE As Global.System.Data.DataColumn
        
        Private columnPAGO_REFERENCIA As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnINDICA_PRIMERA_COMPRA As Global.System.Data.DataColumn
        
        Private columnINDICA_ASCENSO As Global.System.Data.DataColumn
        
        Private columnINDICA_MANTENIMIENTO As Global.System.Data.DataColumn
        
        Private columnINDICA_COMPRA_EXTRA As Global.System.Data.DataColumn
        
        Private columnINDICA_ANTICIPO As Global.System.Data.DataColumn
        
        Private columnINDICA_EXTORNO_ANTICIPO As Global.System.Data.DataColumn
        
        Private columnVENTA_ANTICIPO As Global.System.Data.DataColumn
        
        Private columnCOMENTARIO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_REGISTRO As Global.System.Data.DataColumn
        
        Private columnFECHA_REGISTRO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_MODIFICA As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORDEN_PEDIDO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDEN_PEDIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN_PEDIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EJERCICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEJERCICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUENTA_COMERCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUENTA_COMERCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDEN_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_VENDEDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_VENDEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LISTA_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLISTA_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CENTRO_DISTRIBUCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCENTRO_DISTRIBUCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_TOTAL_MEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_TOTAL_ME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_TOTAL_MNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_TOTAL_MN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_TIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_IMPORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_IMPORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_REFERENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_REFERENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDICA_PRIMERA_COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDICA_PRIMERA_COMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDICA_ASCENSOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDICA_ASCENSO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDICA_MANTENIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDICA_MANTENIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDICA_COMPRA_EXTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDICA_COMPRA_EXTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDICA_ANTICIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDICA_ANTICIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDICA_EXTORNO_ANTICIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDICA_EXTORNO_ANTICIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENTA_ANTICIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENTA_ANTICIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMENTARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMENTARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORDEN_PEDIDORow
            Get
                Return CType(Me.Rows(index),ORDEN_PEDIDORow)
            End Get
        End Property
        
        Public Event ORDEN_PEDIDORowChanging As ORDEN_PEDIDORowChangeEventHandler
        
        Public Event ORDEN_PEDIDORowChanged As ORDEN_PEDIDORowChangeEventHandler
        
        Public Event ORDEN_PEDIDORowDeleting As ORDEN_PEDIDORowChangeEventHandler
        
        Public Event ORDEN_PEDIDORowDeleted As ORDEN_PEDIDORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORDEN_PEDIDORow(ByVal row As ORDEN_PEDIDORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORDEN_PEDIDORow( _
                    ByVal EMPRESA As String,  _
                    ByVal ORDEN_PEDIDO As String,  _
                    ByVal EJERCICIO As String,  _
                    ByVal MES As String,  _
                    ByVal CUENTA_COMERCIAL As String,  _
                    ByVal ORDEN_FECHA As Date,  _
                    ByVal CODIGO_VENDEDOR As String,  _
                    ByVal LISTA_PRECIO As String,  _
                    ByVal CENTRO_DISTRIBUCION As String,  _
                    ByVal IMPORTE_TOTAL_ME As Decimal,  _
                    ByVal IMPORTE_TOTAL_MN As Decimal,  _
                    ByVal PAGO_TIPO As String,  _
                    ByVal PAGO_BANCO As String,  _
                    ByVal PAGO_MONEDA As String,  _
                    ByVal PAGO_FECHA As Date,  _
                    ByVal PAGO_IMPORTE As Decimal,  _
                    ByVal PAGO_REFERENCIA As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal INDICA_PRIMERA_COMPRA As String,  _
                    ByVal INDICA_ASCENSO As String,  _
                    ByVal INDICA_MANTENIMIENTO As String,  _
                    ByVal INDICA_COMPRA_EXTRA As String,  _
                    ByVal INDICA_ANTICIPO As String,  _
                    ByVal INDICA_EXTORNO_ANTICIPO As String,  _
                    ByVal VENTA_ANTICIPO As String,  _
                    ByVal COMENTARIO As String,  _
                    ByVal ESTADO As String,  _
                    ByVal USUARIO_REGISTRO As String,  _
                    ByVal FECHA_REGISTRO As Date,  _
                    ByVal USUARIO_MODIFICA As String,  _
                    ByVal FECHA_MODIFICA As Date) As ORDEN_PEDIDORow
            Dim rowORDEN_PEDIDORow As ORDEN_PEDIDORow = CType(Me.NewRow,ORDEN_PEDIDORow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, ORDEN_PEDIDO, EJERCICIO, MES, CUENTA_COMERCIAL, ORDEN_FECHA, CODIGO_VENDEDOR, LISTA_PRECIO, CENTRO_DISTRIBUCION, IMPORTE_TOTAL_ME, IMPORTE_TOTAL_MN, PAGO_TIPO, PAGO_BANCO, PAGO_MONEDA, PAGO_FECHA, PAGO_IMPORTE, PAGO_REFERENCIA, TIPO_CAMBIO, INDICA_PRIMERA_COMPRA, INDICA_ASCENSO, INDICA_MANTENIMIENTO, INDICA_COMPRA_EXTRA, INDICA_ANTICIPO, INDICA_EXTORNO_ANTICIPO, VENTA_ANTICIPO, COMENTARIO, ESTADO, USUARIO_REGISTRO, FECHA_REGISTRO, USUARIO_MODIFICA, FECHA_MODIFICA}
            rowORDEN_PEDIDORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORDEN_PEDIDORow)
            Return rowORDEN_PEDIDORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEMPRESAORDEN_PEDIDO(ByVal EMPRESA As String, ByVal ORDEN_PEDIDO As String) As ORDEN_PEDIDORow
            Return CType(Me.Rows.Find(New Object() {EMPRESA, ORDEN_PEDIDO}),ORDEN_PEDIDORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORDEN_PEDIDODataTable = CType(MyBase.Clone,ORDEN_PEDIDODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORDEN_PEDIDODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnORDEN_PEDIDO = MyBase.Columns("ORDEN_PEDIDO")
            Me.columnEJERCICIO = MyBase.Columns("EJERCICIO")
            Me.columnMES = MyBase.Columns("MES")
            Me.columnCUENTA_COMERCIAL = MyBase.Columns("CUENTA_COMERCIAL")
            Me.columnORDEN_FECHA = MyBase.Columns("ORDEN_FECHA")
            Me.columnCODIGO_VENDEDOR = MyBase.Columns("CODIGO_VENDEDOR")
            Me.columnLISTA_PRECIO = MyBase.Columns("LISTA_PRECIO")
            Me.columnCENTRO_DISTRIBUCION = MyBase.Columns("CENTRO_DISTRIBUCION")
            Me.columnIMPORTE_TOTAL_ME = MyBase.Columns("IMPORTE_TOTAL_ME")
            Me.columnIMPORTE_TOTAL_MN = MyBase.Columns("IMPORTE_TOTAL_MN")
            Me.columnPAGO_TIPO = MyBase.Columns("PAGO_TIPO")
            Me.columnPAGO_BANCO = MyBase.Columns("PAGO_BANCO")
            Me.columnPAGO_MONEDA = MyBase.Columns("PAGO_MONEDA")
            Me.columnPAGO_FECHA = MyBase.Columns("PAGO_FECHA")
            Me.columnPAGO_IMPORTE = MyBase.Columns("PAGO_IMPORTE")
            Me.columnPAGO_REFERENCIA = MyBase.Columns("PAGO_REFERENCIA")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnINDICA_PRIMERA_COMPRA = MyBase.Columns("INDICA_PRIMERA_COMPRA")
            Me.columnINDICA_ASCENSO = MyBase.Columns("INDICA_ASCENSO")
            Me.columnINDICA_MANTENIMIENTO = MyBase.Columns("INDICA_MANTENIMIENTO")
            Me.columnINDICA_COMPRA_EXTRA = MyBase.Columns("INDICA_COMPRA_EXTRA")
            Me.columnINDICA_ANTICIPO = MyBase.Columns("INDICA_ANTICIPO")
            Me.columnINDICA_EXTORNO_ANTICIPO = MyBase.Columns("INDICA_EXTORNO_ANTICIPO")
            Me.columnVENTA_ANTICIPO = MyBase.Columns("VENTA_ANTICIPO")
            Me.columnCOMENTARIO = MyBase.Columns("COMENTARIO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnUSUARIO_REGISTRO = MyBase.Columns("USUARIO_REGISTRO")
            Me.columnFECHA_REGISTRO = MyBase.Columns("FECHA_REGISTRO")
            Me.columnUSUARIO_MODIFICA = MyBase.Columns("USUARIO_MODIFICA")
            Me.columnFECHA_MODIFICA = MyBase.Columns("FECHA_MODIFICA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnORDEN_PEDIDO = New Global.System.Data.DataColumn("ORDEN_PEDIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN_PEDIDO)
            Me.columnEJERCICIO = New Global.System.Data.DataColumn("EJERCICIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEJERCICIO)
            Me.columnMES = New Global.System.Data.DataColumn("MES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES)
            Me.columnCUENTA_COMERCIAL = New Global.System.Data.DataColumn("CUENTA_COMERCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUENTA_COMERCIAL)
            Me.columnORDEN_FECHA = New Global.System.Data.DataColumn("ORDEN_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN_FECHA)
            Me.columnCODIGO_VENDEDOR = New Global.System.Data.DataColumn("CODIGO_VENDEDOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_VENDEDOR)
            Me.columnLISTA_PRECIO = New Global.System.Data.DataColumn("LISTA_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLISTA_PRECIO)
            Me.columnCENTRO_DISTRIBUCION = New Global.System.Data.DataColumn("CENTRO_DISTRIBUCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCENTRO_DISTRIBUCION)
            Me.columnIMPORTE_TOTAL_ME = New Global.System.Data.DataColumn("IMPORTE_TOTAL_ME", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_TOTAL_ME)
            Me.columnIMPORTE_TOTAL_MN = New Global.System.Data.DataColumn("IMPORTE_TOTAL_MN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_TOTAL_MN)
            Me.columnPAGO_TIPO = New Global.System.Data.DataColumn("PAGO_TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_TIPO)
            Me.columnPAGO_BANCO = New Global.System.Data.DataColumn("PAGO_BANCO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_BANCO)
            Me.columnPAGO_MONEDA = New Global.System.Data.DataColumn("PAGO_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_MONEDA)
            Me.columnPAGO_FECHA = New Global.System.Data.DataColumn("PAGO_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_FECHA)
            Me.columnPAGO_IMPORTE = New Global.System.Data.DataColumn("PAGO_IMPORTE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_IMPORTE)
            Me.columnPAGO_REFERENCIA = New Global.System.Data.DataColumn("PAGO_REFERENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_REFERENCIA)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnINDICA_PRIMERA_COMPRA = New Global.System.Data.DataColumn("INDICA_PRIMERA_COMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDICA_PRIMERA_COMPRA)
            Me.columnINDICA_ASCENSO = New Global.System.Data.DataColumn("INDICA_ASCENSO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDICA_ASCENSO)
            Me.columnINDICA_MANTENIMIENTO = New Global.System.Data.DataColumn("INDICA_MANTENIMIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDICA_MANTENIMIENTO)
            Me.columnINDICA_COMPRA_EXTRA = New Global.System.Data.DataColumn("INDICA_COMPRA_EXTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDICA_COMPRA_EXTRA)
            Me.columnINDICA_ANTICIPO = New Global.System.Data.DataColumn("INDICA_ANTICIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDICA_ANTICIPO)
            Me.columnINDICA_EXTORNO_ANTICIPO = New Global.System.Data.DataColumn("INDICA_EXTORNO_ANTICIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDICA_EXTORNO_ANTICIPO)
            Me.columnVENTA_ANTICIPO = New Global.System.Data.DataColumn("VENTA_ANTICIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENTA_ANTICIPO)
            Me.columnCOMENTARIO = New Global.System.Data.DataColumn("COMENTARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMENTARIO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnUSUARIO_REGISTRO = New Global.System.Data.DataColumn("USUARIO_REGISTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_REGISTRO)
            Me.columnFECHA_REGISTRO = New Global.System.Data.DataColumn("FECHA_REGISTRO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_REGISTRO)
            Me.columnUSUARIO_MODIFICA = New Global.System.Data.DataColumn("USUARIO_MODIFICA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_MODIFICA)
            Me.columnFECHA_MODIFICA = New Global.System.Data.DataColumn("FECHA_MODIFICA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEMPRESA, Me.columnORDEN_PEDIDO}, true))
            Me.columnEMPRESA.AllowDBNull = false
            Me.columnEMPRESA.MaxLength = 3
            Me.columnORDEN_PEDIDO.AllowDBNull = false
            Me.columnORDEN_PEDIDO.MaxLength = 12
            Me.columnEJERCICIO.AllowDBNull = false
            Me.columnEJERCICIO.MaxLength = 4
            Me.columnMES.AllowDBNull = false
            Me.columnMES.MaxLength = 2
            Me.columnCUENTA_COMERCIAL.AllowDBNull = false
            Me.columnCUENTA_COMERCIAL.MaxLength = 18
            Me.columnORDEN_FECHA.AllowDBNull = false
            Me.columnCODIGO_VENDEDOR.AllowDBNull = false
            Me.columnCODIGO_VENDEDOR.MaxLength = 20
            Me.columnLISTA_PRECIO.AllowDBNull = false
            Me.columnLISTA_PRECIO.MaxLength = 12
            Me.columnCENTRO_DISTRIBUCION.AllowDBNull = false
            Me.columnCENTRO_DISTRIBUCION.MaxLength = 20
            Me.columnIMPORTE_TOTAL_ME.AllowDBNull = false
            Me.columnIMPORTE_TOTAL_MN.AllowDBNull = false
            Me.columnPAGO_TIPO.AllowDBNull = false
            Me.columnPAGO_TIPO.MaxLength = 2
            Me.columnPAGO_BANCO.AllowDBNull = false
            Me.columnPAGO_BANCO.MaxLength = 2
            Me.columnPAGO_MONEDA.AllowDBNull = false
            Me.columnPAGO_MONEDA.MaxLength = 1
            Me.columnPAGO_IMPORTE.AllowDBNull = false
            Me.columnPAGO_REFERENCIA.AllowDBNull = false
            Me.columnPAGO_REFERENCIA.MaxLength = 10
            Me.columnTIPO_CAMBIO.AllowDBNull = false
            Me.columnINDICA_PRIMERA_COMPRA.AllowDBNull = false
            Me.columnINDICA_PRIMERA_COMPRA.MaxLength = 2
            Me.columnINDICA_ASCENSO.AllowDBNull = false
            Me.columnINDICA_ASCENSO.MaxLength = 2
            Me.columnINDICA_MANTENIMIENTO.AllowDBNull = false
            Me.columnINDICA_MANTENIMIENTO.MaxLength = 2
            Me.columnINDICA_COMPRA_EXTRA.AllowDBNull = false
            Me.columnINDICA_COMPRA_EXTRA.MaxLength = 2
            Me.columnINDICA_ANTICIPO.AllowDBNull = false
            Me.columnINDICA_ANTICIPO.MaxLength = 2
            Me.columnINDICA_EXTORNO_ANTICIPO.AllowDBNull = false
            Me.columnINDICA_EXTORNO_ANTICIPO.MaxLength = 2
            Me.columnVENTA_ANTICIPO.AllowDBNull = false
            Me.columnVENTA_ANTICIPO.MaxLength = 12
            Me.columnCOMENTARIO.AllowDBNull = false
            Me.columnCOMENTARIO.MaxLength = 250
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO.MaxLength = 1
            Me.columnUSUARIO_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_REGISTRO.MaxLength = 20
            Me.columnFECHA_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_MODIFICA.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORDEN_PEDIDORow() As ORDEN_PEDIDORow
            Return CType(Me.NewRow,ORDEN_PEDIDORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORDEN_PEDIDORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORDEN_PEDIDORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORDEN_PEDIDORowChangedEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDORowChanged(Me, New ORDEN_PEDIDORowChangeEvent(CType(e.Row,ORDEN_PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORDEN_PEDIDORowChangingEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDORowChanging(Me, New ORDEN_PEDIDORowChangeEvent(CType(e.Row,ORDEN_PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORDEN_PEDIDORowDeletedEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDORowDeleted(Me, New ORDEN_PEDIDORowChangeEvent(CType(e.Row,ORDEN_PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORDEN_PEDIDORowDeletingEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDORowDeleting(Me, New ORDEN_PEDIDORowChangeEvent(CType(e.Row,ORDEN_PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORDEN_PEDIDORow(ByVal row As ORDEN_PEDIDORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOrdenPedido = New dsOrdenPedido
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORDEN_PEDIDODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DETALLES_PEDIDODataTable
        Inherits Global.System.Data.TypedTableBase(Of DETALLES_PEDIDORow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnORDEN_PEDIDO As Global.System.Data.DataColumn
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION_AMPLIADA As Global.System.Data.DataColumn
        
        Private columnINDICA_COMPUESTO As Global.System.Data.DataColumn
        
        Private columnINDICA_VALIDA_STOCK As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnPRECIO_UNITARIO_ME As Global.System.Data.DataColumn
        
        Private columnIMPORTE_TOTAL_ME As Global.System.Data.DataColumn
        
        Private columnVENTA As Global.System.Data.DataColumn
        
        Private columnVENTA_LINEA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DETALLES_PEDIDO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDEN_PEDIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN_PEDIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCION_AMPLIADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION_AMPLIADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDICA_COMPUESTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDICA_COMPUESTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDICA_VALIDA_STOCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDICA_VALIDA_STOCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_UNITARIO_MEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_UNITARIO_ME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_TOTAL_MEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_TOTAL_ME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENTA_LINEAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENTA_LINEA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DETALLES_PEDIDORow
            Get
                Return CType(Me.Rows(index),DETALLES_PEDIDORow)
            End Get
        End Property
        
        Public Event DETALLES_PEDIDORowChanging As DETALLES_PEDIDORowChangeEventHandler
        
        Public Event DETALLES_PEDIDORowChanged As DETALLES_PEDIDORowChangeEventHandler
        
        Public Event DETALLES_PEDIDORowDeleting As DETALLES_PEDIDORowChangeEventHandler
        
        Public Event DETALLES_PEDIDORowDeleted As DETALLES_PEDIDORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDETALLES_PEDIDORow(ByVal row As DETALLES_PEDIDORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDETALLES_PEDIDORow(ByVal EMPRESA As String, ByVal ORDEN_PEDIDO As String, ByVal PRODUCTO As String, ByVal DESCRIPCION As String, ByVal DESCRIPCION_AMPLIADA As String, ByVal INDICA_COMPUESTO As String, ByVal INDICA_VALIDA_STOCK As String, ByVal CANTIDAD As Decimal, ByVal PRECIO_UNITARIO_ME As Decimal, ByVal IMPORTE_TOTAL_ME As Decimal, ByVal VENTA As String, ByVal VENTA_LINEA As String) As DETALLES_PEDIDORow
            Dim rowDETALLES_PEDIDORow As DETALLES_PEDIDORow = CType(Me.NewRow,DETALLES_PEDIDORow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, ORDEN_PEDIDO, PRODUCTO, DESCRIPCION, DESCRIPCION_AMPLIADA, INDICA_COMPUESTO, INDICA_VALIDA_STOCK, CANTIDAD, PRECIO_UNITARIO_ME, IMPORTE_TOTAL_ME, VENTA, VENTA_LINEA}
            rowDETALLES_PEDIDORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDETALLES_PEDIDORow)
            Return rowDETALLES_PEDIDORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEMPRESAORDEN_PEDIDOPRODUCTO(ByVal EMPRESA As String, ByVal ORDEN_PEDIDO As String, ByVal PRODUCTO As String) As DETALLES_PEDIDORow
            Return CType(Me.Rows.Find(New Object() {EMPRESA, ORDEN_PEDIDO, PRODUCTO}),DETALLES_PEDIDORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DETALLES_PEDIDODataTable = CType(MyBase.Clone,DETALLES_PEDIDODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DETALLES_PEDIDODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnORDEN_PEDIDO = MyBase.Columns("ORDEN_PEDIDO")
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnDESCRIPCION_AMPLIADA = MyBase.Columns("DESCRIPCION_AMPLIADA")
            Me.columnINDICA_COMPUESTO = MyBase.Columns("INDICA_COMPUESTO")
            Me.columnINDICA_VALIDA_STOCK = MyBase.Columns("INDICA_VALIDA_STOCK")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnPRECIO_UNITARIO_ME = MyBase.Columns("PRECIO_UNITARIO_ME")
            Me.columnIMPORTE_TOTAL_ME = MyBase.Columns("IMPORTE_TOTAL_ME")
            Me.columnVENTA = MyBase.Columns("VENTA")
            Me.columnVENTA_LINEA = MyBase.Columns("VENTA_LINEA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnORDEN_PEDIDO = New Global.System.Data.DataColumn("ORDEN_PEDIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN_PEDIDO)
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnDESCRIPCION_AMPLIADA = New Global.System.Data.DataColumn("DESCRIPCION_AMPLIADA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION_AMPLIADA)
            Me.columnINDICA_COMPUESTO = New Global.System.Data.DataColumn("INDICA_COMPUESTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDICA_COMPUESTO)
            Me.columnINDICA_VALIDA_STOCK = New Global.System.Data.DataColumn("INDICA_VALIDA_STOCK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDICA_VALIDA_STOCK)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnPRECIO_UNITARIO_ME = New Global.System.Data.DataColumn("PRECIO_UNITARIO_ME", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_UNITARIO_ME)
            Me.columnIMPORTE_TOTAL_ME = New Global.System.Data.DataColumn("IMPORTE_TOTAL_ME", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_TOTAL_ME)
            Me.columnVENTA = New Global.System.Data.DataColumn("VENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENTA)
            Me.columnVENTA_LINEA = New Global.System.Data.DataColumn("VENTA_LINEA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENTA_LINEA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEMPRESA, Me.columnORDEN_PEDIDO, Me.columnPRODUCTO}, true))
            Me.columnEMPRESA.AllowDBNull = false
            Me.columnEMPRESA.MaxLength = 3
            Me.columnORDEN_PEDIDO.AllowDBNull = false
            Me.columnORDEN_PEDIDO.MaxLength = 12
            Me.columnPRODUCTO.AllowDBNull = false
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 50
            Me.columnDESCRIPCION_AMPLIADA.AllowDBNull = false
            Me.columnDESCRIPCION_AMPLIADA.MaxLength = 200
            Me.columnINDICA_COMPUESTO.AllowDBNull = false
            Me.columnINDICA_COMPUESTO.MaxLength = 2
            Me.columnINDICA_VALIDA_STOCK.AllowDBNull = false
            Me.columnINDICA_VALIDA_STOCK.MaxLength = 2
            Me.columnCANTIDAD.AllowDBNull = false
            Me.columnPRECIO_UNITARIO_ME.AllowDBNull = false
            Me.columnIMPORTE_TOTAL_ME.AllowDBNull = false
            Me.columnVENTA.AllowDBNull = false
            Me.columnVENTA.MaxLength = 12
            Me.columnVENTA_LINEA.AllowDBNull = false
            Me.columnVENTA_LINEA.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDETALLES_PEDIDORow() As DETALLES_PEDIDORow
            Return CType(Me.NewRow,DETALLES_PEDIDORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DETALLES_PEDIDORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DETALLES_PEDIDORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DETALLES_PEDIDORowChangedEvent) Is Nothing) Then
                RaiseEvent DETALLES_PEDIDORowChanged(Me, New DETALLES_PEDIDORowChangeEvent(CType(e.Row,DETALLES_PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DETALLES_PEDIDORowChangingEvent) Is Nothing) Then
                RaiseEvent DETALLES_PEDIDORowChanging(Me, New DETALLES_PEDIDORowChangeEvent(CType(e.Row,DETALLES_PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DETALLES_PEDIDORowDeletedEvent) Is Nothing) Then
                RaiseEvent DETALLES_PEDIDORowDeleted(Me, New DETALLES_PEDIDORowChangeEvent(CType(e.Row,DETALLES_PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DETALLES_PEDIDORowDeletingEvent) Is Nothing) Then
                RaiseEvent DETALLES_PEDIDORowDeleting(Me, New DETALLES_PEDIDORowChangeEvent(CType(e.Row,DETALLES_PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDETALLES_PEDIDORow(ByVal row As DETALLES_PEDIDORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOrdenPedido = New dsOrdenPedido
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DETALLES_PEDIDODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORDEN_PEDIDO_LISTADataTable
        Inherits Global.System.Data.TypedTableBase(Of ORDEN_PEDIDO_LISTARow)
        
        Private columnORDEN_PEDIDO As Global.System.Data.DataColumn
        
        Private columnORDEN_FECHA As Global.System.Data.DataColumn
        
        Private columnRAZON_SOCIAL As Global.System.Data.DataColumn
        
        Private columnVENDEDOR As Global.System.Data.DataColumn
        
        Private columnVENDEDOR_NOMBRE As Global.System.Data.DataColumn
        
        Private columnPAGO_TIPO As Global.System.Data.DataColumn
        
        Private columnPAGO_BANCO As Global.System.Data.DataColumn
        
        Private columnPAGO_MONEDA As Global.System.Data.DataColumn
        
        Private columnPAGO_FECHA As Global.System.Data.DataColumn
        
        Private columnPAGO_IMPORTE As Global.System.Data.DataColumn
        
        Private columnPAGO_REFERENCIA As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORDEN_PEDIDO_LISTA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDEN_PEDIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN_PEDIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDEN_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RAZON_SOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZON_SOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENDEDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENDEDOR_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDEDOR_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_TIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_IMPORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_IMPORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_REFERENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_REFERENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORDEN_PEDIDO_LISTARow
            Get
                Return CType(Me.Rows(index),ORDEN_PEDIDO_LISTARow)
            End Get
        End Property
        
        Public Event ORDEN_PEDIDO_LISTARowChanging As ORDEN_PEDIDO_LISTARowChangeEventHandler
        
        Public Event ORDEN_PEDIDO_LISTARowChanged As ORDEN_PEDIDO_LISTARowChangeEventHandler
        
        Public Event ORDEN_PEDIDO_LISTARowDeleting As ORDEN_PEDIDO_LISTARowChangeEventHandler
        
        Public Event ORDEN_PEDIDO_LISTARowDeleted As ORDEN_PEDIDO_LISTARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORDEN_PEDIDO_LISTARow(ByVal row As ORDEN_PEDIDO_LISTARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORDEN_PEDIDO_LISTARow(ByVal ORDEN_PEDIDO As String, ByVal ORDEN_FECHA As Date, ByVal RAZON_SOCIAL As String, ByVal VENDEDOR As String, ByVal VENDEDOR_NOMBRE As String, ByVal PAGO_TIPO As String, ByVal PAGO_BANCO As String, ByVal PAGO_MONEDA As String, ByVal PAGO_FECHA As Date, ByVal PAGO_IMPORTE As Decimal, ByVal PAGO_REFERENCIA As String, ByVal ESTADO As String) As ORDEN_PEDIDO_LISTARow
            Dim rowORDEN_PEDIDO_LISTARow As ORDEN_PEDIDO_LISTARow = CType(Me.NewRow,ORDEN_PEDIDO_LISTARow)
            Dim columnValuesArray() As Object = New Object() {ORDEN_PEDIDO, ORDEN_FECHA, RAZON_SOCIAL, VENDEDOR, VENDEDOR_NOMBRE, PAGO_TIPO, PAGO_BANCO, PAGO_MONEDA, PAGO_FECHA, PAGO_IMPORTE, PAGO_REFERENCIA, ESTADO}
            rowORDEN_PEDIDO_LISTARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORDEN_PEDIDO_LISTARow)
            Return rowORDEN_PEDIDO_LISTARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORDEN_PEDIDO_LISTADataTable = CType(MyBase.Clone,ORDEN_PEDIDO_LISTADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORDEN_PEDIDO_LISTADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnORDEN_PEDIDO = MyBase.Columns("ORDEN_PEDIDO")
            Me.columnORDEN_FECHA = MyBase.Columns("ORDEN_FECHA")
            Me.columnRAZON_SOCIAL = MyBase.Columns("RAZON_SOCIAL")
            Me.columnVENDEDOR = MyBase.Columns("VENDEDOR")
            Me.columnVENDEDOR_NOMBRE = MyBase.Columns("VENDEDOR_NOMBRE")
            Me.columnPAGO_TIPO = MyBase.Columns("PAGO_TIPO")
            Me.columnPAGO_BANCO = MyBase.Columns("PAGO_BANCO")
            Me.columnPAGO_MONEDA = MyBase.Columns("PAGO_MONEDA")
            Me.columnPAGO_FECHA = MyBase.Columns("PAGO_FECHA")
            Me.columnPAGO_IMPORTE = MyBase.Columns("PAGO_IMPORTE")
            Me.columnPAGO_REFERENCIA = MyBase.Columns("PAGO_REFERENCIA")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnORDEN_PEDIDO = New Global.System.Data.DataColumn("ORDEN_PEDIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN_PEDIDO)
            Me.columnORDEN_FECHA = New Global.System.Data.DataColumn("ORDEN_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN_FECHA)
            Me.columnRAZON_SOCIAL = New Global.System.Data.DataColumn("RAZON_SOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZON_SOCIAL)
            Me.columnVENDEDOR = New Global.System.Data.DataColumn("VENDEDOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDEDOR)
            Me.columnVENDEDOR_NOMBRE = New Global.System.Data.DataColumn("VENDEDOR_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDEDOR_NOMBRE)
            Me.columnPAGO_TIPO = New Global.System.Data.DataColumn("PAGO_TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_TIPO)
            Me.columnPAGO_BANCO = New Global.System.Data.DataColumn("PAGO_BANCO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_BANCO)
            Me.columnPAGO_MONEDA = New Global.System.Data.DataColumn("PAGO_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_MONEDA)
            Me.columnPAGO_FECHA = New Global.System.Data.DataColumn("PAGO_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_FECHA)
            Me.columnPAGO_IMPORTE = New Global.System.Data.DataColumn("PAGO_IMPORTE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_IMPORTE)
            Me.columnPAGO_REFERENCIA = New Global.System.Data.DataColumn("PAGO_REFERENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_REFERENCIA)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnORDEN_PEDIDO.AllowDBNull = false
            Me.columnORDEN_PEDIDO.MaxLength = 12
            Me.columnORDEN_FECHA.AllowDBNull = false
            Me.columnRAZON_SOCIAL.AllowDBNull = false
            Me.columnRAZON_SOCIAL.MaxLength = 100
            Me.columnVENDEDOR.AllowDBNull = false
            Me.columnVENDEDOR.MaxLength = 20
            Me.columnVENDEDOR_NOMBRE.AllowDBNull = false
            Me.columnVENDEDOR_NOMBRE.MaxLength = 50
            Me.columnPAGO_TIPO.AllowDBNull = false
            Me.columnPAGO_TIPO.MaxLength = 250
            Me.columnPAGO_BANCO.AllowDBNull = false
            Me.columnPAGO_BANCO.MaxLength = 50
            Me.columnPAGO_MONEDA.AllowDBNull = false
            Me.columnPAGO_MONEDA.MaxLength = 50
            Me.columnPAGO_IMPORTE.AllowDBNull = false
            Me.columnPAGO_REFERENCIA.AllowDBNull = false
            Me.columnPAGO_REFERENCIA.MaxLength = 10
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORDEN_PEDIDO_LISTARow() As ORDEN_PEDIDO_LISTARow
            Return CType(Me.NewRow,ORDEN_PEDIDO_LISTARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORDEN_PEDIDO_LISTARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORDEN_PEDIDO_LISTARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORDEN_PEDIDO_LISTARowChangedEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_LISTARowChanged(Me, New ORDEN_PEDIDO_LISTARowChangeEvent(CType(e.Row,ORDEN_PEDIDO_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORDEN_PEDIDO_LISTARowChangingEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_LISTARowChanging(Me, New ORDEN_PEDIDO_LISTARowChangeEvent(CType(e.Row,ORDEN_PEDIDO_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORDEN_PEDIDO_LISTARowDeletedEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_LISTARowDeleted(Me, New ORDEN_PEDIDO_LISTARowChangeEvent(CType(e.Row,ORDEN_PEDIDO_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORDEN_PEDIDO_LISTARowDeletingEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_LISTARowDeleting(Me, New ORDEN_PEDIDO_LISTARowChangeEvent(CType(e.Row,ORDEN_PEDIDO_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORDEN_PEDIDO_LISTARow(ByVal row As ORDEN_PEDIDO_LISTARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOrdenPedido = New dsOrdenPedido
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORDEN_PEDIDO_LISTADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORDEN_PEDIDO_PENDIENTESDataTable
        Inherits Global.System.Data.TypedTableBase(Of ORDEN_PEDIDO_PENDIENTESRow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnORDEN_PEDIDO As Global.System.Data.DataColumn
        
        Private columnPAGO_FECHA As Global.System.Data.DataColumn
        
        Private columnPAGO_BANCO As Global.System.Data.DataColumn
        
        Private columnPAGO_MONEDA As Global.System.Data.DataColumn
        
        Private columnPAGO_IMPORTE As Global.System.Data.DataColumn
        
        Private columnPAGO_REFERENCIA As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_REGISTRO As Global.System.Data.DataColumn
        
        Private columnFECHA_REGISTRO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_MODIFICA As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORDEN_PEDIDO_PENDIENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDEN_PEDIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN_PEDIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_IMPORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_IMPORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGO_REFERENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGO_REFERENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORDEN_PEDIDO_PENDIENTESRow
            Get
                Return CType(Me.Rows(index),ORDEN_PEDIDO_PENDIENTESRow)
            End Get
        End Property
        
        Public Event ORDEN_PEDIDO_PENDIENTESRowChanging As ORDEN_PEDIDO_PENDIENTESRowChangeEventHandler
        
        Public Event ORDEN_PEDIDO_PENDIENTESRowChanged As ORDEN_PEDIDO_PENDIENTESRowChangeEventHandler
        
        Public Event ORDEN_PEDIDO_PENDIENTESRowDeleting As ORDEN_PEDIDO_PENDIENTESRowChangeEventHandler
        
        Public Event ORDEN_PEDIDO_PENDIENTESRowDeleted As ORDEN_PEDIDO_PENDIENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORDEN_PEDIDO_PENDIENTESRow(ByVal row As ORDEN_PEDIDO_PENDIENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORDEN_PEDIDO_PENDIENTESRow(ByVal EMPRESA As String, ByVal ORDEN_PEDIDO As String, ByVal PAGO_FECHA As Date, ByVal PAGO_BANCO As String, ByVal PAGO_MONEDA As String, ByVal PAGO_IMPORTE As Decimal, ByVal PAGO_REFERENCIA As String, ByVal ESTADO As String, ByVal USUARIO_REGISTRO As String, ByVal FECHA_REGISTRO As Date, ByVal USUARIO_MODIFICA As String, ByVal FECHA_MODIFICA As Date) As ORDEN_PEDIDO_PENDIENTESRow
            Dim rowORDEN_PEDIDO_PENDIENTESRow As ORDEN_PEDIDO_PENDIENTESRow = CType(Me.NewRow,ORDEN_PEDIDO_PENDIENTESRow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, ORDEN_PEDIDO, PAGO_FECHA, PAGO_BANCO, PAGO_MONEDA, PAGO_IMPORTE, PAGO_REFERENCIA, ESTADO, USUARIO_REGISTRO, FECHA_REGISTRO, USUARIO_MODIFICA, FECHA_MODIFICA}
            rowORDEN_PEDIDO_PENDIENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORDEN_PEDIDO_PENDIENTESRow)
            Return rowORDEN_PEDIDO_PENDIENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEMPRESAORDEN_PEDIDO(ByVal EMPRESA As String, ByVal ORDEN_PEDIDO As String) As ORDEN_PEDIDO_PENDIENTESRow
            Return CType(Me.Rows.Find(New Object() {EMPRESA, ORDEN_PEDIDO}),ORDEN_PEDIDO_PENDIENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORDEN_PEDIDO_PENDIENTESDataTable = CType(MyBase.Clone,ORDEN_PEDIDO_PENDIENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORDEN_PEDIDO_PENDIENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnORDEN_PEDIDO = MyBase.Columns("ORDEN_PEDIDO")
            Me.columnPAGO_FECHA = MyBase.Columns("PAGO_FECHA")
            Me.columnPAGO_BANCO = MyBase.Columns("PAGO_BANCO")
            Me.columnPAGO_MONEDA = MyBase.Columns("PAGO_MONEDA")
            Me.columnPAGO_IMPORTE = MyBase.Columns("PAGO_IMPORTE")
            Me.columnPAGO_REFERENCIA = MyBase.Columns("PAGO_REFERENCIA")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnUSUARIO_REGISTRO = MyBase.Columns("USUARIO_REGISTRO")
            Me.columnFECHA_REGISTRO = MyBase.Columns("FECHA_REGISTRO")
            Me.columnUSUARIO_MODIFICA = MyBase.Columns("USUARIO_MODIFICA")
            Me.columnFECHA_MODIFICA = MyBase.Columns("FECHA_MODIFICA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnORDEN_PEDIDO = New Global.System.Data.DataColumn("ORDEN_PEDIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN_PEDIDO)
            Me.columnPAGO_FECHA = New Global.System.Data.DataColumn("PAGO_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_FECHA)
            Me.columnPAGO_BANCO = New Global.System.Data.DataColumn("PAGO_BANCO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_BANCO)
            Me.columnPAGO_MONEDA = New Global.System.Data.DataColumn("PAGO_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_MONEDA)
            Me.columnPAGO_IMPORTE = New Global.System.Data.DataColumn("PAGO_IMPORTE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_IMPORTE)
            Me.columnPAGO_REFERENCIA = New Global.System.Data.DataColumn("PAGO_REFERENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGO_REFERENCIA)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnUSUARIO_REGISTRO = New Global.System.Data.DataColumn("USUARIO_REGISTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_REGISTRO)
            Me.columnFECHA_REGISTRO = New Global.System.Data.DataColumn("FECHA_REGISTRO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_REGISTRO)
            Me.columnUSUARIO_MODIFICA = New Global.System.Data.DataColumn("USUARIO_MODIFICA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_MODIFICA)
            Me.columnFECHA_MODIFICA = New Global.System.Data.DataColumn("FECHA_MODIFICA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEMPRESA, Me.columnORDEN_PEDIDO}, true))
            Me.columnEMPRESA.AllowDBNull = false
            Me.columnEMPRESA.MaxLength = 3
            Me.columnORDEN_PEDIDO.AllowDBNull = false
            Me.columnORDEN_PEDIDO.MaxLength = 12
            Me.columnPAGO_BANCO.AllowDBNull = false
            Me.columnPAGO_BANCO.MaxLength = 50
            Me.columnPAGO_MONEDA.AllowDBNull = false
            Me.columnPAGO_MONEDA.MaxLength = 50
            Me.columnPAGO_IMPORTE.AllowDBNull = false
            Me.columnPAGO_REFERENCIA.AllowDBNull = false
            Me.columnPAGO_REFERENCIA.MaxLength = 10
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO.MaxLength = 1
            Me.columnUSUARIO_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_REGISTRO.MaxLength = 20
            Me.columnFECHA_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_MODIFICA.ReadOnly = true
            Me.columnUSUARIO_MODIFICA.MaxLength = 20
            Me.columnFECHA_MODIFICA.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORDEN_PEDIDO_PENDIENTESRow() As ORDEN_PEDIDO_PENDIENTESRow
            Return CType(Me.NewRow,ORDEN_PEDIDO_PENDIENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORDEN_PEDIDO_PENDIENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORDEN_PEDIDO_PENDIENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORDEN_PEDIDO_PENDIENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_PENDIENTESRowChanged(Me, New ORDEN_PEDIDO_PENDIENTESRowChangeEvent(CType(e.Row,ORDEN_PEDIDO_PENDIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORDEN_PEDIDO_PENDIENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_PENDIENTESRowChanging(Me, New ORDEN_PEDIDO_PENDIENTESRowChangeEvent(CType(e.Row,ORDEN_PEDIDO_PENDIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORDEN_PEDIDO_PENDIENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_PENDIENTESRowDeleted(Me, New ORDEN_PEDIDO_PENDIENTESRowChangeEvent(CType(e.Row,ORDEN_PEDIDO_PENDIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORDEN_PEDIDO_PENDIENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent ORDEN_PEDIDO_PENDIENTESRowDeleting(Me, New ORDEN_PEDIDO_PENDIENTESRowChangeEvent(CType(e.Row,ORDEN_PEDIDO_PENDIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORDEN_PEDIDO_PENDIENTESRow(ByVal row As ORDEN_PEDIDO_PENDIENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOrdenPedido = New dsOrdenPedido
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORDEN_PEDIDO_PENDIENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORDEN_PEDIDO_DETRow
        Inherits Global.System.Data.DataRow
        
        Private tableORDEN_PEDIDO_DET As ORDEN_PEDIDO_DETDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORDEN_PEDIDO_DET = CType(Me.Table,ORDEN_PEDIDO_DETDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN_PEDIDO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.ORDEN_PEDIDOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.ORDEN_PEDIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.PRODUCTOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.CANTIDADColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_UNITARIO_MN() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.PRECIO_UNITARIO_MNColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.PRECIO_UNITARIO_MNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_UNITARIO_ME() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.PRECIO_UNITARIO_MEColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.PRECIO_UNITARIO_MEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_TOTAL_MN() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.IMPORTE_TOTAL_MNColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.IMPORTE_TOTAL_MNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_TOTAL_ME() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.IMPORTE_TOTAL_MEColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.IMPORTE_TOTAL_MEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMENTARIO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.COMENTARIOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.COMENTARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.ESTADOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_REGISTRO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.USUARIO_REGISTROColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.USUARIO_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_REGISTRO() As Date
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_DET.FECHA_REGISTROColumn),Date)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.FECHA_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_MODIFICA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_PEDIDO_DET.USUARIO_MODIFICAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO_MODIFICA' de la tabla 'ORDEN_PEDIDO_DET' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.USUARIO_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_PEDIDO_DET.FECHA_MODIFICAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MODIFICA' de la tabla 'ORDEN_PEDIDO_DET' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_DET.FECHA_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIO_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_PEDIDO_DET.USUARIO_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIO_MODIFICANull()
            Me(Me.tableORDEN_PEDIDO_DET.USUARIO_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_PEDIDO_DET.FECHA_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICANull()
            Me(Me.tableORDEN_PEDIDO_DET.FECHA_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORDEN_PEDIDORow
        Inherits Global.System.Data.DataRow
        
        Private tableORDEN_PEDIDO As ORDEN_PEDIDODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORDEN_PEDIDO = CType(Me.Table,ORDEN_PEDIDODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN_PEDIDO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.ORDEN_PEDIDOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.ORDEN_PEDIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EJERCICIO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.EJERCICIOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.EJERCICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.MESColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.MESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUENTA_COMERCIAL() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.CUENTA_COMERCIALColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.CUENTA_COMERCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN_FECHA() As Date
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.ORDEN_FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.ORDEN_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_VENDEDOR() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.CODIGO_VENDEDORColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.CODIGO_VENDEDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LISTA_PRECIO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.LISTA_PRECIOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.LISTA_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CENTRO_DISTRIBUCION() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.CENTRO_DISTRIBUCIONColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.CENTRO_DISTRIBUCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_TOTAL_ME() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.IMPORTE_TOTAL_MEColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.IMPORTE_TOTAL_MEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_TOTAL_MN() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.IMPORTE_TOTAL_MNColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.IMPORTE_TOTAL_MNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_TIPO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.PAGO_TIPOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.PAGO_TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_BANCO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.PAGO_BANCOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.PAGO_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_MONEDA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.PAGO_MONEDAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.PAGO_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_PEDIDO.PAGO_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PAGO_FECHA' de la tabla 'ORDEN_PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.PAGO_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_IMPORTE() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.PAGO_IMPORTEColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.PAGO_IMPORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_REFERENCIA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.PAGO_REFERENCIAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.PAGO_REFERENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.TIPO_CAMBIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDICA_PRIMERA_COMPRA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.INDICA_PRIMERA_COMPRAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.INDICA_PRIMERA_COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDICA_ASCENSO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.INDICA_ASCENSOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.INDICA_ASCENSOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDICA_MANTENIMIENTO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.INDICA_MANTENIMIENTOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.INDICA_MANTENIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDICA_COMPRA_EXTRA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.INDICA_COMPRA_EXTRAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.INDICA_COMPRA_EXTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDICA_ANTICIPO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.INDICA_ANTICIPOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.INDICA_ANTICIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDICA_EXTORNO_ANTICIPO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.INDICA_EXTORNO_ANTICIPOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.INDICA_EXTORNO_ANTICIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENTA_ANTICIPO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.VENTA_ANTICIPOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.VENTA_ANTICIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMENTARIO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.COMENTARIOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.COMENTARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.ESTADOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_REGISTRO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.USUARIO_REGISTROColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.USUARIO_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_REGISTRO() As Date
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO.FECHA_REGISTROColumn),Date)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.FECHA_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_MODIFICA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_PEDIDO.USUARIO_MODIFICAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO_MODIFICA' de la tabla 'ORDEN_PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.USUARIO_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_PEDIDO.FECHA_MODIFICAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MODIFICA' de la tabla 'ORDEN_PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO.FECHA_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAGO_FECHANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_PEDIDO.PAGO_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAGO_FECHANull()
            Me(Me.tableORDEN_PEDIDO.PAGO_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIO_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_PEDIDO.USUARIO_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIO_MODIFICANull()
            Me(Me.tableORDEN_PEDIDO.USUARIO_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_PEDIDO.FECHA_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICANull()
            Me(Me.tableORDEN_PEDIDO.FECHA_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DETALLES_PEDIDORow
        Inherits Global.System.Data.DataRow
        
        Private tableDETALLES_PEDIDO As DETALLES_PEDIDODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDETALLES_PEDIDO = CType(Me.Table,DETALLES_PEDIDODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN_PEDIDO() As String
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.ORDEN_PEDIDOColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.ORDEN_PEDIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.PRODUCTOColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION_AMPLIADA() As String
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.DESCRIPCION_AMPLIADAColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.DESCRIPCION_AMPLIADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDICA_COMPUESTO() As String
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.INDICA_COMPUESTOColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.INDICA_COMPUESTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDICA_VALIDA_STOCK() As String
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.INDICA_VALIDA_STOCKColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.INDICA_VALIDA_STOCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As Decimal
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.CANTIDADColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_UNITARIO_ME() As Decimal
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.PRECIO_UNITARIO_MEColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.PRECIO_UNITARIO_MEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_TOTAL_ME() As Decimal
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.IMPORTE_TOTAL_MEColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.IMPORTE_TOTAL_MEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENTA() As String
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.VENTAColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.VENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENTA_LINEA() As String
            Get
                Return CType(Me(Me.tableDETALLES_PEDIDO.VENTA_LINEAColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_PEDIDO.VENTA_LINEAColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORDEN_PEDIDO_LISTARow
        Inherits Global.System.Data.DataRow
        
        Private tableORDEN_PEDIDO_LISTA As ORDEN_PEDIDO_LISTADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORDEN_PEDIDO_LISTA = CType(Me.Table,ORDEN_PEDIDO_LISTADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN_PEDIDO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.ORDEN_PEDIDOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.ORDEN_PEDIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN_FECHA() As Date
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.ORDEN_FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.ORDEN_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RAZON_SOCIAL() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.RAZON_SOCIALColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.RAZON_SOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENDEDOR() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.VENDEDORColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.VENDEDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENDEDOR_NOMBRE() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.VENDEDOR_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.VENDEDOR_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_TIPO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_TIPOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_BANCO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_BANCOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_MONEDA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_MONEDAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PAGO_FECHA' de la tabla 'ORDEN_PEDIDO_LISTA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_IMPORTE() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_IMPORTEColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_IMPORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_REFERENCIA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_REFERENCIAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_REFERENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_LISTA.ESTADOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_LISTA.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAGO_FECHANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_PEDIDO_LISTA.PAGO_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAGO_FECHANull()
            Me(Me.tableORDEN_PEDIDO_LISTA.PAGO_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORDEN_PEDIDO_PENDIENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableORDEN_PEDIDO_PENDIENTES As ORDEN_PEDIDO_PENDIENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORDEN_PEDIDO_PENDIENTES = CType(Me.Table,ORDEN_PEDIDO_PENDIENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN_PEDIDO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.ORDEN_PEDIDOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.ORDEN_PEDIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PAGO_FECHA' de la tabla 'ORDEN_PEDIDO_PENDIENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_BANCO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_BANCOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_MONEDA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_MONEDAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_IMPORTE() As Decimal
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_IMPORTEColumn),Decimal)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_IMPORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGO_REFERENCIA() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_REFERENCIAColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_REFERENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.ESTADOColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_REGISTRO() As String
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.USUARIO_REGISTROColumn),String)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.USUARIO_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_REGISTRO() As Date
            Get
                Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.FECHA_REGISTROColumn),Date)
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.FECHA_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_MODIFICA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.USUARIO_MODIFICAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO_MODIFICA' de la tabla 'ORDEN_PEDIDO_PENDIENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.USUARIO_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_PEDIDO_PENDIENTES.FECHA_MODIFICAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MODIFICA' de la tabla 'ORDEN_PEDIDO_PENDIENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_PEDIDO_PENDIENTES.FECHA_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAGO_FECHANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAGO_FECHANull()
            Me(Me.tableORDEN_PEDIDO_PENDIENTES.PAGO_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIO_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_PEDIDO_PENDIENTES.USUARIO_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIO_MODIFICANull()
            Me(Me.tableORDEN_PEDIDO_PENDIENTES.USUARIO_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_PEDIDO_PENDIENTES.FECHA_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICANull()
            Me(Me.tableORDEN_PEDIDO_PENDIENTES.FECHA_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORDEN_PEDIDO_DETRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORDEN_PEDIDO_DETRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORDEN_PEDIDO_DETRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORDEN_PEDIDO_DETRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORDEN_PEDIDORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORDEN_PEDIDORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORDEN_PEDIDORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORDEN_PEDIDORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DETALLES_PEDIDORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DETALLES_PEDIDORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DETALLES_PEDIDORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DETALLES_PEDIDORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORDEN_PEDIDO_LISTARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORDEN_PEDIDO_LISTARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORDEN_PEDIDO_LISTARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORDEN_PEDIDO_LISTARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORDEN_PEDIDO_PENDIENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORDEN_PEDIDO_PENDIENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORDEN_PEDIDO_PENDIENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORDEN_PEDIDO_PENDIENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
