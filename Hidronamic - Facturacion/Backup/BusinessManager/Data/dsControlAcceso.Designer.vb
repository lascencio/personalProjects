'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5472
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsControlAcceso"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsControlAcceso
    Inherits Global.System.Data.DataSet
    
    Private tableCONTROL_ACCESO As CONTROL_ACCESODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CONTROL_ACCESO")) Is Nothing) Then
                MyBase.Tables.Add(New CONTROL_ACCESODataTable(ds.Tables("CONTROL_ACCESO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CONTROL_ACCESO() As CONTROL_ACCESODataTable
        Get
            Return Me.tableCONTROL_ACCESO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsControlAcceso = CType(MyBase.Clone,dsControlAcceso)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CONTROL_ACCESO")) Is Nothing) Then
                MyBase.Tables.Add(New CONTROL_ACCESODataTable(ds.Tables("CONTROL_ACCESO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCONTROL_ACCESO = CType(MyBase.Tables("CONTROL_ACCESO"),CONTROL_ACCESODataTable)
        If (initTable = true) Then
            If (Not (Me.tableCONTROL_ACCESO) Is Nothing) Then
                Me.tableCONTROL_ACCESO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsControlAcceso"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsControlAcceso.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCONTROL_ACCESO = New CONTROL_ACCESODataTable
        MyBase.Tables.Add(Me.tableCONTROL_ACCESO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCONTROL_ACCESO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsControlAcceso = New dsControlAcceso
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CONTROL_ACCESORowChangeEventHandler(ByVal sender As Object, ByVal e As CONTROL_ACCESORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CONTROL_ACCESODataTable
        Inherits Global.System.Data.TypedTableBase(Of CONTROL_ACCESORow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnUSUARIO As Global.System.Data.DataColumn
        
        Private columnNIVEL_1 As Global.System.Data.DataColumn
        
        Private columnNIVEL_2 As Global.System.Data.DataColumn
        
        Private columnNIVEL_3 As Global.System.Data.DataColumn
        
        Private columnPRIVILEGIOS As Global.System.Data.DataColumn
        
        Private columnPERMITIR_IMPRIMIR As Global.System.Data.DataColumn
        
        Private columnUSUARIO_REGISTRO As Global.System.Data.DataColumn
        
        Private columnFECHA_REGISTRO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_MODIFICA As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CONTROL_ACCESO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NIVEL_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIVEL_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NIVEL_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIVEL_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NIVEL_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIVEL_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIVILEGIOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIVILEGIOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERMITIR_IMPRIMIRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERMITIR_IMPRIMIR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CONTROL_ACCESORow
            Get
                Return CType(Me.Rows(index),CONTROL_ACCESORow)
            End Get
        End Property
        
        Public Event CONTROL_ACCESORowChanging As CONTROL_ACCESORowChangeEventHandler
        
        Public Event CONTROL_ACCESORowChanged As CONTROL_ACCESORowChangeEventHandler
        
        Public Event CONTROL_ACCESORowDeleting As CONTROL_ACCESORowChangeEventHandler
        
        Public Event CONTROL_ACCESORowDeleted As CONTROL_ACCESORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCONTROL_ACCESORow(ByVal row As CONTROL_ACCESORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCONTROL_ACCESORow(ByVal EMPRESA As String, ByVal USUARIO As String, ByVal NIVEL_1 As String, ByVal NIVEL_2 As String, ByVal NIVEL_3 As String, ByVal PRIVILEGIOS As Decimal, ByVal PERMITIR_IMPRIMIR As Decimal, ByVal USUARIO_REGISTRO As String, ByVal FECHA_REGISTRO As Date, ByVal USUARIO_MODIFICA As String, ByVal FECHA_MODIFICA As Date) As CONTROL_ACCESORow
            Dim rowCONTROL_ACCESORow As CONTROL_ACCESORow = CType(Me.NewRow,CONTROL_ACCESORow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, USUARIO, NIVEL_1, NIVEL_2, NIVEL_3, PRIVILEGIOS, PERMITIR_IMPRIMIR, USUARIO_REGISTRO, FECHA_REGISTRO, USUARIO_MODIFICA, FECHA_MODIFICA}
            rowCONTROL_ACCESORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCONTROL_ACCESORow)
            Return rowCONTROL_ACCESORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CONTROL_ACCESODataTable = CType(MyBase.Clone,CONTROL_ACCESODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CONTROL_ACCESODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnUSUARIO = MyBase.Columns("USUARIO")
            Me.columnNIVEL_1 = MyBase.Columns("NIVEL_1")
            Me.columnNIVEL_2 = MyBase.Columns("NIVEL_2")
            Me.columnNIVEL_3 = MyBase.Columns("NIVEL_3")
            Me.columnPRIVILEGIOS = MyBase.Columns("PRIVILEGIOS")
            Me.columnPERMITIR_IMPRIMIR = MyBase.Columns("PERMITIR_IMPRIMIR")
            Me.columnUSUARIO_REGISTRO = MyBase.Columns("USUARIO_REGISTRO")
            Me.columnFECHA_REGISTRO = MyBase.Columns("FECHA_REGISTRO")
            Me.columnUSUARIO_MODIFICA = MyBase.Columns("USUARIO_MODIFICA")
            Me.columnFECHA_MODIFICA = MyBase.Columns("FECHA_MODIFICA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnUSUARIO = New Global.System.Data.DataColumn("USUARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO)
            Me.columnNIVEL_1 = New Global.System.Data.DataColumn("NIVEL_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIVEL_1)
            Me.columnNIVEL_2 = New Global.System.Data.DataColumn("NIVEL_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIVEL_2)
            Me.columnNIVEL_3 = New Global.System.Data.DataColumn("NIVEL_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIVEL_3)
            Me.columnPRIVILEGIOS = New Global.System.Data.DataColumn("PRIVILEGIOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIVILEGIOS)
            Me.columnPERMITIR_IMPRIMIR = New Global.System.Data.DataColumn("PERMITIR_IMPRIMIR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERMITIR_IMPRIMIR)
            Me.columnUSUARIO_REGISTRO = New Global.System.Data.DataColumn("USUARIO_REGISTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_REGISTRO)
            Me.columnFECHA_REGISTRO = New Global.System.Data.DataColumn("FECHA_REGISTRO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_REGISTRO)
            Me.columnUSUARIO_MODIFICA = New Global.System.Data.DataColumn("USUARIO_MODIFICA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_MODIFICA)
            Me.columnFECHA_MODIFICA = New Global.System.Data.DataColumn("FECHA_MODIFICA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICA)
            Me.columnEMPRESA.AllowDBNull = false
            Me.columnEMPRESA.MaxLength = 3
            Me.columnUSUARIO.AllowDBNull = false
            Me.columnUSUARIO.MaxLength = 20
            Me.columnNIVEL_1.MaxLength = 50
            Me.columnNIVEL_2.MaxLength = 50
            Me.columnNIVEL_3.MaxLength = 50
            Me.columnPRIVILEGIOS.AllowDBNull = false
            Me.columnPERMITIR_IMPRIMIR.AllowDBNull = false
            Me.columnUSUARIO_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_REGISTRO.MaxLength = 12
            Me.columnFECHA_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_MODIFICA.MaxLength = 12
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCONTROL_ACCESORow() As CONTROL_ACCESORow
            Return CType(Me.NewRow,CONTROL_ACCESORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CONTROL_ACCESORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CONTROL_ACCESORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CONTROL_ACCESORowChangedEvent) Is Nothing) Then
                RaiseEvent CONTROL_ACCESORowChanged(Me, New CONTROL_ACCESORowChangeEvent(CType(e.Row,CONTROL_ACCESORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CONTROL_ACCESORowChangingEvent) Is Nothing) Then
                RaiseEvent CONTROL_ACCESORowChanging(Me, New CONTROL_ACCESORowChangeEvent(CType(e.Row,CONTROL_ACCESORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CONTROL_ACCESORowDeletedEvent) Is Nothing) Then
                RaiseEvent CONTROL_ACCESORowDeleted(Me, New CONTROL_ACCESORowChangeEvent(CType(e.Row,CONTROL_ACCESORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CONTROL_ACCESORowDeletingEvent) Is Nothing) Then
                RaiseEvent CONTROL_ACCESORowDeleting(Me, New CONTROL_ACCESORowChangeEvent(CType(e.Row,CONTROL_ACCESORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCONTROL_ACCESORow(ByVal row As CONTROL_ACCESORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsControlAcceso = New dsControlAcceso
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CONTROL_ACCESODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CONTROL_ACCESORow
        Inherits Global.System.Data.DataRow
        
        Private tableCONTROL_ACCESO As CONTROL_ACCESODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCONTROL_ACCESO = CType(Me.Table,CONTROL_ACCESODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Return CType(Me(Me.tableCONTROL_ACCESO.EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO() As String
            Get
                Return CType(Me(Me.tableCONTROL_ACCESO.USUARIOColumn),String)
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NIVEL_1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONTROL_ACCESO.NIVEL_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NIVEL_1' de la tabla 'CONTROL_ACCESO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.NIVEL_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NIVEL_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONTROL_ACCESO.NIVEL_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NIVEL_2' de la tabla 'CONTROL_ACCESO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.NIVEL_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NIVEL_3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONTROL_ACCESO.NIVEL_3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NIVEL_3' de la tabla 'CONTROL_ACCESO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.NIVEL_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIVILEGIOS() As Decimal
            Get
                Return CType(Me(Me.tableCONTROL_ACCESO.PRIVILEGIOSColumn),Decimal)
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.PRIVILEGIOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERMITIR_IMPRIMIR() As Decimal
            Get
                Return CType(Me(Me.tableCONTROL_ACCESO.PERMITIR_IMPRIMIRColumn),Decimal)
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.PERMITIR_IMPRIMIRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_REGISTRO() As String
            Get
                Return CType(Me(Me.tableCONTROL_ACCESO.USUARIO_REGISTROColumn),String)
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.USUARIO_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_REGISTRO() As Date
            Get
                Return CType(Me(Me.tableCONTROL_ACCESO.FECHA_REGISTROColumn),Date)
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.FECHA_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_MODIFICA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONTROL_ACCESO.USUARIO_MODIFICAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO_MODIFICA' de la tabla 'CONTROL_ACCESO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.USUARIO_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCONTROL_ACCESO.FECHA_MODIFICAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MODIFICA' de la tabla 'CONTROL_ACCESO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONTROL_ACCESO.FECHA_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNIVEL_1Null() As Boolean
            Return Me.IsNull(Me.tableCONTROL_ACCESO.NIVEL_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNIVEL_1Null()
            Me(Me.tableCONTROL_ACCESO.NIVEL_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNIVEL_2Null() As Boolean
            Return Me.IsNull(Me.tableCONTROL_ACCESO.NIVEL_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNIVEL_2Null()
            Me(Me.tableCONTROL_ACCESO.NIVEL_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNIVEL_3Null() As Boolean
            Return Me.IsNull(Me.tableCONTROL_ACCESO.NIVEL_3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNIVEL_3Null()
            Me(Me.tableCONTROL_ACCESO.NIVEL_3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIO_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableCONTROL_ACCESO.USUARIO_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIO_MODIFICANull()
            Me(Me.tableCONTROL_ACCESO.USUARIO_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableCONTROL_ACCESO.FECHA_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICANull()
            Me(Me.tableCONTROL_ACCESO.FECHA_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CONTROL_ACCESORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CONTROL_ACCESORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CONTROL_ACCESORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CONTROL_ACCESORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
