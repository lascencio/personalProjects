'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5472
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsMigrarCabeceras"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsMigrarCabeceras
    Inherits Global.System.Data.DataSet
    
    Private tableMIGRAR_CABECERAS As MIGRAR_CABECERASDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MIGRAR_CABECERAS")) Is Nothing) Then
                MyBase.Tables.Add(New MIGRAR_CABECERASDataTable(ds.Tables("MIGRAR_CABECERAS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MIGRAR_CABECERAS() As MIGRAR_CABECERASDataTable
        Get
            Return Me.tableMIGRAR_CABECERAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsMigrarCabeceras = CType(MyBase.Clone,dsMigrarCabeceras)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MIGRAR_CABECERAS")) Is Nothing) Then
                MyBase.Tables.Add(New MIGRAR_CABECERASDataTable(ds.Tables("MIGRAR_CABECERAS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMIGRAR_CABECERAS = CType(MyBase.Tables("MIGRAR_CABECERAS"),MIGRAR_CABECERASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMIGRAR_CABECERAS) Is Nothing) Then
                Me.tableMIGRAR_CABECERAS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsMigrarCabeceras"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsMigrarCabeceras.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMIGRAR_CABECERAS = New MIGRAR_CABECERASDataTable
        MyBase.Tables.Add(Me.tableMIGRAR_CABECERAS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMIGRAR_CABECERAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsMigrarCabeceras = New dsMigrarCabeceras
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MIGRAR_CABECERASRowChangeEventHandler(ByVal sender As Object, ByVal e As MIGRAR_CABECERASRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MIGRAR_CABECERASDataTable
        Inherits Global.System.Data.TypedTableBase(Of MIGRAR_CABECERASRow)
        
        Private columncsubdia As Global.System.Data.DataColumn
        
        Private columnccompro As Global.System.Data.DataColumn
        
        Private columncfeccom As Global.System.Data.DataColumn
        
        Private columnccodmon As Global.System.Data.DataColumn
        
        Private columncsitua As Global.System.Data.DataColumn
        
        Private columnctipcam As Global.System.Data.DataColumn
        
        Private columncglosa As Global.System.Data.DataColumn
        
        Private columnctotal As Global.System.Data.DataColumn
        
        Private columnctipo As Global.System.Data.DataColumn
        
        Private columncflag As Global.System.Data.DataColumn
        
        Private columncdate As Global.System.Data.DataColumn
        
        Private columnchora As Global.System.Data.DataColumn
        
        Private columncuser As Global.System.Data.DataColumn
        
        Private columncfeccam As Global.System.Data.DataColumn
        
        Private columncorig As Global.System.Data.DataColumn
        
        Private columncform As Global.System.Data.DataColumn
        
        Private columnctipcom As Global.System.Data.DataColumn
        
        Private columncextor As Global.System.Data.DataColumn
        
        Private columncfeccom2 As Global.System.Data.DataColumn
        
        Private columncfeccam2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MIGRAR_CABECERAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property csubdiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncsubdia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ccomproColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnccompro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cfeccomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncfeccom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ccodmonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnccodmon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property csituaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncsitua
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctipcamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctipcam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cglosaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncglosa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cflagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncflag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property choraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cuserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncuser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cfeccamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncfeccam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property corigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncorig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cformColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncform
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctipcomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctipcom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cextorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncextor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cfeccom2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncfeccom2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cfeccam2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncfeccam2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MIGRAR_CABECERASRow
            Get
                Return CType(Me.Rows(index),MIGRAR_CABECERASRow)
            End Get
        End Property
        
        Public Event MIGRAR_CABECERASRowChanging As MIGRAR_CABECERASRowChangeEventHandler
        
        Public Event MIGRAR_CABECERASRowChanged As MIGRAR_CABECERASRowChangeEventHandler
        
        Public Event MIGRAR_CABECERASRowDeleting As MIGRAR_CABECERASRowChangeEventHandler
        
        Public Event MIGRAR_CABECERASRowDeleted As MIGRAR_CABECERASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMIGRAR_CABECERASRow(ByVal row As MIGRAR_CABECERASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMIGRAR_CABECERASRow( _
                    ByVal csubdia As String,  _
                    ByVal ccompro As String,  _
                    ByVal cfeccom As String,  _
                    ByVal ccodmon As String,  _
                    ByVal csitua As String,  _
                    ByVal ctipcam As Decimal,  _
                    ByVal cglosa As String,  _
                    ByVal ctotal As Decimal,  _
                    ByVal ctipo As String,  _
                    ByVal cflag As String,  _
                    ByVal _cdate As Date,  _
                    ByVal chora As String,  _
                    ByVal cuser As String,  _
                    ByVal cfeccam As String,  _
                    ByVal corig As String,  _
                    ByVal cform As String,  _
                    ByVal ctipcom As String,  _
                    ByVal cextor As String,  _
                    ByVal cfeccom2 As Date,  _
                    ByVal cfeccam2 As Date) As MIGRAR_CABECERASRow
            Dim rowMIGRAR_CABECERASRow As MIGRAR_CABECERASRow = CType(Me.NewRow,MIGRAR_CABECERASRow)
            Dim columnValuesArray() As Object = New Object() {csubdia, ccompro, cfeccom, ccodmon, csitua, ctipcam, cglosa, ctotal, ctipo, cflag, _cdate, chora, cuser, cfeccam, corig, cform, ctipcom, cextor, cfeccom2, cfeccam2}
            rowMIGRAR_CABECERASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMIGRAR_CABECERASRow)
            Return rowMIGRAR_CABECERASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MIGRAR_CABECERASDataTable = CType(MyBase.Clone,MIGRAR_CABECERASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MIGRAR_CABECERASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncsubdia = MyBase.Columns("csubdia")
            Me.columnccompro = MyBase.Columns("ccompro")
            Me.columncfeccom = MyBase.Columns("cfeccom")
            Me.columnccodmon = MyBase.Columns("ccodmon")
            Me.columncsitua = MyBase.Columns("csitua")
            Me.columnctipcam = MyBase.Columns("ctipcam")
            Me.columncglosa = MyBase.Columns("cglosa")
            Me.columnctotal = MyBase.Columns("ctotal")
            Me.columnctipo = MyBase.Columns("ctipo")
            Me.columncflag = MyBase.Columns("cflag")
            Me.columncdate = MyBase.Columns("cdate")
            Me.columnchora = MyBase.Columns("chora")
            Me.columncuser = MyBase.Columns("cuser")
            Me.columncfeccam = MyBase.Columns("cfeccam")
            Me.columncorig = MyBase.Columns("corig")
            Me.columncform = MyBase.Columns("cform")
            Me.columnctipcom = MyBase.Columns("ctipcom")
            Me.columncextor = MyBase.Columns("cextor")
            Me.columncfeccom2 = MyBase.Columns("cfeccom2")
            Me.columncfeccam2 = MyBase.Columns("cfeccam2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncsubdia = New Global.System.Data.DataColumn("csubdia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncsubdia)
            Me.columnccompro = New Global.System.Data.DataColumn("ccompro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnccompro)
            Me.columncfeccom = New Global.System.Data.DataColumn("cfeccom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncfeccom)
            Me.columnccodmon = New Global.System.Data.DataColumn("ccodmon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnccodmon)
            Me.columncsitua = New Global.System.Data.DataColumn("csitua", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncsitua)
            Me.columnctipcam = New Global.System.Data.DataColumn("ctipcam", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctipcam)
            Me.columncglosa = New Global.System.Data.DataColumn("cglosa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncglosa)
            Me.columnctotal = New Global.System.Data.DataColumn("ctotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctotal)
            Me.columnctipo = New Global.System.Data.DataColumn("ctipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctipo)
            Me.columncflag = New Global.System.Data.DataColumn("cflag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncflag)
            Me.columncdate = New Global.System.Data.DataColumn("cdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columncdate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "cdateColumn")
            Me.columncdate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columncdate")
            Me.columncdate.ExtendedProperties.Add("Generator_UserColumnName", "cdate")
            MyBase.Columns.Add(Me.columncdate)
            Me.columnchora = New Global.System.Data.DataColumn("chora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchora)
            Me.columncuser = New Global.System.Data.DataColumn("cuser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncuser)
            Me.columncfeccam = New Global.System.Data.DataColumn("cfeccam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncfeccam)
            Me.columncorig = New Global.System.Data.DataColumn("corig", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncorig)
            Me.columncform = New Global.System.Data.DataColumn("cform", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncform)
            Me.columnctipcom = New Global.System.Data.DataColumn("ctipcom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctipcom)
            Me.columncextor = New Global.System.Data.DataColumn("cextor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncextor)
            Me.columncfeccom2 = New Global.System.Data.DataColumn("cfeccom2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncfeccom2)
            Me.columncfeccam2 = New Global.System.Data.DataColumn("cfeccam2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncfeccam2)
            Me.columncsubdia.AllowDBNull = false
            Me.columncsubdia.MaxLength = 2
            Me.columnccompro.MaxLength = 6
            Me.columncfeccom.MaxLength = 6
            Me.columnccodmon.MaxLength = 2
            Me.columncsitua.AllowDBNull = false
            Me.columncsitua.MaxLength = 1
            Me.columncglosa.MaxLength = 25
            Me.columnctipo.AllowDBNull = false
            Me.columnctipo.MaxLength = 1
            Me.columncflag.AllowDBNull = false
            Me.columncflag.MaxLength = 1
            Me.columncdate.AllowDBNull = false
            Me.columnchora.MaxLength = 5
            Me.columncuser.AllowDBNull = false
            Me.columncuser.MaxLength = 4
            Me.columncfeccam.MaxLength = 1
            Me.columncorig.MaxLength = 1
            Me.columncform.MaxLength = 1
            Me.columnctipcom.MaxLength = 1
            Me.columncextor.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMIGRAR_CABECERASRow() As MIGRAR_CABECERASRow
            Return CType(Me.NewRow,MIGRAR_CABECERASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MIGRAR_CABECERASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MIGRAR_CABECERASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MIGRAR_CABECERASRowChangedEvent) Is Nothing) Then
                RaiseEvent MIGRAR_CABECERASRowChanged(Me, New MIGRAR_CABECERASRowChangeEvent(CType(e.Row,MIGRAR_CABECERASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MIGRAR_CABECERASRowChangingEvent) Is Nothing) Then
                RaiseEvent MIGRAR_CABECERASRowChanging(Me, New MIGRAR_CABECERASRowChangeEvent(CType(e.Row,MIGRAR_CABECERASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MIGRAR_CABECERASRowDeletedEvent) Is Nothing) Then
                RaiseEvent MIGRAR_CABECERASRowDeleted(Me, New MIGRAR_CABECERASRowChangeEvent(CType(e.Row,MIGRAR_CABECERASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MIGRAR_CABECERASRowDeletingEvent) Is Nothing) Then
                RaiseEvent MIGRAR_CABECERASRowDeleting(Me, New MIGRAR_CABECERASRowChangeEvent(CType(e.Row,MIGRAR_CABECERASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMIGRAR_CABECERASRow(ByVal row As MIGRAR_CABECERASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsMigrarCabeceras = New dsMigrarCabeceras
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MIGRAR_CABECERASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MIGRAR_CABECERASRow
        Inherits Global.System.Data.DataRow
        
        Private tableMIGRAR_CABECERAS As MIGRAR_CABECERASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMIGRAR_CABECERAS = CType(Me.Table,MIGRAR_CABECERASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property csubdia() As String
            Get
                Return CType(Me(Me.tableMIGRAR_CABECERAS.csubdiaColumn),String)
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.csubdiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ccompro() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.ccomproColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ccompro' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.ccomproColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cfeccom() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.cfeccomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cfeccom' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cfeccomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ccodmon() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.ccodmonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ccodmon' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.ccodmonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property csitua() As String
            Get
                Return CType(Me(Me.tableMIGRAR_CABECERAS.csituaColumn),String)
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.csituaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctipcam() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.ctipcamColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ctipcam' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.ctipcamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cglosa() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.cglosaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cglosa' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cglosaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.ctotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ctotal' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.ctotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctipo() As String
            Get
                Return CType(Me(Me.tableMIGRAR_CABECERAS.ctipoColumn),String)
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.ctipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cflag() As String
            Get
                Return CType(Me(Me.tableMIGRAR_CABECERAS.cflagColumn),String)
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cflagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cdate() As Date
            Get
                Return CType(Me(Me.tableMIGRAR_CABECERAS.cdateColumn),Date)
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chora() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.choraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'chora' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.choraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cuser() As String
            Get
                Return CType(Me(Me.tableMIGRAR_CABECERAS.cuserColumn),String)
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cuserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cfeccam() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.cfeccamColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cfeccam' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cfeccamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property corig() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.corigColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'corig' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.corigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cform() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.cformColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cform' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cformColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctipcom() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.ctipcomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ctipcom' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.ctipcomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cextor() As String
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.cextorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cextor' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cextorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cfeccom2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.cfeccom2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cfeccom2' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cfeccom2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cfeccam2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMIGRAR_CABECERAS.cfeccam2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cfeccam2' de la tabla 'MIGRAR_CABECERAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMIGRAR_CABECERAS.cfeccam2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsccomproNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.ccomproColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetccomproNull()
            Me(Me.tableMIGRAR_CABECERAS.ccomproColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscfeccomNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.cfeccomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcfeccomNull()
            Me(Me.tableMIGRAR_CABECERAS.cfeccomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsccodmonNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.ccodmonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetccodmonNull()
            Me(Me.tableMIGRAR_CABECERAS.ccodmonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsctipcamNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.ctipcamColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetctipcamNull()
            Me(Me.tableMIGRAR_CABECERAS.ctipcamColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscglosaNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.cglosaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcglosaNull()
            Me(Me.tableMIGRAR_CABECERAS.cglosaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsctotalNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.ctotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetctotalNull()
            Me(Me.tableMIGRAR_CABECERAS.ctotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IschoraNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.choraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetchoraNull()
            Me(Me.tableMIGRAR_CABECERAS.choraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscfeccamNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.cfeccamColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcfeccamNull()
            Me(Me.tableMIGRAR_CABECERAS.cfeccamColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscorigNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.corigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcorigNull()
            Me(Me.tableMIGRAR_CABECERAS.corigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscformNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.cformColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcformNull()
            Me(Me.tableMIGRAR_CABECERAS.cformColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsctipcomNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.ctipcomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetctipcomNull()
            Me(Me.tableMIGRAR_CABECERAS.ctipcomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscextorNull() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.cextorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcextorNull()
            Me(Me.tableMIGRAR_CABECERAS.cextorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscfeccom2Null() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.cfeccom2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcfeccom2Null()
            Me(Me.tableMIGRAR_CABECERAS.cfeccom2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscfeccam2Null() As Boolean
            Return Me.IsNull(Me.tableMIGRAR_CABECERAS.cfeccam2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcfeccam2Null()
            Me(Me.tableMIGRAR_CABECERAS.cfeccam2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MIGRAR_CABECERASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MIGRAR_CABECERASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MIGRAR_CABECERASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MIGRAR_CABECERASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
