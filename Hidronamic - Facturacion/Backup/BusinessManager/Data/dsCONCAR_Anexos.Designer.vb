'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8009
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsCONCAR_Anexos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsCONCAR_Anexos
    Inherits Global.System.Data.DataSet
    
    Private tableANEXOS_CABECERA As ANEXOS_CABECERADataTable
    
    Private tableANEXOS_DETALLE As ANEXOS_DETALLEDataTable
    
    Private tableANEXOS As ANEXOSDataTable
    
    Private tableANEXOS_DOMICILIO As ANEXOS_DOMICILIODataTable
    
    Private tableANEXO_DETALLE As ANEXO_DETALLEDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ANEXOS_CABECERA")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXOS_CABECERADataTable(ds.Tables("ANEXOS_CABECERA")))
            End If
            If (Not (ds.Tables("ANEXOS_DETALLE")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXOS_DETALLEDataTable(ds.Tables("ANEXOS_DETALLE")))
            End If
            If (Not (ds.Tables("ANEXOS")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXOSDataTable(ds.Tables("ANEXOS")))
            End If
            If (Not (ds.Tables("ANEXOS_DOMICILIO")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXOS_DOMICILIODataTable(ds.Tables("ANEXOS_DOMICILIO")))
            End If
            If (Not (ds.Tables("ANEXO_DETALLE")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXO_DETALLEDataTable(ds.Tables("ANEXO_DETALLE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANEXOS_CABECERA() As ANEXOS_CABECERADataTable
        Get
            Return Me.tableANEXOS_CABECERA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANEXOS_DETALLE() As ANEXOS_DETALLEDataTable
        Get
            Return Me.tableANEXOS_DETALLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANEXOS() As ANEXOSDataTable
        Get
            Return Me.tableANEXOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANEXOS_DOMICILIO() As ANEXOS_DOMICILIODataTable
        Get
            Return Me.tableANEXOS_DOMICILIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANEXO_DETALLE() As ANEXO_DETALLEDataTable
        Get
            Return Me.tableANEXO_DETALLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsCONCAR_Anexos = CType(MyBase.Clone,dsCONCAR_Anexos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ANEXOS_CABECERA")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXOS_CABECERADataTable(ds.Tables("ANEXOS_CABECERA")))
            End If
            If (Not (ds.Tables("ANEXOS_DETALLE")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXOS_DETALLEDataTable(ds.Tables("ANEXOS_DETALLE")))
            End If
            If (Not (ds.Tables("ANEXOS")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXOSDataTable(ds.Tables("ANEXOS")))
            End If
            If (Not (ds.Tables("ANEXOS_DOMICILIO")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXOS_DOMICILIODataTable(ds.Tables("ANEXOS_DOMICILIO")))
            End If
            If (Not (ds.Tables("ANEXO_DETALLE")) Is Nothing) Then
                MyBase.Tables.Add(New ANEXO_DETALLEDataTable(ds.Tables("ANEXO_DETALLE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableANEXOS_CABECERA = CType(MyBase.Tables("ANEXOS_CABECERA"),ANEXOS_CABECERADataTable)
        If (initTable = true) Then
            If (Not (Me.tableANEXOS_CABECERA) Is Nothing) Then
                Me.tableANEXOS_CABECERA.InitVars
            End If
        End If
        Me.tableANEXOS_DETALLE = CType(MyBase.Tables("ANEXOS_DETALLE"),ANEXOS_DETALLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableANEXOS_DETALLE) Is Nothing) Then
                Me.tableANEXOS_DETALLE.InitVars
            End If
        End If
        Me.tableANEXOS = CType(MyBase.Tables("ANEXOS"),ANEXOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableANEXOS) Is Nothing) Then
                Me.tableANEXOS.InitVars
            End If
        End If
        Me.tableANEXOS_DOMICILIO = CType(MyBase.Tables("ANEXOS_DOMICILIO"),ANEXOS_DOMICILIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableANEXOS_DOMICILIO) Is Nothing) Then
                Me.tableANEXOS_DOMICILIO.InitVars
            End If
        End If
        Me.tableANEXO_DETALLE = CType(MyBase.Tables("ANEXO_DETALLE"),ANEXO_DETALLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableANEXO_DETALLE) Is Nothing) Then
                Me.tableANEXO_DETALLE.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsCONCAR_Anexos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsCONCAR_Anexos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableANEXOS_CABECERA = New ANEXOS_CABECERADataTable
        MyBase.Tables.Add(Me.tableANEXOS_CABECERA)
        Me.tableANEXOS_DETALLE = New ANEXOS_DETALLEDataTable
        MyBase.Tables.Add(Me.tableANEXOS_DETALLE)
        Me.tableANEXOS = New ANEXOSDataTable
        MyBase.Tables.Add(Me.tableANEXOS)
        Me.tableANEXOS_DOMICILIO = New ANEXOS_DOMICILIODataTable
        MyBase.Tables.Add(Me.tableANEXOS_DOMICILIO)
        Me.tableANEXO_DETALLE = New ANEXO_DETALLEDataTable
        MyBase.Tables.Add(Me.tableANEXO_DETALLE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANEXOS_CABECERA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANEXOS_DETALLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANEXOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANEXOS_DOMICILIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANEXO_DETALLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsCONCAR_Anexos = New dsCONCAR_Anexos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ANEXOS_CABECERARowChangeEventHandler(ByVal sender As Object, ByVal e As ANEXOS_CABECERARowChangeEvent)
    
    Public Delegate Sub ANEXOS_DETALLERowChangeEventHandler(ByVal sender As Object, ByVal e As ANEXOS_DETALLERowChangeEvent)
    
    Public Delegate Sub ANEXOSRowChangeEventHandler(ByVal sender As Object, ByVal e As ANEXOSRowChangeEvent)
    
    Public Delegate Sub ANEXOS_DOMICILIORowChangeEventHandler(ByVal sender As Object, ByVal e As ANEXOS_DOMICILIORowChangeEvent)
    
    Public Delegate Sub ANEXO_DETALLERowChangeEventHandler(ByVal sender As Object, ByVal e As ANEXO_DETALLERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANEXOS_CABECERADataTable
        Inherits Global.System.Data.TypedTableBase(Of ANEXOS_CABECERARow)
        
        Private columntcod As Global.System.Data.DataColumn
        
        Private columntclave As Global.System.Data.DataColumn
        
        Private columntdescri As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columnthora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANEXOS_CABECERA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tcodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntcod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tclaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntclave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdescriColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdescri
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANEXOS_CABECERARow
            Get
                Return CType(Me.Rows(index),ANEXOS_CABECERARow)
            End Get
        End Property
        
        Public Event ANEXOS_CABECERARowChanging As ANEXOS_CABECERARowChangeEventHandler
        
        Public Event ANEXOS_CABECERARowChanged As ANEXOS_CABECERARowChangeEventHandler
        
        Public Event ANEXOS_CABECERARowDeleting As ANEXOS_CABECERARowChangeEventHandler
        
        Public Event ANEXOS_CABECERARowDeleted As ANEXOS_CABECERARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANEXOS_CABECERARow(ByVal row As ANEXOS_CABECERARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANEXOS_CABECERARow(ByVal tcod As String, ByVal tclave As String, ByVal tdescri As String, ByVal tdate As Date, ByVal thora As String) As ANEXOS_CABECERARow
            Dim rowANEXOS_CABECERARow As ANEXOS_CABECERARow = CType(Me.NewRow,ANEXOS_CABECERARow)
            Dim columnValuesArray() As Object = New Object() {tcod, tclave, tdescri, tdate, thora}
            rowANEXOS_CABECERARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANEXOS_CABECERARow)
            Return rowANEXOS_CABECERARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANEXOS_CABECERADataTable = CType(MyBase.Clone,ANEXOS_CABECERADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANEXOS_CABECERADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntcod = MyBase.Columns("tcod")
            Me.columntclave = MyBase.Columns("tclave")
            Me.columntdescri = MyBase.Columns("tdescri")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columnthora = MyBase.Columns("thora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntcod = New Global.System.Data.DataColumn("tcod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntcod)
            Me.columntclave = New Global.System.Data.DataColumn("tclave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntclave)
            Me.columntdescri = New Global.System.Data.DataColumn("tdescri", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdescri)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columnthora = New Global.System.Data.DataColumn("thora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthora)
            Me.columntcod.AllowDBNull = false
            Me.columntcod.MaxLength = 2
            Me.columntclave.AllowDBNull = false
            Me.columntclave.MaxLength = 8
            Me.columntdescri.AllowDBNull = false
            Me.columntdescri.MaxLength = 60
            Me.columntdate.AllowDBNull = false
            Me.columnthora.AllowDBNull = false
            Me.columnthora.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANEXOS_CABECERARow() As ANEXOS_CABECERARow
            Return CType(Me.NewRow,ANEXOS_CABECERARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANEXOS_CABECERARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANEXOS_CABECERARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANEXOS_CABECERARowChangedEvent) Is Nothing) Then
                RaiseEvent ANEXOS_CABECERARowChanged(Me, New ANEXOS_CABECERARowChangeEvent(CType(e.Row,ANEXOS_CABECERARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANEXOS_CABECERARowChangingEvent) Is Nothing) Then
                RaiseEvent ANEXOS_CABECERARowChanging(Me, New ANEXOS_CABECERARowChangeEvent(CType(e.Row,ANEXOS_CABECERARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANEXOS_CABECERARowDeletedEvent) Is Nothing) Then
                RaiseEvent ANEXOS_CABECERARowDeleted(Me, New ANEXOS_CABECERARowChangeEvent(CType(e.Row,ANEXOS_CABECERARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANEXOS_CABECERARowDeletingEvent) Is Nothing) Then
                RaiseEvent ANEXOS_CABECERARowDeleting(Me, New ANEXOS_CABECERARowChangeEvent(CType(e.Row,ANEXOS_CABECERARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANEXOS_CABECERARow(ByVal row As ANEXOS_CABECERARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCONCAR_Anexos = New dsCONCAR_Anexos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANEXOS_CABECERADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANEXOS_DETALLEDataTable
        Inherits Global.System.Data.TypedTableBase(Of ANEXOS_DETALLERow)
        
        Private columnavanexo As Global.System.Data.DataColumn
        
        Private columnacodane As Global.System.Data.DataColumn
        
        Private columnadesane As Global.System.Data.DataColumn
        
        Private columnarefane As Global.System.Data.DataColumn
        
        Private columnaruc As Global.System.Data.DataColumn
        
        Private columnacodmon As Global.System.Data.DataColumn
        
        Private columnaestado As Global.System.Data.DataColumn
        
        Private columnadate As Global.System.Data.DataColumn
        
        Private columnahora As Global.System.Data.DataColumn
        
        Private columnavrete As Global.System.Data.DataColumn
        
        Private columnaporre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANEXOS_DETALLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property avanexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnavanexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acodaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacodane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adesaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadesane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property arefaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnarefane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property arucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaruc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acodmonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacodmon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property aestadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ahoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnahora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property avreteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnavrete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property aporreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaporre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANEXOS_DETALLERow
            Get
                Return CType(Me.Rows(index),ANEXOS_DETALLERow)
            End Get
        End Property
        
        Public Event ANEXOS_DETALLERowChanging As ANEXOS_DETALLERowChangeEventHandler
        
        Public Event ANEXOS_DETALLERowChanged As ANEXOS_DETALLERowChangeEventHandler
        
        Public Event ANEXOS_DETALLERowDeleting As ANEXOS_DETALLERowChangeEventHandler
        
        Public Event ANEXOS_DETALLERowDeleted As ANEXOS_DETALLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANEXOS_DETALLERow(ByVal row As ANEXOS_DETALLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANEXOS_DETALLERow(ByVal avanexo As String, ByVal acodane As String, ByVal adesane As String, ByVal arefane As String, ByVal aruc As String, ByVal acodmon As String, ByVal aestado As String, ByVal adate As Date, ByVal ahora As String, ByVal avrete As String, ByVal aporre As Decimal) As ANEXOS_DETALLERow
            Dim rowANEXOS_DETALLERow As ANEXOS_DETALLERow = CType(Me.NewRow,ANEXOS_DETALLERow)
            Dim columnValuesArray() As Object = New Object() {avanexo, acodane, adesane, arefane, aruc, acodmon, aestado, adate, ahora, avrete, aporre}
            rowANEXOS_DETALLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANEXOS_DETALLERow)
            Return rowANEXOS_DETALLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANEXOS_DETALLEDataTable = CType(MyBase.Clone,ANEXOS_DETALLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANEXOS_DETALLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnavanexo = MyBase.Columns("avanexo")
            Me.columnacodane = MyBase.Columns("acodane")
            Me.columnadesane = MyBase.Columns("adesane")
            Me.columnarefane = MyBase.Columns("arefane")
            Me.columnaruc = MyBase.Columns("aruc")
            Me.columnacodmon = MyBase.Columns("acodmon")
            Me.columnaestado = MyBase.Columns("aestado")
            Me.columnadate = MyBase.Columns("adate")
            Me.columnahora = MyBase.Columns("ahora")
            Me.columnavrete = MyBase.Columns("avrete")
            Me.columnaporre = MyBase.Columns("aporre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnavanexo = New Global.System.Data.DataColumn("avanexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnavanexo)
            Me.columnacodane = New Global.System.Data.DataColumn("acodane", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacodane)
            Me.columnadesane = New Global.System.Data.DataColumn("adesane", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadesane)
            Me.columnarefane = New Global.System.Data.DataColumn("arefane", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnarefane)
            Me.columnaruc = New Global.System.Data.DataColumn("aruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaruc)
            Me.columnacodmon = New Global.System.Data.DataColumn("acodmon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacodmon)
            Me.columnaestado = New Global.System.Data.DataColumn("aestado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaestado)
            Me.columnadate = New Global.System.Data.DataColumn("adate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadate)
            Me.columnahora = New Global.System.Data.DataColumn("ahora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnahora)
            Me.columnavrete = New Global.System.Data.DataColumn("avrete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnavrete)
            Me.columnaporre = New Global.System.Data.DataColumn("aporre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaporre)
            Me.columnavanexo.AllowDBNull = false
            Me.columnavanexo.MaxLength = 1
            Me.columnacodane.AllowDBNull = false
            Me.columnacodane.MaxLength = 18
            Me.columnadesane.AllowDBNull = false
            Me.columnadesane.MaxLength = 120
            Me.columnarefane.AllowDBNull = false
            Me.columnarefane.MaxLength = 50
            Me.columnaruc.AllowDBNull = false
            Me.columnaruc.MaxLength = 18
            Me.columnacodmon.AllowDBNull = false
            Me.columnacodmon.MaxLength = 2
            Me.columnaestado.AllowDBNull = false
            Me.columnaestado.MaxLength = 1
            Me.columnadate.AllowDBNull = false
            Me.columnahora.AllowDBNull = false
            Me.columnahora.MaxLength = 6
            Me.columnavrete.AllowDBNull = false
            Me.columnavrete.MaxLength = 1
            Me.columnaporre.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANEXOS_DETALLERow() As ANEXOS_DETALLERow
            Return CType(Me.NewRow,ANEXOS_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANEXOS_DETALLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANEXOS_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANEXOS_DETALLERowChangedEvent) Is Nothing) Then
                RaiseEvent ANEXOS_DETALLERowChanged(Me, New ANEXOS_DETALLERowChangeEvent(CType(e.Row,ANEXOS_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANEXOS_DETALLERowChangingEvent) Is Nothing) Then
                RaiseEvent ANEXOS_DETALLERowChanging(Me, New ANEXOS_DETALLERowChangeEvent(CType(e.Row,ANEXOS_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANEXOS_DETALLERowDeletedEvent) Is Nothing) Then
                RaiseEvent ANEXOS_DETALLERowDeleted(Me, New ANEXOS_DETALLERowChangeEvent(CType(e.Row,ANEXOS_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANEXOS_DETALLERowDeletingEvent) Is Nothing) Then
                RaiseEvent ANEXOS_DETALLERowDeleting(Me, New ANEXOS_DETALLERowChangeEvent(CType(e.Row,ANEXOS_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANEXOS_DETALLERow(ByVal row As ANEXOS_DETALLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCONCAR_Anexos = New dsCONCAR_Anexos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANEXOS_DETALLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANEXOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of ANEXOSRow)
        
        Private columntcod As Global.System.Data.DataColumn
        
        Private columntclave As Global.System.Data.DataColumn
        
        Private columntdescri As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columnthora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANEXOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tcodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntcod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tclaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntclave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdescriColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdescri
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANEXOSRow
            Get
                Return CType(Me.Rows(index),ANEXOSRow)
            End Get
        End Property
        
        Public Event ANEXOSRowChanging As ANEXOSRowChangeEventHandler
        
        Public Event ANEXOSRowChanged As ANEXOSRowChangeEventHandler
        
        Public Event ANEXOSRowDeleting As ANEXOSRowChangeEventHandler
        
        Public Event ANEXOSRowDeleted As ANEXOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANEXOSRow(ByVal row As ANEXOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANEXOSRow(ByVal tcod As String, ByVal tclave As String, ByVal tdescri As String, ByVal tdate As Date, ByVal thora As String) As ANEXOSRow
            Dim rowANEXOSRow As ANEXOSRow = CType(Me.NewRow,ANEXOSRow)
            Dim columnValuesArray() As Object = New Object() {tcod, tclave, tdescri, tdate, thora}
            rowANEXOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANEXOSRow)
            Return rowANEXOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANEXOSDataTable = CType(MyBase.Clone,ANEXOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANEXOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntcod = MyBase.Columns("tcod")
            Me.columntclave = MyBase.Columns("tclave")
            Me.columntdescri = MyBase.Columns("tdescri")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columnthora = MyBase.Columns("thora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntcod = New Global.System.Data.DataColumn("tcod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntcod)
            Me.columntclave = New Global.System.Data.DataColumn("tclave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntclave)
            Me.columntdescri = New Global.System.Data.DataColumn("tdescri", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdescri)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columnthora = New Global.System.Data.DataColumn("thora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthora)
            Me.columntcod.AllowDBNull = false
            Me.columntcod.MaxLength = 2
            Me.columntclave.AllowDBNull = false
            Me.columntclave.MaxLength = 8
            Me.columntdescri.AllowDBNull = false
            Me.columntdescri.MaxLength = 60
            Me.columntdate.AllowDBNull = false
            Me.columnthora.AllowDBNull = false
            Me.columnthora.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANEXOSRow() As ANEXOSRow
            Return CType(Me.NewRow,ANEXOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANEXOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANEXOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANEXOSRowChangedEvent) Is Nothing) Then
                RaiseEvent ANEXOSRowChanged(Me, New ANEXOSRowChangeEvent(CType(e.Row,ANEXOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANEXOSRowChangingEvent) Is Nothing) Then
                RaiseEvent ANEXOSRowChanging(Me, New ANEXOSRowChangeEvent(CType(e.Row,ANEXOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANEXOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ANEXOSRowDeleted(Me, New ANEXOSRowChangeEvent(CType(e.Row,ANEXOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANEXOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ANEXOSRowDeleting(Me, New ANEXOSRowChangeEvent(CType(e.Row,ANEXOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANEXOSRow(ByVal row As ANEXOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCONCAR_Anexos = New dsCONCAR_Anexos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANEXOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANEXOS_DOMICILIODataTable
        Inherits Global.System.Data.TypedTableBase(Of ANEXOS_DOMICILIORow)
        
        Private columnavanexo As Global.System.Data.DataColumn
        
        Private columnacodane As Global.System.Data.DataColumn
        
        Private columnadesane As Global.System.Data.DataColumn
        
        Private columnarefane As Global.System.Data.DataColumn
        
        Private columnarefane2 As Global.System.Data.DataColumn
        
        Private columncontacto_venta As Global.System.Data.DataColumn
        
        Private columncontacto_compra As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANEXOS_DOMICILIO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property avanexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnavanexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acodaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacodane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adesaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadesane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property arefaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnarefane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property arefane2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnarefane2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contacto_ventaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontacto_venta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contacto_compraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontacto_compra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANEXOS_DOMICILIORow
            Get
                Return CType(Me.Rows(index),ANEXOS_DOMICILIORow)
            End Get
        End Property
        
        Public Event ANEXOS_DOMICILIORowChanging As ANEXOS_DOMICILIORowChangeEventHandler
        
        Public Event ANEXOS_DOMICILIORowChanged As ANEXOS_DOMICILIORowChangeEventHandler
        
        Public Event ANEXOS_DOMICILIORowDeleting As ANEXOS_DOMICILIORowChangeEventHandler
        
        Public Event ANEXOS_DOMICILIORowDeleted As ANEXOS_DOMICILIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANEXOS_DOMICILIORow(ByVal row As ANEXOS_DOMICILIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANEXOS_DOMICILIORow(ByVal avanexo As String, ByVal acodane As String, ByVal adesane As String, ByVal arefane As String, ByVal arefane2 As String, ByVal contacto_venta As String, ByVal contacto_compra As String) As ANEXOS_DOMICILIORow
            Dim rowANEXOS_DOMICILIORow As ANEXOS_DOMICILIORow = CType(Me.NewRow,ANEXOS_DOMICILIORow)
            Dim columnValuesArray() As Object = New Object() {avanexo, acodane, adesane, arefane, arefane2, contacto_venta, contacto_compra}
            rowANEXOS_DOMICILIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANEXOS_DOMICILIORow)
            Return rowANEXOS_DOMICILIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByavanexoacodane(ByVal avanexo As String, ByVal acodane As String) As ANEXOS_DOMICILIORow
            Return CType(Me.Rows.Find(New Object() {avanexo, acodane}),ANEXOS_DOMICILIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANEXOS_DOMICILIODataTable = CType(MyBase.Clone,ANEXOS_DOMICILIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANEXOS_DOMICILIODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnavanexo = MyBase.Columns("avanexo")
            Me.columnacodane = MyBase.Columns("acodane")
            Me.columnadesane = MyBase.Columns("adesane")
            Me.columnarefane = MyBase.Columns("arefane")
            Me.columnarefane2 = MyBase.Columns("arefane2")
            Me.columncontacto_venta = MyBase.Columns("contacto_venta")
            Me.columncontacto_compra = MyBase.Columns("contacto_compra")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnavanexo = New Global.System.Data.DataColumn("avanexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnavanexo)
            Me.columnacodane = New Global.System.Data.DataColumn("acodane", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacodane)
            Me.columnadesane = New Global.System.Data.DataColumn("adesane", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadesane)
            Me.columnarefane = New Global.System.Data.DataColumn("arefane", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnarefane)
            Me.columnarefane2 = New Global.System.Data.DataColumn("arefane2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnarefane2)
            Me.columncontacto_venta = New Global.System.Data.DataColumn("contacto_venta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontacto_venta)
            Me.columncontacto_compra = New Global.System.Data.DataColumn("contacto_compra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontacto_compra)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnavanexo, Me.columnacodane}, true))
            Me.columnavanexo.AllowDBNull = false
            Me.columnavanexo.MaxLength = 1
            Me.columnacodane.AllowDBNull = false
            Me.columnacodane.MaxLength = 18
            Me.columnadesane.AllowDBNull = false
            Me.columnadesane.MaxLength = 120
            Me.columnarefane.AllowDBNull = false
            Me.columnarefane.MaxLength = 50
            Me.columnarefane2.AllowDBNull = false
            Me.columnarefane2.MaxLength = 50
            Me.columncontacto_venta.AllowDBNull = false
            Me.columncontacto_venta.MaxLength = 50
            Me.columncontacto_compra.AllowDBNull = false
            Me.columncontacto_compra.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANEXOS_DOMICILIORow() As ANEXOS_DOMICILIORow
            Return CType(Me.NewRow,ANEXOS_DOMICILIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANEXOS_DOMICILIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANEXOS_DOMICILIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANEXOS_DOMICILIORowChangedEvent) Is Nothing) Then
                RaiseEvent ANEXOS_DOMICILIORowChanged(Me, New ANEXOS_DOMICILIORowChangeEvent(CType(e.Row,ANEXOS_DOMICILIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANEXOS_DOMICILIORowChangingEvent) Is Nothing) Then
                RaiseEvent ANEXOS_DOMICILIORowChanging(Me, New ANEXOS_DOMICILIORowChangeEvent(CType(e.Row,ANEXOS_DOMICILIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANEXOS_DOMICILIORowDeletedEvent) Is Nothing) Then
                RaiseEvent ANEXOS_DOMICILIORowDeleted(Me, New ANEXOS_DOMICILIORowChangeEvent(CType(e.Row,ANEXOS_DOMICILIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANEXOS_DOMICILIORowDeletingEvent) Is Nothing) Then
                RaiseEvent ANEXOS_DOMICILIORowDeleting(Me, New ANEXOS_DOMICILIORowChangeEvent(CType(e.Row,ANEXOS_DOMICILIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANEXOS_DOMICILIORow(ByVal row As ANEXOS_DOMICILIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCONCAR_Anexos = New dsCONCAR_Anexos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANEXOS_DOMICILIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANEXO_DETALLEDataTable
        Inherits Global.System.Data.TypedTableBase(Of ANEXO_DETALLERow)
        
        Private columnAVANEXO As Global.System.Data.DataColumn
        
        Private columnACODANE As Global.System.Data.DataColumn
        
        Private columnADESANE As Global.System.Data.DataColumn
        
        Private columnARUC As Global.System.Data.DataColumn
        
        Private columnACODMON As Global.System.Data.DataColumn
        
        Private columnAESTADO As Global.System.Data.DataColumn
        
        Private columnADATE As Global.System.Data.DataColumn
        
        Private columnAHORA As Global.System.Data.DataColumn
        
        Private columnAPATERNO As Global.System.Data.DataColumn
        
        Private columnAMATERNO As Global.System.Data.DataColumn
        
        Private columnANOMBRE As Global.System.Data.DataColumn
        
        Private columnATIPTRA As Global.System.Data.DataColumn
        
        Private columnADOCIDE As Global.System.Data.DataColumn
        
        Private columnANUMIDE As Global.System.Data.DataColumn
        
        Private columnATIPPRO As Global.System.Data.DataColumn
        
        Private columnANACIO As Global.System.Data.DataColumn
        
        Private columnAESSAL As Global.System.Data.DataColumn
        
        Private columnADOMIC As Global.System.Data.DataColumn
        
        Private columnASITUA As Global.System.Data.DataColumn
        
        Private columnATICONV As Global.System.Data.DataColumn
        
        Private columnAMEMO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANEXO_DETALLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AVANEXOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAVANEXO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACODANEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACODANE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADESANEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADESANE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ARUCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnARUC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACODMONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACODMON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AHORAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAHORA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APATERNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPATERNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMATERNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMATERNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATIPTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATIPTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADOCIDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADOCIDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANUMIDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANUMIDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATIPPROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATIPPRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANACIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANACIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AESSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAESSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADOMICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADOMIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASITUAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASITUA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATICONVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATICONV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMEMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMEMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANEXO_DETALLERow
            Get
                Return CType(Me.Rows(index),ANEXO_DETALLERow)
            End Get
        End Property
        
        Public Event ANEXO_DETALLERowChanging As ANEXO_DETALLERowChangeEventHandler
        
        Public Event ANEXO_DETALLERowChanged As ANEXO_DETALLERowChangeEventHandler
        
        Public Event ANEXO_DETALLERowDeleting As ANEXO_DETALLERowChangeEventHandler
        
        Public Event ANEXO_DETALLERowDeleted As ANEXO_DETALLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANEXO_DETALLERow(ByVal row As ANEXO_DETALLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANEXO_DETALLERow( _
                    ByVal AVANEXO As String,  _
                    ByVal ACODANE As String,  _
                    ByVal ADESANE As String,  _
                    ByVal ARUC As String,  _
                    ByVal ACODMON As String,  _
                    ByVal AESTADO As String,  _
                    ByVal ADATE As Date,  _
                    ByVal AHORA As String,  _
                    ByVal APATERNO As String,  _
                    ByVal AMATERNO As String,  _
                    ByVal ANOMBRE As String,  _
                    ByVal ATIPTRA As String,  _
                    ByVal ADOCIDE As String,  _
                    ByVal ANUMIDE As String,  _
                    ByVal ATIPPRO As String,  _
                    ByVal ANACIO As String,  _
                    ByVal AESSAL As String,  _
                    ByVal ADOMIC As String,  _
                    ByVal ASITUA As String,  _
                    ByVal ATICONV As String,  _
                    ByVal AMEMO As String) As ANEXO_DETALLERow
            Dim rowANEXO_DETALLERow As ANEXO_DETALLERow = CType(Me.NewRow,ANEXO_DETALLERow)
            Dim columnValuesArray() As Object = New Object() {AVANEXO, ACODANE, ADESANE, ARUC, ACODMON, AESTADO, ADATE, AHORA, APATERNO, AMATERNO, ANOMBRE, ATIPTRA, ADOCIDE, ANUMIDE, ATIPPRO, ANACIO, AESSAL, ADOMIC, ASITUA, ATICONV, AMEMO}
            rowANEXO_DETALLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANEXO_DETALLERow)
            Return rowANEXO_DETALLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANEXO_DETALLEDataTable = CType(MyBase.Clone,ANEXO_DETALLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANEXO_DETALLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAVANEXO = MyBase.Columns("AVANEXO")
            Me.columnACODANE = MyBase.Columns("ACODANE")
            Me.columnADESANE = MyBase.Columns("ADESANE")
            Me.columnARUC = MyBase.Columns("ARUC")
            Me.columnACODMON = MyBase.Columns("ACODMON")
            Me.columnAESTADO = MyBase.Columns("AESTADO")
            Me.columnADATE = MyBase.Columns("ADATE")
            Me.columnAHORA = MyBase.Columns("AHORA")
            Me.columnAPATERNO = MyBase.Columns("APATERNO")
            Me.columnAMATERNO = MyBase.Columns("AMATERNO")
            Me.columnANOMBRE = MyBase.Columns("ANOMBRE")
            Me.columnATIPTRA = MyBase.Columns("ATIPTRA")
            Me.columnADOCIDE = MyBase.Columns("ADOCIDE")
            Me.columnANUMIDE = MyBase.Columns("ANUMIDE")
            Me.columnATIPPRO = MyBase.Columns("ATIPPRO")
            Me.columnANACIO = MyBase.Columns("ANACIO")
            Me.columnAESSAL = MyBase.Columns("AESSAL")
            Me.columnADOMIC = MyBase.Columns("ADOMIC")
            Me.columnASITUA = MyBase.Columns("ASITUA")
            Me.columnATICONV = MyBase.Columns("ATICONV")
            Me.columnAMEMO = MyBase.Columns("AMEMO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAVANEXO = New Global.System.Data.DataColumn("AVANEXO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAVANEXO)
            Me.columnACODANE = New Global.System.Data.DataColumn("ACODANE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACODANE)
            Me.columnADESANE = New Global.System.Data.DataColumn("ADESANE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADESANE)
            Me.columnARUC = New Global.System.Data.DataColumn("ARUC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnARUC)
            Me.columnACODMON = New Global.System.Data.DataColumn("ACODMON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACODMON)
            Me.columnAESTADO = New Global.System.Data.DataColumn("AESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAESTADO)
            Me.columnADATE = New Global.System.Data.DataColumn("ADATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADATE)
            Me.columnAHORA = New Global.System.Data.DataColumn("AHORA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAHORA)
            Me.columnAPATERNO = New Global.System.Data.DataColumn("APATERNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPATERNO)
            Me.columnAMATERNO = New Global.System.Data.DataColumn("AMATERNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMATERNO)
            Me.columnANOMBRE = New Global.System.Data.DataColumn("ANOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANOMBRE)
            Me.columnATIPTRA = New Global.System.Data.DataColumn("ATIPTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATIPTRA)
            Me.columnADOCIDE = New Global.System.Data.DataColumn("ADOCIDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADOCIDE)
            Me.columnANUMIDE = New Global.System.Data.DataColumn("ANUMIDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANUMIDE)
            Me.columnATIPPRO = New Global.System.Data.DataColumn("ATIPPRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATIPPRO)
            Me.columnANACIO = New Global.System.Data.DataColumn("ANACIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANACIO)
            Me.columnAESSAL = New Global.System.Data.DataColumn("AESSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAESSAL)
            Me.columnADOMIC = New Global.System.Data.DataColumn("ADOMIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADOMIC)
            Me.columnASITUA = New Global.System.Data.DataColumn("ASITUA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASITUA)
            Me.columnATICONV = New Global.System.Data.DataColumn("ATICONV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATICONV)
            Me.columnAMEMO = New Global.System.Data.DataColumn("AMEMO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMEMO)
            Me.columnAVANEXO.AllowDBNull = false
            Me.columnAVANEXO.MaxLength = 1
            Me.columnACODANE.AllowDBNull = false
            Me.columnACODANE.MaxLength = 18
            Me.columnADESANE.AllowDBNull = false
            Me.columnADESANE.MaxLength = 40
            Me.columnARUC.AllowDBNull = false
            Me.columnARUC.MaxLength = 18
            Me.columnACODMON.AllowDBNull = false
            Me.columnACODMON.MaxLength = 2
            Me.columnAESTADO.AllowDBNull = false
            Me.columnAESTADO.MaxLength = 1
            Me.columnAHORA.AllowDBNull = false
            Me.columnAHORA.MaxLength = 6
            Me.columnAPATERNO.AllowDBNull = false
            Me.columnAPATERNO.MaxLength = 20
            Me.columnAMATERNO.AllowDBNull = false
            Me.columnAMATERNO.MaxLength = 20
            Me.columnANOMBRE.AllowDBNull = false
            Me.columnANOMBRE.MaxLength = 20
            Me.columnATIPTRA.AllowDBNull = false
            Me.columnATIPTRA.MaxLength = 1
            Me.columnADOCIDE.AllowDBNull = false
            Me.columnADOCIDE.MaxLength = 2
            Me.columnANUMIDE.AllowDBNull = false
            Me.columnANUMIDE.MaxLength = 15
            Me.columnATIPPRO.AllowDBNull = false
            Me.columnATIPPRO.MaxLength = 1
            Me.columnANACIO.AllowDBNull = false
            Me.columnANACIO.MaxLength = 6
            Me.columnAESSAL.AllowDBNull = false
            Me.columnAESSAL.MaxLength = 2
            Me.columnADOMIC.AllowDBNull = false
            Me.columnADOMIC.MaxLength = 2
            Me.columnASITUA.AllowDBNull = false
            Me.columnASITUA.MaxLength = 2
            Me.columnATICONV.AllowDBNull = false
            Me.columnATICONV.MaxLength = 2
            Me.columnAMEMO.AllowDBNull = false
            Me.columnAMEMO.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANEXO_DETALLERow() As ANEXO_DETALLERow
            Return CType(Me.NewRow,ANEXO_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANEXO_DETALLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANEXO_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANEXO_DETALLERowChangedEvent) Is Nothing) Then
                RaiseEvent ANEXO_DETALLERowChanged(Me, New ANEXO_DETALLERowChangeEvent(CType(e.Row,ANEXO_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANEXO_DETALLERowChangingEvent) Is Nothing) Then
                RaiseEvent ANEXO_DETALLERowChanging(Me, New ANEXO_DETALLERowChangeEvent(CType(e.Row,ANEXO_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANEXO_DETALLERowDeletedEvent) Is Nothing) Then
                RaiseEvent ANEXO_DETALLERowDeleted(Me, New ANEXO_DETALLERowChangeEvent(CType(e.Row,ANEXO_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANEXO_DETALLERowDeletingEvent) Is Nothing) Then
                RaiseEvent ANEXO_DETALLERowDeleting(Me, New ANEXO_DETALLERowChangeEvent(CType(e.Row,ANEXO_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANEXO_DETALLERow(ByVal row As ANEXO_DETALLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCONCAR_Anexos = New dsCONCAR_Anexos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANEXO_DETALLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANEXOS_CABECERARow
        Inherits Global.System.Data.DataRow
        
        Private tableANEXOS_CABECERA As ANEXOS_CABECERADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANEXOS_CABECERA = CType(Me.Table,ANEXOS_CABECERADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tcod() As String
            Get
                Return CType(Me(Me.tableANEXOS_CABECERA.tcodColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_CABECERA.tcodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tclave() As String
            Get
                Return CType(Me(Me.tableANEXOS_CABECERA.tclaveColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_CABECERA.tclaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdescri() As String
            Get
                Return CType(Me(Me.tableANEXOS_CABECERA.tdescriColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_CABECERA.tdescriColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As Date
            Get
                Return CType(Me(Me.tableANEXOS_CABECERA.tdateColumn),Date)
            End Get
            Set
                Me(Me.tableANEXOS_CABECERA.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thora() As String
            Get
                Return CType(Me(Me.tableANEXOS_CABECERA.thoraColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_CABECERA.thoraColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANEXOS_DETALLERow
        Inherits Global.System.Data.DataRow
        
        Private tableANEXOS_DETALLE As ANEXOS_DETALLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANEXOS_DETALLE = CType(Me.Table,ANEXOS_DETALLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property avanexo() As String
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.avanexoColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.avanexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acodane() As String
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.acodaneColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.acodaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adesane() As String
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.adesaneColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.adesaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property arefane() As String
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.arefaneColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.arefaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property aruc() As String
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.arucColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.arucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acodmon() As String
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.acodmonColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.acodmonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property aestado() As String
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.aestadoColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.aestadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adate() As Date
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.adateColumn),Date)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.adateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ahora() As String
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.ahoraColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.ahoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property avrete() As String
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.avreteColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.avreteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property aporre() As Decimal
            Get
                Return CType(Me(Me.tableANEXOS_DETALLE.aporreColumn),Decimal)
            End Get
            Set
                Me(Me.tableANEXOS_DETALLE.aporreColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANEXOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableANEXOS As ANEXOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANEXOS = CType(Me.Table,ANEXOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tcod() As String
            Get
                Return CType(Me(Me.tableANEXOS.tcodColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS.tcodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tclave() As String
            Get
                Return CType(Me(Me.tableANEXOS.tclaveColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS.tclaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdescri() As String
            Get
                Return CType(Me(Me.tableANEXOS.tdescriColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS.tdescriColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As Date
            Get
                Return CType(Me(Me.tableANEXOS.tdateColumn),Date)
            End Get
            Set
                Me(Me.tableANEXOS.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thora() As String
            Get
                Return CType(Me(Me.tableANEXOS.thoraColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS.thoraColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANEXOS_DOMICILIORow
        Inherits Global.System.Data.DataRow
        
        Private tableANEXOS_DOMICILIO As ANEXOS_DOMICILIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANEXOS_DOMICILIO = CType(Me.Table,ANEXOS_DOMICILIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property avanexo() As String
            Get
                Return CType(Me(Me.tableANEXOS_DOMICILIO.avanexoColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DOMICILIO.avanexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acodane() As String
            Get
                Return CType(Me(Me.tableANEXOS_DOMICILIO.acodaneColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DOMICILIO.acodaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adesane() As String
            Get
                Return CType(Me(Me.tableANEXOS_DOMICILIO.adesaneColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DOMICILIO.adesaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property arefane() As String
            Get
                Return CType(Me(Me.tableANEXOS_DOMICILIO.arefaneColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DOMICILIO.arefaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property arefane2() As String
            Get
                Return CType(Me(Me.tableANEXOS_DOMICILIO.arefane2Column),String)
            End Get
            Set
                Me(Me.tableANEXOS_DOMICILIO.arefane2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contacto_venta() As String
            Get
                Return CType(Me(Me.tableANEXOS_DOMICILIO.contacto_ventaColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DOMICILIO.contacto_ventaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contacto_compra() As String
            Get
                Return CType(Me(Me.tableANEXOS_DOMICILIO.contacto_compraColumn),String)
            End Get
            Set
                Me(Me.tableANEXOS_DOMICILIO.contacto_compraColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANEXO_DETALLERow
        Inherits Global.System.Data.DataRow
        
        Private tableANEXO_DETALLE As ANEXO_DETALLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANEXO_DETALLE = CType(Me.Table,ANEXO_DETALLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AVANEXO() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.AVANEXOColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.AVANEXOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACODANE() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ACODANEColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ACODANEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADESANE() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ADESANEColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ADESANEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ARUC() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ARUCColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ARUCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACODMON() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ACODMONColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ACODMONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AESTADO() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.AESTADOColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.AESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableANEXO_DETALLE.ADATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ADATE' de la tabla 'ANEXO_DETALLE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ADATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AHORA() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.AHORAColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.AHORAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APATERNO() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.APATERNOColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.APATERNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMATERNO() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.AMATERNOColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.AMATERNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANOMBRE() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ANOMBREColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ANOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATIPTRA() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ATIPTRAColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ATIPTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADOCIDE() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ADOCIDEColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ADOCIDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANUMIDE() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ANUMIDEColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ANUMIDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATIPPRO() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ATIPPROColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ATIPPROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANACIO() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ANACIOColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ANACIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AESSAL() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.AESSALColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.AESSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADOMIC() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ADOMICColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ADOMICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASITUA() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ASITUAColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ASITUAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATICONV() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.ATICONVColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.ATICONVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMEMO() As String
            Get
                Return CType(Me(Me.tableANEXO_DETALLE.AMEMOColumn),String)
            End Get
            Set
                Me(Me.tableANEXO_DETALLE.AMEMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADATENull() As Boolean
            Return Me.IsNull(Me.tableANEXO_DETALLE.ADATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADATENull()
            Me(Me.tableANEXO_DETALLE.ADATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANEXOS_CABECERARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANEXOS_CABECERARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANEXOS_CABECERARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANEXOS_CABECERARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANEXOS_DETALLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANEXOS_DETALLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANEXOS_DETALLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANEXOS_DETALLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANEXOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANEXOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANEXOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANEXOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANEXOS_DOMICILIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANEXOS_DOMICILIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANEXOS_DOMICILIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANEXOS_DOMICILIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANEXO_DETALLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANEXO_DETALLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANEXO_DETALLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANEXO_DETALLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
