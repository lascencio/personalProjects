'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8009
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsStockAlmacen"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsStockAlmacen
    Inherits Global.System.Data.DataSet
    
    Private tableSTOCK_ALMACEN As STOCK_ALMACENDataTable
    
    Private tableSTOCK_X_ALMACEN As STOCK_X_ALMACENDataTable
    
    Private tableSTOCK_X_LOTE As STOCK_X_LOTEDataTable
    
    Private tableSTOCK_X_PRODUCTO As STOCK_X_PRODUCTODataTable
    
    Private tableSTOCK_X_COMPUESTO As STOCK_X_COMPUESTODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("STOCK_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_ALMACENDataTable(ds.Tables("STOCK_ALMACEN")))
            End If
            If (Not (ds.Tables("STOCK_X_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_X_ALMACENDataTable(ds.Tables("STOCK_X_ALMACEN")))
            End If
            If (Not (ds.Tables("STOCK_X_LOTE")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_X_LOTEDataTable(ds.Tables("STOCK_X_LOTE")))
            End If
            If (Not (ds.Tables("STOCK_X_PRODUCTO")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_X_PRODUCTODataTable(ds.Tables("STOCK_X_PRODUCTO")))
            End If
            If (Not (ds.Tables("STOCK_X_COMPUESTO")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_X_COMPUESTODataTable(ds.Tables("STOCK_X_COMPUESTO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STOCK_ALMACEN() As STOCK_ALMACENDataTable
        Get
            Return Me.tableSTOCK_ALMACEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STOCK_X_ALMACEN() As STOCK_X_ALMACENDataTable
        Get
            Return Me.tableSTOCK_X_ALMACEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STOCK_X_LOTE() As STOCK_X_LOTEDataTable
        Get
            Return Me.tableSTOCK_X_LOTE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STOCK_X_PRODUCTO() As STOCK_X_PRODUCTODataTable
        Get
            Return Me.tableSTOCK_X_PRODUCTO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STOCK_X_COMPUESTO() As STOCK_X_COMPUESTODataTable
        Get
            Return Me.tableSTOCK_X_COMPUESTO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsStockAlmacen = CType(MyBase.Clone,dsStockAlmacen)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("STOCK_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_ALMACENDataTable(ds.Tables("STOCK_ALMACEN")))
            End If
            If (Not (ds.Tables("STOCK_X_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_X_ALMACENDataTable(ds.Tables("STOCK_X_ALMACEN")))
            End If
            If (Not (ds.Tables("STOCK_X_LOTE")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_X_LOTEDataTable(ds.Tables("STOCK_X_LOTE")))
            End If
            If (Not (ds.Tables("STOCK_X_PRODUCTO")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_X_PRODUCTODataTable(ds.Tables("STOCK_X_PRODUCTO")))
            End If
            If (Not (ds.Tables("STOCK_X_COMPUESTO")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_X_COMPUESTODataTable(ds.Tables("STOCK_X_COMPUESTO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSTOCK_ALMACEN = CType(MyBase.Tables("STOCK_ALMACEN"),STOCK_ALMACENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTOCK_ALMACEN) Is Nothing) Then
                Me.tableSTOCK_ALMACEN.InitVars
            End If
        End If
        Me.tableSTOCK_X_ALMACEN = CType(MyBase.Tables("STOCK_X_ALMACEN"),STOCK_X_ALMACENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTOCK_X_ALMACEN) Is Nothing) Then
                Me.tableSTOCK_X_ALMACEN.InitVars
            End If
        End If
        Me.tableSTOCK_X_LOTE = CType(MyBase.Tables("STOCK_X_LOTE"),STOCK_X_LOTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTOCK_X_LOTE) Is Nothing) Then
                Me.tableSTOCK_X_LOTE.InitVars
            End If
        End If
        Me.tableSTOCK_X_PRODUCTO = CType(MyBase.Tables("STOCK_X_PRODUCTO"),STOCK_X_PRODUCTODataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTOCK_X_PRODUCTO) Is Nothing) Then
                Me.tableSTOCK_X_PRODUCTO.InitVars
            End If
        End If
        Me.tableSTOCK_X_COMPUESTO = CType(MyBase.Tables("STOCK_X_COMPUESTO"),STOCK_X_COMPUESTODataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTOCK_X_COMPUESTO) Is Nothing) Then
                Me.tableSTOCK_X_COMPUESTO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsStockAlmacen"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsStockAlmacen.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSTOCK_ALMACEN = New STOCK_ALMACENDataTable
        MyBase.Tables.Add(Me.tableSTOCK_ALMACEN)
        Me.tableSTOCK_X_ALMACEN = New STOCK_X_ALMACENDataTable
        MyBase.Tables.Add(Me.tableSTOCK_X_ALMACEN)
        Me.tableSTOCK_X_LOTE = New STOCK_X_LOTEDataTable
        MyBase.Tables.Add(Me.tableSTOCK_X_LOTE)
        Me.tableSTOCK_X_PRODUCTO = New STOCK_X_PRODUCTODataTable
        MyBase.Tables.Add(Me.tableSTOCK_X_PRODUCTO)
        Me.tableSTOCK_X_COMPUESTO = New STOCK_X_COMPUESTODataTable
        MyBase.Tables.Add(Me.tableSTOCK_X_COMPUESTO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSTOCK_ALMACEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSTOCK_X_ALMACEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSTOCK_X_LOTE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSTOCK_X_PRODUCTO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSTOCK_X_COMPUESTO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsStockAlmacen = New dsStockAlmacen
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub STOCK_ALMACENRowChangeEventHandler(ByVal sender As Object, ByVal e As STOCK_ALMACENRowChangeEvent)
    
    Public Delegate Sub STOCK_X_ALMACENRowChangeEventHandler(ByVal sender As Object, ByVal e As STOCK_X_ALMACENRowChangeEvent)
    
    Public Delegate Sub STOCK_X_LOTERowChangeEventHandler(ByVal sender As Object, ByVal e As STOCK_X_LOTERowChangeEvent)
    
    Public Delegate Sub STOCK_X_PRODUCTORowChangeEventHandler(ByVal sender As Object, ByVal e As STOCK_X_PRODUCTORowChangeEvent)
    
    Public Delegate Sub STOCK_X_COMPUESTORowChangeEventHandler(ByVal sender As Object, ByVal e As STOCK_X_COMPUESTORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STOCK_ALMACENDataTable
        Inherits Global.System.Data.TypedTableBase(Of STOCK_ALMACENRow)
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnNUMERO_LOTE As Global.System.Data.DataColumn
        
        Private columnFECHA_VENCIMIENTO As Global.System.Data.DataColumn
        
        Private columnSTOCK_INICIAL As Global.System.Data.DataColumn
        
        Private columnINGRESOS As Global.System.Data.DataColumn
        
        Private columnEGRESOS As Global.System.Data.DataColumn
        
        Private columnSTOCK_FINAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STOCK_ALMACEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_LOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_LOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENCIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VENCIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_INICIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_INICIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EGRESOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEGRESOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_FINALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_FINAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STOCK_ALMACENRow
            Get
                Return CType(Me.Rows(index),STOCK_ALMACENRow)
            End Get
        End Property
        
        Public Event STOCK_ALMACENRowChanging As STOCK_ALMACENRowChangeEventHandler
        
        Public Event STOCK_ALMACENRowChanged As STOCK_ALMACENRowChangeEventHandler
        
        Public Event STOCK_ALMACENRowDeleting As STOCK_ALMACENRowChangeEventHandler
        
        Public Event STOCK_ALMACENRowDeleted As STOCK_ALMACENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSTOCK_ALMACENRow(ByVal row As STOCK_ALMACENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSTOCK_ALMACENRow(ByVal PRODUCTO As String, ByVal DESCRIPCION As String, ByVal NUMERO_LOTE As String, ByVal FECHA_VENCIMIENTO As Date, ByVal STOCK_INICIAL As Decimal, ByVal INGRESOS As Decimal, ByVal EGRESOS As Decimal, ByVal STOCK_FINAL As Decimal) As STOCK_ALMACENRow
            Dim rowSTOCK_ALMACENRow As STOCK_ALMACENRow = CType(Me.NewRow,STOCK_ALMACENRow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTO, DESCRIPCION, NUMERO_LOTE, FECHA_VENCIMIENTO, STOCK_INICIAL, INGRESOS, EGRESOS, STOCK_FINAL}
            rowSTOCK_ALMACENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTOCK_ALMACENRow)
            Return rowSTOCK_ALMACENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STOCK_ALMACENDataTable = CType(MyBase.Clone,STOCK_ALMACENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STOCK_ALMACENDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnNUMERO_LOTE = MyBase.Columns("NUMERO_LOTE")
            Me.columnFECHA_VENCIMIENTO = MyBase.Columns("FECHA_VENCIMIENTO")
            Me.columnSTOCK_INICIAL = MyBase.Columns("STOCK_INICIAL")
            Me.columnINGRESOS = MyBase.Columns("INGRESOS")
            Me.columnEGRESOS = MyBase.Columns("EGRESOS")
            Me.columnSTOCK_FINAL = MyBase.Columns("STOCK_FINAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnNUMERO_LOTE = New Global.System.Data.DataColumn("NUMERO_LOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_LOTE)
            Me.columnFECHA_VENCIMIENTO = New Global.System.Data.DataColumn("FECHA_VENCIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VENCIMIENTO)
            Me.columnSTOCK_INICIAL = New Global.System.Data.DataColumn("STOCK_INICIAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_INICIAL)
            Me.columnINGRESOS = New Global.System.Data.DataColumn("INGRESOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS)
            Me.columnEGRESOS = New Global.System.Data.DataColumn("EGRESOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEGRESOS)
            Me.columnSTOCK_FINAL = New Global.System.Data.DataColumn("STOCK_FINAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_FINAL)
            Me.columnPRODUCTO.AllowDBNull = false
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 200
            Me.columnNUMERO_LOTE.MaxLength = 10
            Me.columnSTOCK_INICIAL.AllowDBNull = false
            Me.columnINGRESOS.AllowDBNull = false
            Me.columnEGRESOS.AllowDBNull = false
            Me.columnSTOCK_FINAL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSTOCK_ALMACENRow() As STOCK_ALMACENRow
            Return CType(Me.NewRow,STOCK_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STOCK_ALMACENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STOCK_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STOCK_ALMACENRowChangedEvent) Is Nothing) Then
                RaiseEvent STOCK_ALMACENRowChanged(Me, New STOCK_ALMACENRowChangeEvent(CType(e.Row,STOCK_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STOCK_ALMACENRowChangingEvent) Is Nothing) Then
                RaiseEvent STOCK_ALMACENRowChanging(Me, New STOCK_ALMACENRowChangeEvent(CType(e.Row,STOCK_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STOCK_ALMACENRowDeletedEvent) Is Nothing) Then
                RaiseEvent STOCK_ALMACENRowDeleted(Me, New STOCK_ALMACENRowChangeEvent(CType(e.Row,STOCK_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STOCK_ALMACENRowDeletingEvent) Is Nothing) Then
                RaiseEvent STOCK_ALMACENRowDeleting(Me, New STOCK_ALMACENRowChangeEvent(CType(e.Row,STOCK_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSTOCK_ALMACENRow(ByVal row As STOCK_ALMACENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsStockAlmacen = New dsStockAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STOCK_ALMACENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STOCK_X_ALMACENDataTable
        Inherits Global.System.Data.TypedTableBase(Of STOCK_X_ALMACENRow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnALMACEN As Global.System.Data.DataColumn
        
        Private columnNUMERO_LOTE As Global.System.Data.DataColumn
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnINGRESOS As Global.System.Data.DataColumn
        
        Private columnEGRESOS As Global.System.Data.DataColumn
        
        Private columnSTOCK As Global.System.Data.DataColumn
        
        Private columnFECHA_VENCIMIENTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STOCK_X_ALMACEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMACENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMACEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_LOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_LOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EGRESOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEGRESOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENCIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VENCIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STOCK_X_ALMACENRow
            Get
                Return CType(Me.Rows(index),STOCK_X_ALMACENRow)
            End Get
        End Property
        
        Public Event STOCK_X_ALMACENRowChanging As STOCK_X_ALMACENRowChangeEventHandler
        
        Public Event STOCK_X_ALMACENRowChanged As STOCK_X_ALMACENRowChangeEventHandler
        
        Public Event STOCK_X_ALMACENRowDeleting As STOCK_X_ALMACENRowChangeEventHandler
        
        Public Event STOCK_X_ALMACENRowDeleted As STOCK_X_ALMACENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSTOCK_X_ALMACENRow(ByVal row As STOCK_X_ALMACENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSTOCK_X_ALMACENRow(ByVal EMPRESA As String, ByVal ALMACEN As String, ByVal NUMERO_LOTE As String, ByVal PRODUCTO As String, ByVal DESCRIPCION As String, ByVal INGRESOS As Decimal, ByVal EGRESOS As Decimal, ByVal STOCK As Decimal, ByVal FECHA_VENCIMIENTO As Date) As STOCK_X_ALMACENRow
            Dim rowSTOCK_X_ALMACENRow As STOCK_X_ALMACENRow = CType(Me.NewRow,STOCK_X_ALMACENRow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, ALMACEN, NUMERO_LOTE, PRODUCTO, DESCRIPCION, INGRESOS, EGRESOS, STOCK, FECHA_VENCIMIENTO}
            rowSTOCK_X_ALMACENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTOCK_X_ALMACENRow)
            Return rowSTOCK_X_ALMACENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEMPRESAALMACENNUMERO_LOTEPRODUCTO(ByVal EMPRESA As String, ByVal ALMACEN As String, ByVal NUMERO_LOTE As String, ByVal PRODUCTO As String) As STOCK_X_ALMACENRow
            Return CType(Me.Rows.Find(New Object() {EMPRESA, ALMACEN, NUMERO_LOTE, PRODUCTO}),STOCK_X_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STOCK_X_ALMACENDataTable = CType(MyBase.Clone,STOCK_X_ALMACENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STOCK_X_ALMACENDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnALMACEN = MyBase.Columns("ALMACEN")
            Me.columnNUMERO_LOTE = MyBase.Columns("NUMERO_LOTE")
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnINGRESOS = MyBase.Columns("INGRESOS")
            Me.columnEGRESOS = MyBase.Columns("EGRESOS")
            Me.columnSTOCK = MyBase.Columns("STOCK")
            Me.columnFECHA_VENCIMIENTO = MyBase.Columns("FECHA_VENCIMIENTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnALMACEN = New Global.System.Data.DataColumn("ALMACEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMACEN)
            Me.columnNUMERO_LOTE = New Global.System.Data.DataColumn("NUMERO_LOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_LOTE)
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnINGRESOS = New Global.System.Data.DataColumn("INGRESOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS)
            Me.columnEGRESOS = New Global.System.Data.DataColumn("EGRESOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEGRESOS)
            Me.columnSTOCK = New Global.System.Data.DataColumn("STOCK", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK)
            Me.columnFECHA_VENCIMIENTO = New Global.System.Data.DataColumn("FECHA_VENCIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VENCIMIENTO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("STOCK_X_ALMACENKey1", New Global.System.Data.DataColumn() {Me.columnEMPRESA, Me.columnALMACEN, Me.columnNUMERO_LOTE, Me.columnPRODUCTO}, true))
            Me.columnEMPRESA.AllowDBNull = false
            Me.columnEMPRESA.MaxLength = 3
            Me.columnALMACEN.AllowDBNull = false
            Me.columnALMACEN.MaxLength = 3
            Me.columnNUMERO_LOTE.AllowDBNull = false
            Me.columnNUMERO_LOTE.MaxLength = 10
            Me.columnPRODUCTO.AllowDBNull = false
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 50
            Me.columnINGRESOS.ReadOnly = true
            Me.columnEGRESOS.ReadOnly = true
            Me.columnSTOCK.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSTOCK_X_ALMACENRow() As STOCK_X_ALMACENRow
            Return CType(Me.NewRow,STOCK_X_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STOCK_X_ALMACENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STOCK_X_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STOCK_X_ALMACENRowChangedEvent) Is Nothing) Then
                RaiseEvent STOCK_X_ALMACENRowChanged(Me, New STOCK_X_ALMACENRowChangeEvent(CType(e.Row,STOCK_X_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STOCK_X_ALMACENRowChangingEvent) Is Nothing) Then
                RaiseEvent STOCK_X_ALMACENRowChanging(Me, New STOCK_X_ALMACENRowChangeEvent(CType(e.Row,STOCK_X_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STOCK_X_ALMACENRowDeletedEvent) Is Nothing) Then
                RaiseEvent STOCK_X_ALMACENRowDeleted(Me, New STOCK_X_ALMACENRowChangeEvent(CType(e.Row,STOCK_X_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STOCK_X_ALMACENRowDeletingEvent) Is Nothing) Then
                RaiseEvent STOCK_X_ALMACENRowDeleting(Me, New STOCK_X_ALMACENRowChangeEvent(CType(e.Row,STOCK_X_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSTOCK_X_ALMACENRow(ByVal row As STOCK_X_ALMACENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsStockAlmacen = New dsStockAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STOCK_X_ALMACENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STOCK_X_LOTEDataTable
        Inherits Global.System.Data.TypedTableBase(Of STOCK_X_LOTERow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnNUMERO_LOTE As Global.System.Data.DataColumn
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnINGRESOS As Global.System.Data.DataColumn
        
        Private columnEGRESOS As Global.System.Data.DataColumn
        
        Private columnSTOCK As Global.System.Data.DataColumn
        
        Private columnFECHA_VENCIMIENTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STOCK_X_LOTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_LOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_LOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EGRESOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEGRESOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENCIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VENCIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STOCK_X_LOTERow
            Get
                Return CType(Me.Rows(index),STOCK_X_LOTERow)
            End Get
        End Property
        
        Public Event STOCK_X_LOTERowChanging As STOCK_X_LOTERowChangeEventHandler
        
        Public Event STOCK_X_LOTERowChanged As STOCK_X_LOTERowChangeEventHandler
        
        Public Event STOCK_X_LOTERowDeleting As STOCK_X_LOTERowChangeEventHandler
        
        Public Event STOCK_X_LOTERowDeleted As STOCK_X_LOTERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSTOCK_X_LOTERow(ByVal row As STOCK_X_LOTERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSTOCK_X_LOTERow(ByVal EMPRESA As String, ByVal NUMERO_LOTE As String, ByVal PRODUCTO As String, ByVal DESCRIPCION As String, ByVal INGRESOS As Decimal, ByVal EGRESOS As Decimal, ByVal STOCK As Decimal, ByVal FECHA_VENCIMIENTO As Date) As STOCK_X_LOTERow
            Dim rowSTOCK_X_LOTERow As STOCK_X_LOTERow = CType(Me.NewRow,STOCK_X_LOTERow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, NUMERO_LOTE, PRODUCTO, DESCRIPCION, INGRESOS, EGRESOS, STOCK, FECHA_VENCIMIENTO}
            rowSTOCK_X_LOTERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTOCK_X_LOTERow)
            Return rowSTOCK_X_LOTERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEMPRESANUMERO_LOTEPRODUCTO(ByVal EMPRESA As String, ByVal NUMERO_LOTE As String, ByVal PRODUCTO As String) As STOCK_X_LOTERow
            Return CType(Me.Rows.Find(New Object() {EMPRESA, NUMERO_LOTE, PRODUCTO}),STOCK_X_LOTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STOCK_X_LOTEDataTable = CType(MyBase.Clone,STOCK_X_LOTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STOCK_X_LOTEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnNUMERO_LOTE = MyBase.Columns("NUMERO_LOTE")
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnINGRESOS = MyBase.Columns("INGRESOS")
            Me.columnEGRESOS = MyBase.Columns("EGRESOS")
            Me.columnSTOCK = MyBase.Columns("STOCK")
            Me.columnFECHA_VENCIMIENTO = MyBase.Columns("FECHA_VENCIMIENTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnNUMERO_LOTE = New Global.System.Data.DataColumn("NUMERO_LOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_LOTE)
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnINGRESOS = New Global.System.Data.DataColumn("INGRESOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS)
            Me.columnEGRESOS = New Global.System.Data.DataColumn("EGRESOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEGRESOS)
            Me.columnSTOCK = New Global.System.Data.DataColumn("STOCK", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK)
            Me.columnFECHA_VENCIMIENTO = New Global.System.Data.DataColumn("FECHA_VENCIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VENCIMIENTO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("STOCK_X_LOTEKey1", New Global.System.Data.DataColumn() {Me.columnEMPRESA, Me.columnNUMERO_LOTE, Me.columnPRODUCTO}, true))
            Me.columnEMPRESA.AllowDBNull = false
            Me.columnEMPRESA.MaxLength = 3
            Me.columnNUMERO_LOTE.AllowDBNull = false
            Me.columnNUMERO_LOTE.MaxLength = 10
            Me.columnPRODUCTO.AllowDBNull = false
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 50
            Me.columnINGRESOS.ReadOnly = true
            Me.columnEGRESOS.ReadOnly = true
            Me.columnSTOCK.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSTOCK_X_LOTERow() As STOCK_X_LOTERow
            Return CType(Me.NewRow,STOCK_X_LOTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STOCK_X_LOTERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STOCK_X_LOTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STOCK_X_LOTERowChangedEvent) Is Nothing) Then
                RaiseEvent STOCK_X_LOTERowChanged(Me, New STOCK_X_LOTERowChangeEvent(CType(e.Row,STOCK_X_LOTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STOCK_X_LOTERowChangingEvent) Is Nothing) Then
                RaiseEvent STOCK_X_LOTERowChanging(Me, New STOCK_X_LOTERowChangeEvent(CType(e.Row,STOCK_X_LOTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STOCK_X_LOTERowDeletedEvent) Is Nothing) Then
                RaiseEvent STOCK_X_LOTERowDeleted(Me, New STOCK_X_LOTERowChangeEvent(CType(e.Row,STOCK_X_LOTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STOCK_X_LOTERowDeletingEvent) Is Nothing) Then
                RaiseEvent STOCK_X_LOTERowDeleting(Me, New STOCK_X_LOTERowChangeEvent(CType(e.Row,STOCK_X_LOTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSTOCK_X_LOTERow(ByVal row As STOCK_X_LOTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsStockAlmacen = New dsStockAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STOCK_X_LOTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STOCK_X_PRODUCTODataTable
        Inherits Global.System.Data.TypedTableBase(Of STOCK_X_PRODUCTORow)
        
        Private columnNUMERO_LOTE As Global.System.Data.DataColumn
        
        Private columnSTOCK As Global.System.Data.DataColumn
        
        Private columnFECHA_VENCIMIENTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STOCK_X_PRODUCTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_LOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_LOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENCIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VENCIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STOCK_X_PRODUCTORow
            Get
                Return CType(Me.Rows(index),STOCK_X_PRODUCTORow)
            End Get
        End Property
        
        Public Event STOCK_X_PRODUCTORowChanging As STOCK_X_PRODUCTORowChangeEventHandler
        
        Public Event STOCK_X_PRODUCTORowChanged As STOCK_X_PRODUCTORowChangeEventHandler
        
        Public Event STOCK_X_PRODUCTORowDeleting As STOCK_X_PRODUCTORowChangeEventHandler
        
        Public Event STOCK_X_PRODUCTORowDeleted As STOCK_X_PRODUCTORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSTOCK_X_PRODUCTORow(ByVal row As STOCK_X_PRODUCTORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSTOCK_X_PRODUCTORow(ByVal NUMERO_LOTE As String, ByVal STOCK As Decimal, ByVal FECHA_VENCIMIENTO As Date) As STOCK_X_PRODUCTORow
            Dim rowSTOCK_X_PRODUCTORow As STOCK_X_PRODUCTORow = CType(Me.NewRow,STOCK_X_PRODUCTORow)
            Dim columnValuesArray() As Object = New Object() {NUMERO_LOTE, STOCK, FECHA_VENCIMIENTO}
            rowSTOCK_X_PRODUCTORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTOCK_X_PRODUCTORow)
            Return rowSTOCK_X_PRODUCTORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNUMERO_LOTE(ByVal NUMERO_LOTE As String) As STOCK_X_PRODUCTORow
            Return CType(Me.Rows.Find(New Object() {NUMERO_LOTE}),STOCK_X_PRODUCTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STOCK_X_PRODUCTODataTable = CType(MyBase.Clone,STOCK_X_PRODUCTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STOCK_X_PRODUCTODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMERO_LOTE = MyBase.Columns("NUMERO_LOTE")
            Me.columnSTOCK = MyBase.Columns("STOCK")
            Me.columnFECHA_VENCIMIENTO = MyBase.Columns("FECHA_VENCIMIENTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMERO_LOTE = New Global.System.Data.DataColumn("NUMERO_LOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_LOTE)
            Me.columnSTOCK = New Global.System.Data.DataColumn("STOCK", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK)
            Me.columnFECHA_VENCIMIENTO = New Global.System.Data.DataColumn("FECHA_VENCIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VENCIMIENTO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNUMERO_LOTE}, true))
            Me.columnNUMERO_LOTE.AllowDBNull = false
            Me.columnNUMERO_LOTE.Unique = true
            Me.columnNUMERO_LOTE.MaxLength = 10
            Me.columnSTOCK.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSTOCK_X_PRODUCTORow() As STOCK_X_PRODUCTORow
            Return CType(Me.NewRow,STOCK_X_PRODUCTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STOCK_X_PRODUCTORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STOCK_X_PRODUCTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STOCK_X_PRODUCTORowChangedEvent) Is Nothing) Then
                RaiseEvent STOCK_X_PRODUCTORowChanged(Me, New STOCK_X_PRODUCTORowChangeEvent(CType(e.Row,STOCK_X_PRODUCTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STOCK_X_PRODUCTORowChangingEvent) Is Nothing) Then
                RaiseEvent STOCK_X_PRODUCTORowChanging(Me, New STOCK_X_PRODUCTORowChangeEvent(CType(e.Row,STOCK_X_PRODUCTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STOCK_X_PRODUCTORowDeletedEvent) Is Nothing) Then
                RaiseEvent STOCK_X_PRODUCTORowDeleted(Me, New STOCK_X_PRODUCTORowChangeEvent(CType(e.Row,STOCK_X_PRODUCTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STOCK_X_PRODUCTORowDeletingEvent) Is Nothing) Then
                RaiseEvent STOCK_X_PRODUCTORowDeleting(Me, New STOCK_X_PRODUCTORowChangeEvent(CType(e.Row,STOCK_X_PRODUCTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSTOCK_X_PRODUCTORow(ByVal row As STOCK_X_PRODUCTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsStockAlmacen = New dsStockAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STOCK_X_PRODUCTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STOCK_X_COMPUESTODataTable
        Inherits Global.System.Data.TypedTableBase(Of STOCK_X_COMPUESTORow)
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnSTOCK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STOCK_X_COMPUESTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STOCK_X_COMPUESTORow
            Get
                Return CType(Me.Rows(index),STOCK_X_COMPUESTORow)
            End Get
        End Property
        
        Public Event STOCK_X_COMPUESTORowChanging As STOCK_X_COMPUESTORowChangeEventHandler
        
        Public Event STOCK_X_COMPUESTORowChanged As STOCK_X_COMPUESTORowChangeEventHandler
        
        Public Event STOCK_X_COMPUESTORowDeleting As STOCK_X_COMPUESTORowChangeEventHandler
        
        Public Event STOCK_X_COMPUESTORowDeleted As STOCK_X_COMPUESTORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSTOCK_X_COMPUESTORow(ByVal row As STOCK_X_COMPUESTORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSTOCK_X_COMPUESTORow(ByVal PRODUCTO As String, ByVal CANTIDAD As Decimal, ByVal STOCK As Decimal) As STOCK_X_COMPUESTORow
            Dim rowSTOCK_X_COMPUESTORow As STOCK_X_COMPUESTORow = CType(Me.NewRow,STOCK_X_COMPUESTORow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTO, CANTIDAD, STOCK}
            rowSTOCK_X_COMPUESTORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTOCK_X_COMPUESTORow)
            Return rowSTOCK_X_COMPUESTORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STOCK_X_COMPUESTODataTable = CType(MyBase.Clone,STOCK_X_COMPUESTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STOCK_X_COMPUESTODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnSTOCK = MyBase.Columns("STOCK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnSTOCK = New Global.System.Data.DataColumn("STOCK", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK)
            Me.columnPRODUCTO.AllowDBNull = false
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnCANTIDAD.ReadOnly = true
            Me.columnCANTIDAD.Caption = "STOCK"
            Me.columnSTOCK.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSTOCK_X_COMPUESTORow() As STOCK_X_COMPUESTORow
            Return CType(Me.NewRow,STOCK_X_COMPUESTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STOCK_X_COMPUESTORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STOCK_X_COMPUESTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STOCK_X_COMPUESTORowChangedEvent) Is Nothing) Then
                RaiseEvent STOCK_X_COMPUESTORowChanged(Me, New STOCK_X_COMPUESTORowChangeEvent(CType(e.Row,STOCK_X_COMPUESTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STOCK_X_COMPUESTORowChangingEvent) Is Nothing) Then
                RaiseEvent STOCK_X_COMPUESTORowChanging(Me, New STOCK_X_COMPUESTORowChangeEvent(CType(e.Row,STOCK_X_COMPUESTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STOCK_X_COMPUESTORowDeletedEvent) Is Nothing) Then
                RaiseEvent STOCK_X_COMPUESTORowDeleted(Me, New STOCK_X_COMPUESTORowChangeEvent(CType(e.Row,STOCK_X_COMPUESTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STOCK_X_COMPUESTORowDeletingEvent) Is Nothing) Then
                RaiseEvent STOCK_X_COMPUESTORowDeleting(Me, New STOCK_X_COMPUESTORowChangeEvent(CType(e.Row,STOCK_X_COMPUESTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSTOCK_X_COMPUESTORow(ByVal row As STOCK_X_COMPUESTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsStockAlmacen = New dsStockAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STOCK_X_COMPUESTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class STOCK_ALMACENRow
        Inherits Global.System.Data.DataRow
        
        Private tableSTOCK_ALMACEN As STOCK_ALMACENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTOCK_ALMACEN = CType(Me.Table,STOCK_ALMACENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Return CType(Me(Me.tableSTOCK_ALMACEN.PRODUCTOColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_ALMACEN.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableSTOCK_ALMACEN.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_ALMACEN.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_LOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_ALMACEN.NUMERO_LOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NUMERO_LOTE' de la tabla 'STOCK_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_ALMACEN.NUMERO_LOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VENCIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_ALMACEN.FECHA_VENCIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VENCIMIENTO' de la tabla 'STOCK_ALMACEN' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_ALMACEN.FECHA_VENCIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_INICIAL() As Decimal
            Get
                Return CType(Me(Me.tableSTOCK_ALMACEN.STOCK_INICIALColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTOCK_ALMACEN.STOCK_INICIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS() As Decimal
            Get
                Return CType(Me(Me.tableSTOCK_ALMACEN.INGRESOSColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTOCK_ALMACEN.INGRESOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EGRESOS() As Decimal
            Get
                Return CType(Me(Me.tableSTOCK_ALMACEN.EGRESOSColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTOCK_ALMACEN.EGRESOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_FINAL() As Decimal
            Get
                Return CType(Me(Me.tableSTOCK_ALMACEN.STOCK_FINALColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTOCK_ALMACEN.STOCK_FINALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMERO_LOTENull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_ALMACEN.NUMERO_LOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMERO_LOTENull()
            Me(Me.tableSTOCK_ALMACEN.NUMERO_LOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENCIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_ALMACEN.FECHA_VENCIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENCIMIENTONull()
            Me(Me.tableSTOCK_ALMACEN.FECHA_VENCIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class STOCK_X_ALMACENRow
        Inherits Global.System.Data.DataRow
        
        Private tableSTOCK_X_ALMACEN As STOCK_X_ALMACENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTOCK_X_ALMACEN = CType(Me.Table,STOCK_X_ALMACENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_ALMACEN.EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_ALMACEN.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMACEN() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_ALMACEN.ALMACENColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_ALMACEN.ALMACENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_LOTE() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_ALMACEN.NUMERO_LOTEColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_ALMACEN.NUMERO_LOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_ALMACEN.PRODUCTOColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_ALMACEN.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_ALMACEN.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_ALMACEN.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_ALMACEN.INGRESOSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS' de la tabla 'STOCK_X_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_ALMACEN.INGRESOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EGRESOS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_ALMACEN.EGRESOSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EGRESOS' de la tabla 'STOCK_X_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_ALMACEN.EGRESOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_ALMACEN.STOCKColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK' de la tabla 'STOCK_X_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_ALMACEN.STOCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VENCIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_ALMACEN.FECHA_VENCIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VENCIMIENTO' de la tabla 'STOCK_X_ALMACEN' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_ALMACEN.FECHA_VENCIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOSNull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_ALMACEN.INGRESOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOSNull()
            Me(Me.tableSTOCK_X_ALMACEN.INGRESOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEGRESOSNull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_ALMACEN.EGRESOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEGRESOSNull()
            Me(Me.tableSTOCK_X_ALMACEN.EGRESOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCKNull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_ALMACEN.STOCKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCKNull()
            Me(Me.tableSTOCK_X_ALMACEN.STOCKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENCIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_ALMACEN.FECHA_VENCIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENCIMIENTONull()
            Me(Me.tableSTOCK_X_ALMACEN.FECHA_VENCIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class STOCK_X_LOTERow
        Inherits Global.System.Data.DataRow
        
        Private tableSTOCK_X_LOTE As STOCK_X_LOTEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTOCK_X_LOTE = CType(Me.Table,STOCK_X_LOTEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_LOTE.EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_LOTE.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_LOTE() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_LOTE.NUMERO_LOTEColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_LOTE.NUMERO_LOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_LOTE.PRODUCTOColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_LOTE.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_LOTE.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_LOTE.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_LOTE.INGRESOSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS' de la tabla 'STOCK_X_LOTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_LOTE.INGRESOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EGRESOS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_LOTE.EGRESOSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EGRESOS' de la tabla 'STOCK_X_LOTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_LOTE.EGRESOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_LOTE.STOCKColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK' de la tabla 'STOCK_X_LOTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_LOTE.STOCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VENCIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_LOTE.FECHA_VENCIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VENCIMIENTO' de la tabla 'STOCK_X_LOTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_LOTE.FECHA_VENCIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOSNull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_LOTE.INGRESOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOSNull()
            Me(Me.tableSTOCK_X_LOTE.INGRESOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEGRESOSNull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_LOTE.EGRESOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEGRESOSNull()
            Me(Me.tableSTOCK_X_LOTE.EGRESOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCKNull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_LOTE.STOCKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCKNull()
            Me(Me.tableSTOCK_X_LOTE.STOCKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENCIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_LOTE.FECHA_VENCIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENCIMIENTONull()
            Me(Me.tableSTOCK_X_LOTE.FECHA_VENCIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class STOCK_X_PRODUCTORow
        Inherits Global.System.Data.DataRow
        
        Private tableSTOCK_X_PRODUCTO As STOCK_X_PRODUCTODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTOCK_X_PRODUCTO = CType(Me.Table,STOCK_X_PRODUCTODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_LOTE() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_PRODUCTO.NUMERO_LOTEColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_PRODUCTO.NUMERO_LOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_PRODUCTO.STOCKColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK' de la tabla 'STOCK_X_PRODUCTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_PRODUCTO.STOCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VENCIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_PRODUCTO.FECHA_VENCIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VENCIMIENTO' de la tabla 'STOCK_X_PRODUCTO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_PRODUCTO.FECHA_VENCIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCKNull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_PRODUCTO.STOCKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCKNull()
            Me(Me.tableSTOCK_X_PRODUCTO.STOCKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENCIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_PRODUCTO.FECHA_VENCIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENCIMIENTONull()
            Me(Me.tableSTOCK_X_PRODUCTO.FECHA_VENCIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class STOCK_X_COMPUESTORow
        Inherits Global.System.Data.DataRow
        
        Private tableSTOCK_X_COMPUESTO As STOCK_X_COMPUESTODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTOCK_X_COMPUESTO = CType(Me.Table,STOCK_X_COMPUESTODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Return CType(Me(Me.tableSTOCK_X_COMPUESTO.PRODUCTOColumn),String)
            End Get
            Set
                Me(Me.tableSTOCK_X_COMPUESTO.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_COMPUESTO.CANTIDADColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD' de la tabla 'STOCK_X_COMPUESTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_COMPUESTO.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_X_COMPUESTO.STOCKColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK' de la tabla 'STOCK_X_COMPUESTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_X_COMPUESTO.STOCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANTIDADNull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_COMPUESTO.CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANTIDADNull()
            Me(Me.tableSTOCK_X_COMPUESTO.CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCKNull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_X_COMPUESTO.STOCKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCKNull()
            Me(Me.tableSTOCK_X_COMPUESTO.STOCKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class STOCK_ALMACENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STOCK_ALMACENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As STOCK_ALMACENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As STOCK_ALMACENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class STOCK_X_ALMACENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STOCK_X_ALMACENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As STOCK_X_ALMACENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As STOCK_X_ALMACENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class STOCK_X_LOTERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STOCK_X_LOTERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As STOCK_X_LOTERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As STOCK_X_LOTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class STOCK_X_PRODUCTORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STOCK_X_PRODUCTORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As STOCK_X_PRODUCTORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As STOCK_X_PRODUCTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class STOCK_X_COMPUESTORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STOCK_X_COMPUESTORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As STOCK_X_COMPUESTORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As STOCK_X_COMPUESTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
