'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5472
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsFacturacionLista"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsFacturacionLista
    Inherits Global.System.Data.DataSet
    
    Private tableFACTURACION_LISTA As FACTURACION_LISTADataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FACTURACION_LISTA")) Is Nothing) Then
                MyBase.Tables.Add(New FACTURACION_LISTADataTable(ds.Tables("FACTURACION_LISTA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FACTURACION_LISTA() As FACTURACION_LISTADataTable
        Get
            Return Me.tableFACTURACION_LISTA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsFacturacionLista = CType(MyBase.Clone,dsFacturacionLista)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FACTURACION_LISTA")) Is Nothing) Then
                MyBase.Tables.Add(New FACTURACION_LISTADataTable(ds.Tables("FACTURACION_LISTA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFACTURACION_LISTA = CType(MyBase.Tables("FACTURACION_LISTA"),FACTURACION_LISTADataTable)
        If (initTable = true) Then
            If (Not (Me.tableFACTURACION_LISTA) Is Nothing) Then
                Me.tableFACTURACION_LISTA.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsFacturacionLista"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsFacturacionLista.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFACTURACION_LISTA = New FACTURACION_LISTADataTable
        MyBase.Tables.Add(Me.tableFACTURACION_LISTA)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFACTURACION_LISTA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsFacturacionLista = New dsFacturacionLista
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub FACTURACION_LISTARowChangeEventHandler(ByVal sender As Object, ByVal e As FACTURACION_LISTARowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FACTURACION_LISTADataTable
        Inherits Global.System.Data.TypedTableBase(Of FACTURACION_LISTARow)
        
        Private columnVENTA As Global.System.Data.DataColumn
        
        Private columnNRO_DOCUMENTO As Global.System.Data.DataColumn
        
        Private columnRAZON_SOCIAL As Global.System.Data.DataColumn
        
        Private columnASIENTO_NUMERO As Global.System.Data.DataColumn
        
        Private columnASIENTO_FECHA As Global.System.Data.DataColumn
        
        Private columnMONEDA As Global.System.Data.DataColumn
        
        Private columnCOMPROBANTE_SERIE As Global.System.Data.DataColumn
        
        Private columnCOMPROBANTE_NUMERO As Global.System.Data.DataColumn
        
        Private columnCOMPROBANTE_FECHA As Global.System.Data.DataColumn
        
        Private columnVALOR_AFECTO As Global.System.Data.DataColumn
        
        Private columnIMPUESTO As Global.System.Data.DataColumn
        
        Private columnVALOR_EXENTO As Global.System.Data.DataColumn
        
        Private columnMONTO_TOTAL As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FACTURACION_LISTA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCUMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOCUMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RAZON_SOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRAZON_SOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASIENTO_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASIENTO_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASIENTO_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASIENTO_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPROBANTE_SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPROBANTE_SERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPROBANTE_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPROBANTE_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPROBANTE_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPROBANTE_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALOR_AFECTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_AFECTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPUESTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPUESTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALOR_EXENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALOR_EXENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONTO_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONTO_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FACTURACION_LISTARow
            Get
                Return CType(Me.Rows(index),FACTURACION_LISTARow)
            End Get
        End Property
        
        Public Event FACTURACION_LISTARowChanging As FACTURACION_LISTARowChangeEventHandler
        
        Public Event FACTURACION_LISTARowChanged As FACTURACION_LISTARowChangeEventHandler
        
        Public Event FACTURACION_LISTARowDeleting As FACTURACION_LISTARowChangeEventHandler
        
        Public Event FACTURACION_LISTARowDeleted As FACTURACION_LISTARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFACTURACION_LISTARow(ByVal row As FACTURACION_LISTARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFACTURACION_LISTARow(ByVal VENTA As String, ByVal NRO_DOCUMENTO As String, ByVal RAZON_SOCIAL As String, ByVal ASIENTO_NUMERO As String, ByVal ASIENTO_FECHA As Date, ByVal MONEDA As String, ByVal COMPROBANTE_SERIE As String, ByVal COMPROBANTE_NUMERO As String, ByVal COMPROBANTE_FECHA As Date, ByVal VALOR_AFECTO As Decimal, ByVal IMPUESTO As Decimal, ByVal VALOR_EXENTO As Decimal, ByVal MONTO_TOTAL As Decimal, ByVal ESTADO As String) As FACTURACION_LISTARow
            Dim rowFACTURACION_LISTARow As FACTURACION_LISTARow = CType(Me.NewRow,FACTURACION_LISTARow)
            Dim columnValuesArray() As Object = New Object() {VENTA, NRO_DOCUMENTO, RAZON_SOCIAL, ASIENTO_NUMERO, ASIENTO_FECHA, MONEDA, COMPROBANTE_SERIE, COMPROBANTE_NUMERO, COMPROBANTE_FECHA, VALOR_AFECTO, IMPUESTO, VALOR_EXENTO, MONTO_TOTAL, ESTADO}
            rowFACTURACION_LISTARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFACTURACION_LISTARow)
            Return rowFACTURACION_LISTARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FACTURACION_LISTADataTable = CType(MyBase.Clone,FACTURACION_LISTADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FACTURACION_LISTADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVENTA = MyBase.Columns("VENTA")
            Me.columnNRO_DOCUMENTO = MyBase.Columns("NRO_DOCUMENTO")
            Me.columnRAZON_SOCIAL = MyBase.Columns("RAZON_SOCIAL")
            Me.columnASIENTO_NUMERO = MyBase.Columns("ASIENTO_NUMERO")
            Me.columnASIENTO_FECHA = MyBase.Columns("ASIENTO_FECHA")
            Me.columnMONEDA = MyBase.Columns("MONEDA")
            Me.columnCOMPROBANTE_SERIE = MyBase.Columns("COMPROBANTE_SERIE")
            Me.columnCOMPROBANTE_NUMERO = MyBase.Columns("COMPROBANTE_NUMERO")
            Me.columnCOMPROBANTE_FECHA = MyBase.Columns("COMPROBANTE_FECHA")
            Me.columnVALOR_AFECTO = MyBase.Columns("VALOR_AFECTO")
            Me.columnIMPUESTO = MyBase.Columns("IMPUESTO")
            Me.columnVALOR_EXENTO = MyBase.Columns("VALOR_EXENTO")
            Me.columnMONTO_TOTAL = MyBase.Columns("MONTO_TOTAL")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVENTA = New Global.System.Data.DataColumn("VENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENTA)
            Me.columnNRO_DOCUMENTO = New Global.System.Data.DataColumn("NRO_DOCUMENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOCUMENTO)
            Me.columnRAZON_SOCIAL = New Global.System.Data.DataColumn("RAZON_SOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRAZON_SOCIAL)
            Me.columnASIENTO_NUMERO = New Global.System.Data.DataColumn("ASIENTO_NUMERO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASIENTO_NUMERO)
            Me.columnASIENTO_FECHA = New Global.System.Data.DataColumn("ASIENTO_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASIENTO_FECHA)
            Me.columnMONEDA = New Global.System.Data.DataColumn("MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONEDA)
            Me.columnCOMPROBANTE_SERIE = New Global.System.Data.DataColumn("COMPROBANTE_SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPROBANTE_SERIE)
            Me.columnCOMPROBANTE_NUMERO = New Global.System.Data.DataColumn("COMPROBANTE_NUMERO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPROBANTE_NUMERO)
            Me.columnCOMPROBANTE_FECHA = New Global.System.Data.DataColumn("COMPROBANTE_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPROBANTE_FECHA)
            Me.columnVALOR_AFECTO = New Global.System.Data.DataColumn("VALOR_AFECTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_AFECTO)
            Me.columnIMPUESTO = New Global.System.Data.DataColumn("IMPUESTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPUESTO)
            Me.columnVALOR_EXENTO = New Global.System.Data.DataColumn("VALOR_EXENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR_EXENTO)
            Me.columnMONTO_TOTAL = New Global.System.Data.DataColumn("MONTO_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONTO_TOTAL)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnVENTA.AllowDBNull = false
            Me.columnVENTA.MaxLength = 12
            Me.columnNRO_DOCUMENTO.AllowDBNull = false
            Me.columnNRO_DOCUMENTO.MaxLength = 15
            Me.columnRAZON_SOCIAL.AllowDBNull = false
            Me.columnRAZON_SOCIAL.MaxLength = 100
            Me.columnASIENTO_NUMERO.AllowDBNull = false
            Me.columnASIENTO_NUMERO.MaxLength = 5
            Me.columnASIENTO_FECHA.AllowDBNull = false
            Me.columnMONEDA.AllowDBNull = false
            Me.columnMONEDA.MaxLength = 50
            Me.columnCOMPROBANTE_SERIE.AllowDBNull = false
            Me.columnCOMPROBANTE_SERIE.MaxLength = 4
            Me.columnCOMPROBANTE_NUMERO.AllowDBNull = false
            Me.columnCOMPROBANTE_NUMERO.MaxLength = 10
            Me.columnCOMPROBANTE_FECHA.AllowDBNull = false
            Me.columnVALOR_AFECTO.AllowDBNull = false
            Me.columnIMPUESTO.AllowDBNull = false
            Me.columnVALOR_EXENTO.AllowDBNull = false
            Me.columnMONTO_TOTAL.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFACTURACION_LISTARow() As FACTURACION_LISTARow
            Return CType(Me.NewRow,FACTURACION_LISTARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FACTURACION_LISTARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FACTURACION_LISTARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FACTURACION_LISTARowChangedEvent) Is Nothing) Then
                RaiseEvent FACTURACION_LISTARowChanged(Me, New FACTURACION_LISTARowChangeEvent(CType(e.Row,FACTURACION_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FACTURACION_LISTARowChangingEvent) Is Nothing) Then
                RaiseEvent FACTURACION_LISTARowChanging(Me, New FACTURACION_LISTARowChangeEvent(CType(e.Row,FACTURACION_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FACTURACION_LISTARowDeletedEvent) Is Nothing) Then
                RaiseEvent FACTURACION_LISTARowDeleted(Me, New FACTURACION_LISTARowChangeEvent(CType(e.Row,FACTURACION_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FACTURACION_LISTARowDeletingEvent) Is Nothing) Then
                RaiseEvent FACTURACION_LISTARowDeleting(Me, New FACTURACION_LISTARowChangeEvent(CType(e.Row,FACTURACION_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFACTURACION_LISTARow(ByVal row As FACTURACION_LISTARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFacturacionLista = New dsFacturacionLista
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FACTURACION_LISTADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FACTURACION_LISTARow
        Inherits Global.System.Data.DataRow
        
        Private tableFACTURACION_LISTA As FACTURACION_LISTADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFACTURACION_LISTA = CType(Me.Table,FACTURACION_LISTADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENTA() As String
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.VENTAColumn),String)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.VENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOCUMENTO() As String
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.NRO_DOCUMENTOColumn),String)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.NRO_DOCUMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RAZON_SOCIAL() As String
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.RAZON_SOCIALColumn),String)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.RAZON_SOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASIENTO_NUMERO() As String
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.ASIENTO_NUMEROColumn),String)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.ASIENTO_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASIENTO_FECHA() As Date
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.ASIENTO_FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.ASIENTO_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONEDA() As String
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.MONEDAColumn),String)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPROBANTE_SERIE() As String
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.COMPROBANTE_SERIEColumn),String)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.COMPROBANTE_SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPROBANTE_NUMERO() As String
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.COMPROBANTE_NUMEROColumn),String)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.COMPROBANTE_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPROBANTE_FECHA() As Date
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.COMPROBANTE_FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.COMPROBANTE_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALOR_AFECTO() As Decimal
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.VALOR_AFECTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.VALOR_AFECTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPUESTO() As Decimal
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.IMPUESTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.IMPUESTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALOR_EXENTO() As Decimal
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.VALOR_EXENTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.VALOR_EXENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONTO_TOTAL() As Decimal
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.MONTO_TOTALColumn),Decimal)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.MONTO_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Return CType(Me(Me.tableFACTURACION_LISTA.ESTADOColumn),String)
            End Get
            Set
                Me(Me.tableFACTURACION_LISTA.ESTADOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FACTURACION_LISTARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FACTURACION_LISTARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FACTURACION_LISTARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FACTURACION_LISTARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
