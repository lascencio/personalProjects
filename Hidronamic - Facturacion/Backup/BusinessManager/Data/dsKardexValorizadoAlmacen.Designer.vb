'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8009
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsKardexValorizadoAlmacen"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsKardexValorizadoAlmacen
    Inherits Global.System.Data.DataSet
    
    Private tableKARDEX_VALORIZADO_ALMACEN As KARDEX_VALORIZADO_ALMACENDataTable
    
    Private tableKARDEX_VALORIZADO As KARDEX_VALORIZADODataTable
    
    Private tableSTOCK_VALORIZADO As STOCK_VALORIZADODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("KARDEX_VALORIZADO_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New KARDEX_VALORIZADO_ALMACENDataTable(ds.Tables("KARDEX_VALORIZADO_ALMACEN")))
            End If
            If (Not (ds.Tables("KARDEX_VALORIZADO")) Is Nothing) Then
                MyBase.Tables.Add(New KARDEX_VALORIZADODataTable(ds.Tables("KARDEX_VALORIZADO")))
            End If
            If (Not (ds.Tables("STOCK_VALORIZADO")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_VALORIZADODataTable(ds.Tables("STOCK_VALORIZADO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KARDEX_VALORIZADO_ALMACEN() As KARDEX_VALORIZADO_ALMACENDataTable
        Get
            Return Me.tableKARDEX_VALORIZADO_ALMACEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KARDEX_VALORIZADO() As KARDEX_VALORIZADODataTable
        Get
            Return Me.tableKARDEX_VALORIZADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STOCK_VALORIZADO() As STOCK_VALORIZADODataTable
        Get
            Return Me.tableSTOCK_VALORIZADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsKardexValorizadoAlmacen = CType(MyBase.Clone,dsKardexValorizadoAlmacen)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("KARDEX_VALORIZADO_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New KARDEX_VALORIZADO_ALMACENDataTable(ds.Tables("KARDEX_VALORIZADO_ALMACEN")))
            End If
            If (Not (ds.Tables("KARDEX_VALORIZADO")) Is Nothing) Then
                MyBase.Tables.Add(New KARDEX_VALORIZADODataTable(ds.Tables("KARDEX_VALORIZADO")))
            End If
            If (Not (ds.Tables("STOCK_VALORIZADO")) Is Nothing) Then
                MyBase.Tables.Add(New STOCK_VALORIZADODataTable(ds.Tables("STOCK_VALORIZADO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableKARDEX_VALORIZADO_ALMACEN = CType(MyBase.Tables("KARDEX_VALORIZADO_ALMACEN"),KARDEX_VALORIZADO_ALMACENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKARDEX_VALORIZADO_ALMACEN) Is Nothing) Then
                Me.tableKARDEX_VALORIZADO_ALMACEN.InitVars
            End If
        End If
        Me.tableKARDEX_VALORIZADO = CType(MyBase.Tables("KARDEX_VALORIZADO"),KARDEX_VALORIZADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableKARDEX_VALORIZADO) Is Nothing) Then
                Me.tableKARDEX_VALORIZADO.InitVars
            End If
        End If
        Me.tableSTOCK_VALORIZADO = CType(MyBase.Tables("STOCK_VALORIZADO"),STOCK_VALORIZADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableSTOCK_VALORIZADO) Is Nothing) Then
                Me.tableSTOCK_VALORIZADO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsKardexValorizadoAlmacen"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsKardexValorizadoAlmacen.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableKARDEX_VALORIZADO_ALMACEN = New KARDEX_VALORIZADO_ALMACENDataTable
        MyBase.Tables.Add(Me.tableKARDEX_VALORIZADO_ALMACEN)
        Me.tableKARDEX_VALORIZADO = New KARDEX_VALORIZADODataTable
        MyBase.Tables.Add(Me.tableKARDEX_VALORIZADO)
        Me.tableSTOCK_VALORIZADO = New STOCK_VALORIZADODataTable
        MyBase.Tables.Add(Me.tableSTOCK_VALORIZADO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKARDEX_VALORIZADO_ALMACEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKARDEX_VALORIZADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSTOCK_VALORIZADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsKardexValorizadoAlmacen = New dsKardexValorizadoAlmacen
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub KARDEX_VALORIZADO_ALMACENRowChangeEventHandler(ByVal sender As Object, ByVal e As KARDEX_VALORIZADO_ALMACENRowChangeEvent)
    
    Public Delegate Sub KARDEX_VALORIZADORowChangeEventHandler(ByVal sender As Object, ByVal e As KARDEX_VALORIZADORowChangeEvent)
    
    Public Delegate Sub STOCK_VALORIZADORowChangeEventHandler(ByVal sender As Object, ByVal e As STOCK_VALORIZADORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KARDEX_VALORIZADO_ALMACENDataTable
        Inherits Global.System.Data.TypedTableBase(Of KARDEX_VALORIZADO_ALMACENRow)
        
        Private columnCUO As Global.System.Data.DataColumn
        
        Private columnFECHA_MOVIMIENTO As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnLINEA As Global.System.Data.DataColumn
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnINGRESO As Global.System.Data.DataColumn
        
        Private columnSALIDA As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION_OPERACION As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnTIPO_MONEDA As Global.System.Data.DataColumn
        
        Private columnPRECIO_UNITARIO As Global.System.Data.DataColumn
        
        Private columnSALDO As Global.System.Data.DataColumn
        
        Private columnPRECIO_PROMEDIO As Global.System.Data.DataColumn
        
        Private columnSALDO_VALORIZADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KARDEX_VALORIZADO_ALMACEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MOVIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MOVIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LINEAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINEA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCION_OPERACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION_OPERACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_UNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_PROMEDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_PROMEDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO_VALORIZADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO_VALORIZADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KARDEX_VALORIZADO_ALMACENRow
            Get
                Return CType(Me.Rows(index),KARDEX_VALORIZADO_ALMACENRow)
            End Get
        End Property
        
        Public Event KARDEX_VALORIZADO_ALMACENRowChanging As KARDEX_VALORIZADO_ALMACENRowChangeEventHandler
        
        Public Event KARDEX_VALORIZADO_ALMACENRowChanged As KARDEX_VALORIZADO_ALMACENRowChangeEventHandler
        
        Public Event KARDEX_VALORIZADO_ALMACENRowDeleting As KARDEX_VALORIZADO_ALMACENRowChangeEventHandler
        
        Public Event KARDEX_VALORIZADO_ALMACENRowDeleted As KARDEX_VALORIZADO_ALMACENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKARDEX_VALORIZADO_ALMACENRow(ByVal row As KARDEX_VALORIZADO_ALMACENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKARDEX_VALORIZADO_ALMACENRow(ByVal CUO As String, ByVal FECHA_MOVIMIENTO As Date, ByVal FECHA As Integer, ByVal LINEA As String, ByVal PRODUCTO As String, ByVal DESCRIPCION As String, ByVal INGRESO As Decimal, ByVal SALIDA As Decimal, ByVal DESCRIPCION_OPERACION As String, ByVal TIPO As String, ByVal TIPO_MONEDA As String, ByVal PRECIO_UNITARIO As Decimal, ByVal SALDO As Decimal, ByVal PRECIO_PROMEDIO As Decimal, ByVal SALDO_VALORIZADO As Decimal) As KARDEX_VALORIZADO_ALMACENRow
            Dim rowKARDEX_VALORIZADO_ALMACENRow As KARDEX_VALORIZADO_ALMACENRow = CType(Me.NewRow,KARDEX_VALORIZADO_ALMACENRow)
            Dim columnValuesArray() As Object = New Object() {CUO, FECHA_MOVIMIENTO, FECHA, LINEA, PRODUCTO, DESCRIPCION, INGRESO, SALIDA, DESCRIPCION_OPERACION, TIPO, TIPO_MONEDA, PRECIO_UNITARIO, SALDO, PRECIO_PROMEDIO, SALDO_VALORIZADO}
            rowKARDEX_VALORIZADO_ALMACENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKARDEX_VALORIZADO_ALMACENRow)
            Return rowKARDEX_VALORIZADO_ALMACENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KARDEX_VALORIZADO_ALMACENDataTable = CType(MyBase.Clone,KARDEX_VALORIZADO_ALMACENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KARDEX_VALORIZADO_ALMACENDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCUO = MyBase.Columns("CUO")
            Me.columnFECHA_MOVIMIENTO = MyBase.Columns("FECHA_MOVIMIENTO")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnLINEA = MyBase.Columns("LINEA")
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnINGRESO = MyBase.Columns("INGRESO")
            Me.columnSALIDA = MyBase.Columns("SALIDA")
            Me.columnDESCRIPCION_OPERACION = MyBase.Columns("DESCRIPCION_OPERACION")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnTIPO_MONEDA = MyBase.Columns("TIPO_MONEDA")
            Me.columnPRECIO_UNITARIO = MyBase.Columns("PRECIO_UNITARIO")
            Me.columnSALDO = MyBase.Columns("SALDO")
            Me.columnPRECIO_PROMEDIO = MyBase.Columns("PRECIO_PROMEDIO")
            Me.columnSALDO_VALORIZADO = MyBase.Columns("SALDO_VALORIZADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCUO = New Global.System.Data.DataColumn("CUO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUO)
            Me.columnFECHA_MOVIMIENTO = New Global.System.Data.DataColumn("FECHA_MOVIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MOVIMIENTO)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnLINEA = New Global.System.Data.DataColumn("LINEA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINEA)
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnINGRESO = New Global.System.Data.DataColumn("INGRESO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESO)
            Me.columnSALIDA = New Global.System.Data.DataColumn("SALIDA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALIDA)
            Me.columnDESCRIPCION_OPERACION = New Global.System.Data.DataColumn("DESCRIPCION_OPERACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION_OPERACION)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnTIPO_MONEDA = New Global.System.Data.DataColumn("TIPO_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_MONEDA)
            Me.columnPRECIO_UNITARIO = New Global.System.Data.DataColumn("PRECIO_UNITARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_UNITARIO)
            Me.columnSALDO = New Global.System.Data.DataColumn("SALDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO)
            Me.columnPRECIO_PROMEDIO = New Global.System.Data.DataColumn("PRECIO_PROMEDIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_PROMEDIO)
            Me.columnSALDO_VALORIZADO = New Global.System.Data.DataColumn("SALDO_VALORIZADO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO_VALORIZADO)
            Me.columnCUO.ReadOnly = true
            Me.columnCUO.MaxLength = 12
            Me.columnFECHA_MOVIMIENTO.ReadOnly = true
            Me.columnFECHA.ReadOnly = true
            Me.columnLINEA.ReadOnly = true
            Me.columnLINEA.MaxLength = 3
            Me.columnPRODUCTO.ReadOnly = true
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnDESCRIPCION.ReadOnly = true
            Me.columnDESCRIPCION.MaxLength = 50
            Me.columnINGRESO.ReadOnly = true
            Me.columnSALIDA.ReadOnly = true
            Me.columnDESCRIPCION_OPERACION.ReadOnly = true
            Me.columnDESCRIPCION_OPERACION.MaxLength = 50
            Me.columnTIPO.ReadOnly = true
            Me.columnTIPO.MaxLength = 1
            Me.columnTIPO_MONEDA.ReadOnly = true
            Me.columnTIPO_MONEDA.MaxLength = 1
            Me.columnPRECIO_UNITARIO.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKARDEX_VALORIZADO_ALMACENRow() As KARDEX_VALORIZADO_ALMACENRow
            Return CType(Me.NewRow,KARDEX_VALORIZADO_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KARDEX_VALORIZADO_ALMACENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KARDEX_VALORIZADO_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KARDEX_VALORIZADO_ALMACENRowChangedEvent) Is Nothing) Then
                RaiseEvent KARDEX_VALORIZADO_ALMACENRowChanged(Me, New KARDEX_VALORIZADO_ALMACENRowChangeEvent(CType(e.Row,KARDEX_VALORIZADO_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KARDEX_VALORIZADO_ALMACENRowChangingEvent) Is Nothing) Then
                RaiseEvent KARDEX_VALORIZADO_ALMACENRowChanging(Me, New KARDEX_VALORIZADO_ALMACENRowChangeEvent(CType(e.Row,KARDEX_VALORIZADO_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KARDEX_VALORIZADO_ALMACENRowDeletedEvent) Is Nothing) Then
                RaiseEvent KARDEX_VALORIZADO_ALMACENRowDeleted(Me, New KARDEX_VALORIZADO_ALMACENRowChangeEvent(CType(e.Row,KARDEX_VALORIZADO_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KARDEX_VALORIZADO_ALMACENRowDeletingEvent) Is Nothing) Then
                RaiseEvent KARDEX_VALORIZADO_ALMACENRowDeleting(Me, New KARDEX_VALORIZADO_ALMACENRowChangeEvent(CType(e.Row,KARDEX_VALORIZADO_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKARDEX_VALORIZADO_ALMACENRow(ByVal row As KARDEX_VALORIZADO_ALMACENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsKardexValorizadoAlmacen = New dsKardexValorizadoAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KARDEX_VALORIZADO_ALMACENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KARDEX_VALORIZADODataTable
        Inherits Global.System.Data.TypedTableBase(Of KARDEX_VALORIZADORow)
        
        Private columnCUO As Global.System.Data.DataColumn
        
        Private columnFECHA_MOVIMIENTO As Global.System.Data.DataColumn
        
        Private columnLINEA As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION_OPERACION As Global.System.Data.DataColumn
        
        Private columnINGRESO As Global.System.Data.DataColumn
        
        Private columnSALIDA As Global.System.Data.DataColumn
        
        Private columnSALDO As Global.System.Data.DataColumn
        
        Private columnPRECIO_UNITARIO As Global.System.Data.DataColumn
        
        Private columnPRECIO_PROMEDIO As Global.System.Data.DataColumn
        
        Private columnSALDO_VALORIZADO As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KARDEX_VALORIZADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MOVIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MOVIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LINEAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINEA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCION_OPERACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION_OPERACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_UNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_PROMEDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_PROMEDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO_VALORIZADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO_VALORIZADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KARDEX_VALORIZADORow
            Get
                Return CType(Me.Rows(index),KARDEX_VALORIZADORow)
            End Get
        End Property
        
        Public Event KARDEX_VALORIZADORowChanging As KARDEX_VALORIZADORowChangeEventHandler
        
        Public Event KARDEX_VALORIZADORowChanged As KARDEX_VALORIZADORowChangeEventHandler
        
        Public Event KARDEX_VALORIZADORowDeleting As KARDEX_VALORIZADORowChangeEventHandler
        
        Public Event KARDEX_VALORIZADORowDeleted As KARDEX_VALORIZADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKARDEX_VALORIZADORow(ByVal row As KARDEX_VALORIZADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKARDEX_VALORIZADORow(ByVal CUO As String, ByVal FECHA_MOVIMIENTO As Date, ByVal LINEA As String, ByVal DESCRIPCION_OPERACION As String, ByVal INGRESO As Decimal, ByVal SALIDA As Decimal, ByVal SALDO As Decimal, ByVal PRECIO_UNITARIO As Decimal, ByVal PRECIO_PROMEDIO As Decimal, ByVal SALDO_VALORIZADO As Decimal, ByVal TIPO As String) As KARDEX_VALORIZADORow
            Dim rowKARDEX_VALORIZADORow As KARDEX_VALORIZADORow = CType(Me.NewRow,KARDEX_VALORIZADORow)
            Dim columnValuesArray() As Object = New Object() {CUO, FECHA_MOVIMIENTO, LINEA, DESCRIPCION_OPERACION, INGRESO, SALIDA, SALDO, PRECIO_UNITARIO, PRECIO_PROMEDIO, SALDO_VALORIZADO, TIPO}
            rowKARDEX_VALORIZADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKARDEX_VALORIZADORow)
            Return rowKARDEX_VALORIZADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KARDEX_VALORIZADODataTable = CType(MyBase.Clone,KARDEX_VALORIZADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KARDEX_VALORIZADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCUO = MyBase.Columns("CUO")
            Me.columnFECHA_MOVIMIENTO = MyBase.Columns("FECHA_MOVIMIENTO")
            Me.columnLINEA = MyBase.Columns("LINEA")
            Me.columnDESCRIPCION_OPERACION = MyBase.Columns("DESCRIPCION_OPERACION")
            Me.columnINGRESO = MyBase.Columns("INGRESO")
            Me.columnSALIDA = MyBase.Columns("SALIDA")
            Me.columnSALDO = MyBase.Columns("SALDO")
            Me.columnPRECIO_UNITARIO = MyBase.Columns("PRECIO_UNITARIO")
            Me.columnPRECIO_PROMEDIO = MyBase.Columns("PRECIO_PROMEDIO")
            Me.columnSALDO_VALORIZADO = MyBase.Columns("SALDO_VALORIZADO")
            Me.columnTIPO = MyBase.Columns("TIPO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCUO = New Global.System.Data.DataColumn("CUO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUO)
            Me.columnFECHA_MOVIMIENTO = New Global.System.Data.DataColumn("FECHA_MOVIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MOVIMIENTO)
            Me.columnLINEA = New Global.System.Data.DataColumn("LINEA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINEA)
            Me.columnDESCRIPCION_OPERACION = New Global.System.Data.DataColumn("DESCRIPCION_OPERACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION_OPERACION)
            Me.columnINGRESO = New Global.System.Data.DataColumn("INGRESO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESO)
            Me.columnSALIDA = New Global.System.Data.DataColumn("SALIDA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALIDA)
            Me.columnSALDO = New Global.System.Data.DataColumn("SALDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO)
            Me.columnPRECIO_UNITARIO = New Global.System.Data.DataColumn("PRECIO_UNITARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_UNITARIO)
            Me.columnPRECIO_PROMEDIO = New Global.System.Data.DataColumn("PRECIO_PROMEDIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_PROMEDIO)
            Me.columnSALDO_VALORIZADO = New Global.System.Data.DataColumn("SALDO_VALORIZADO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO_VALORIZADO)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnCUO.ReadOnly = true
            Me.columnCUO.MaxLength = 12
            Me.columnFECHA_MOVIMIENTO.ReadOnly = true
            Me.columnLINEA.ReadOnly = true
            Me.columnLINEA.MaxLength = 3
            Me.columnDESCRIPCION_OPERACION.ReadOnly = true
            Me.columnDESCRIPCION_OPERACION.MaxLength = 50
            Me.columnINGRESO.ReadOnly = true
            Me.columnSALIDA.ReadOnly = true
            Me.columnPRECIO_UNITARIO.ReadOnly = true
            Me.columnTIPO.ReadOnly = true
            Me.columnTIPO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKARDEX_VALORIZADORow() As KARDEX_VALORIZADORow
            Return CType(Me.NewRow,KARDEX_VALORIZADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KARDEX_VALORIZADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KARDEX_VALORIZADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KARDEX_VALORIZADORowChangedEvent) Is Nothing) Then
                RaiseEvent KARDEX_VALORIZADORowChanged(Me, New KARDEX_VALORIZADORowChangeEvent(CType(e.Row,KARDEX_VALORIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KARDEX_VALORIZADORowChangingEvent) Is Nothing) Then
                RaiseEvent KARDEX_VALORIZADORowChanging(Me, New KARDEX_VALORIZADORowChangeEvent(CType(e.Row,KARDEX_VALORIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KARDEX_VALORIZADORowDeletedEvent) Is Nothing) Then
                RaiseEvent KARDEX_VALORIZADORowDeleted(Me, New KARDEX_VALORIZADORowChangeEvent(CType(e.Row,KARDEX_VALORIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KARDEX_VALORIZADORowDeletingEvent) Is Nothing) Then
                RaiseEvent KARDEX_VALORIZADORowDeleting(Me, New KARDEX_VALORIZADORowChangeEvent(CType(e.Row,KARDEX_VALORIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKARDEX_VALORIZADORow(ByVal row As KARDEX_VALORIZADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsKardexValorizadoAlmacen = New dsKardexValorizadoAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KARDEX_VALORIZADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class STOCK_VALORIZADODataTable
        Inherits Global.System.Data.TypedTableBase(Of STOCK_VALORIZADORow)
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION_AMPLIADA As Global.System.Data.DataColumn
        
        Private columnINGRESO As Global.System.Data.DataColumn
        
        Private columnSALIDA As Global.System.Data.DataColumn
        
        Private columnSALDO As Global.System.Data.DataColumn
        
        Private columnPRECIO_PROMEDIO As Global.System.Data.DataColumn
        
        Private columnSALDO_VALORIZADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "STOCK_VALORIZADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCION_AMPLIADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION_AMPLIADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_PROMEDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_PROMEDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO_VALORIZADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO_VALORIZADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As STOCK_VALORIZADORow
            Get
                Return CType(Me.Rows(index),STOCK_VALORIZADORow)
            End Get
        End Property
        
        Public Event STOCK_VALORIZADORowChanging As STOCK_VALORIZADORowChangeEventHandler
        
        Public Event STOCK_VALORIZADORowChanged As STOCK_VALORIZADORowChangeEventHandler
        
        Public Event STOCK_VALORIZADORowDeleting As STOCK_VALORIZADORowChangeEventHandler
        
        Public Event STOCK_VALORIZADORowDeleted As STOCK_VALORIZADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSTOCK_VALORIZADORow(ByVal row As STOCK_VALORIZADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSTOCK_VALORIZADORow(ByVal PRODUCTO As String, ByVal DESCRIPCION_AMPLIADA As String, ByVal INGRESO As Decimal, ByVal SALIDA As Decimal, ByVal SALDO As Decimal, ByVal PRECIO_PROMEDIO As Decimal, ByVal SALDO_VALORIZADO As Decimal) As STOCK_VALORIZADORow
            Dim rowSTOCK_VALORIZADORow As STOCK_VALORIZADORow = CType(Me.NewRow,STOCK_VALORIZADORow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTO, DESCRIPCION_AMPLIADA, INGRESO, SALIDA, SALDO, PRECIO_PROMEDIO, SALDO_VALORIZADO}
            rowSTOCK_VALORIZADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSTOCK_VALORIZADORow)
            Return rowSTOCK_VALORIZADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As STOCK_VALORIZADODataTable = CType(MyBase.Clone,STOCK_VALORIZADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New STOCK_VALORIZADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnDESCRIPCION_AMPLIADA = MyBase.Columns("DESCRIPCION_AMPLIADA")
            Me.columnINGRESO = MyBase.Columns("INGRESO")
            Me.columnSALIDA = MyBase.Columns("SALIDA")
            Me.columnSALDO = MyBase.Columns("SALDO")
            Me.columnPRECIO_PROMEDIO = MyBase.Columns("PRECIO_PROMEDIO")
            Me.columnSALDO_VALORIZADO = MyBase.Columns("SALDO_VALORIZADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnDESCRIPCION_AMPLIADA = New Global.System.Data.DataColumn("DESCRIPCION_AMPLIADA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION_AMPLIADA)
            Me.columnINGRESO = New Global.System.Data.DataColumn("INGRESO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESO)
            Me.columnSALIDA = New Global.System.Data.DataColumn("SALIDA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALIDA)
            Me.columnSALDO = New Global.System.Data.DataColumn("SALDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO)
            Me.columnPRECIO_PROMEDIO = New Global.System.Data.DataColumn("PRECIO_PROMEDIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_PROMEDIO)
            Me.columnSALDO_VALORIZADO = New Global.System.Data.DataColumn("SALDO_VALORIZADO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO_VALORIZADO)
            Me.columnPRODUCTO.ReadOnly = true
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnDESCRIPCION_AMPLIADA.ReadOnly = true
            Me.columnDESCRIPCION_AMPLIADA.MaxLength = 200
            Me.columnINGRESO.ReadOnly = true
            Me.columnSALIDA.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSTOCK_VALORIZADORow() As STOCK_VALORIZADORow
            Return CType(Me.NewRow,STOCK_VALORIZADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New STOCK_VALORIZADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(STOCK_VALORIZADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STOCK_VALORIZADORowChangedEvent) Is Nothing) Then
                RaiseEvent STOCK_VALORIZADORowChanged(Me, New STOCK_VALORIZADORowChangeEvent(CType(e.Row,STOCK_VALORIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STOCK_VALORIZADORowChangingEvent) Is Nothing) Then
                RaiseEvent STOCK_VALORIZADORowChanging(Me, New STOCK_VALORIZADORowChangeEvent(CType(e.Row,STOCK_VALORIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STOCK_VALORIZADORowDeletedEvent) Is Nothing) Then
                RaiseEvent STOCK_VALORIZADORowDeleted(Me, New STOCK_VALORIZADORowChangeEvent(CType(e.Row,STOCK_VALORIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STOCK_VALORIZADORowDeletingEvent) Is Nothing) Then
                RaiseEvent STOCK_VALORIZADORowDeleting(Me, New STOCK_VALORIZADORowChangeEvent(CType(e.Row,STOCK_VALORIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSTOCK_VALORIZADORow(ByVal row As STOCK_VALORIZADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsKardexValorizadoAlmacen = New dsKardexValorizadoAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "STOCK_VALORIZADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KARDEX_VALORIZADO_ALMACENRow
        Inherits Global.System.Data.DataRow
        
        Private tableKARDEX_VALORIZADO_ALMACEN As KARDEX_VALORIZADO_ALMACENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKARDEX_VALORIZADO_ALMACEN = CType(Me.Table,KARDEX_VALORIZADO_ALMACENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.CUOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CUO' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.CUOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MOVIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.FECHA_MOVIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MOVIMIENTO' de la tabla 'KARDEX_VALORIZADO_ALMACEN'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.FECHA_MOVIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.FECHAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LINEA() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.LINEAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LINEA' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.LINEAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.PRODUCTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRODUCTO' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.INGRESOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESO' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.INGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALIDA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.SALIDAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALIDA' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.SALIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION_OPERACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.DESCRIPCION_OPERACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION_OPERACION' de la tabla 'KARDEX_VALORIZADO_ALM"& _ 
                            "ACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.DESCRIPCION_OPERACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.TIPO_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_MONEDA' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.TIPO_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_UNITARIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.PRECIO_UNITARIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRECIO_UNITARIO' de la tabla 'KARDEX_VALORIZADO_ALMACEN' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.PRECIO_UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.SALDOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO' de la tabla 'KARDEX_VALORIZADO_ALMACEN' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_PROMEDIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.PRECIO_PROMEDIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRECIO_PROMEDIO' de la tabla 'KARDEX_VALORIZADO_ALMACEN' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.PRECIO_PROMEDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO_VALORIZADO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO_ALMACEN.SALDO_VALORIZADOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_VALORIZADO' de la tabla 'KARDEX_VALORIZADO_ALMACEN'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO_ALMACEN.SALDO_VALORIZADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.CUOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUONull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.CUOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MOVIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.FECHA_MOVIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MOVIMIENTONull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.FECHA_MOVIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHANull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLINEANull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.LINEAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLINEANull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.LINEAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.PRODUCTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTONull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.PRODUCTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCIONNull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.INGRESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESONull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.INGRESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALIDANull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.SALIDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALIDANull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.SALIDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCION_OPERACIONNull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.DESCRIPCION_OPERACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCION_OPERACIONNull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.DESCRIPCION_OPERACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPONull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.TIPO_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_MONEDANull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.TIPO_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECIO_UNITARIONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.PRECIO_UNITARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECIO_UNITARIONull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.PRECIO_UNITARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDONull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECIO_PROMEDIONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.PRECIO_PROMEDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECIO_PROMEDIONull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.PRECIO_PROMEDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO_VALORIZADONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO_ALMACEN.SALDO_VALORIZADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO_VALORIZADONull()
            Me(Me.tableKARDEX_VALORIZADO_ALMACEN.SALDO_VALORIZADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KARDEX_VALORIZADORow
        Inherits Global.System.Data.DataRow
        
        Private tableKARDEX_VALORIZADO As KARDEX_VALORIZADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKARDEX_VALORIZADO = CType(Me.Table,KARDEX_VALORIZADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.CUOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CUO' de la tabla 'KARDEX_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.CUOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MOVIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.FECHA_MOVIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MOVIMIENTO' de la tabla 'KARDEX_VALORIZADO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.FECHA_MOVIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LINEA() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.LINEAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LINEA' de la tabla 'KARDEX_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.LINEAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION_OPERACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.DESCRIPCION_OPERACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION_OPERACION' de la tabla 'KARDEX_VALORIZADO' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.DESCRIPCION_OPERACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.INGRESOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESO' de la tabla 'KARDEX_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.INGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALIDA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.SALIDAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALIDA' de la tabla 'KARDEX_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.SALIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.SALDOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO' de la tabla 'KARDEX_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_UNITARIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.PRECIO_UNITARIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRECIO_UNITARIO' de la tabla 'KARDEX_VALORIZADO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.PRECIO_UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_PROMEDIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.PRECIO_PROMEDIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRECIO_PROMEDIO' de la tabla 'KARDEX_VALORIZADO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.PRECIO_PROMEDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO_VALORIZADO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.SALDO_VALORIZADOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_VALORIZADO' de la tabla 'KARDEX_VALORIZADO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.SALDO_VALORIZADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKARDEX_VALORIZADO.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO' de la tabla 'KARDEX_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKARDEX_VALORIZADO.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.CUOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUONull()
            Me(Me.tableKARDEX_VALORIZADO.CUOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MOVIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.FECHA_MOVIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MOVIMIENTONull()
            Me(Me.tableKARDEX_VALORIZADO.FECHA_MOVIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLINEANull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.LINEAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLINEANull()
            Me(Me.tableKARDEX_VALORIZADO.LINEAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCION_OPERACIONNull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.DESCRIPCION_OPERACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCION_OPERACIONNull()
            Me(Me.tableKARDEX_VALORIZADO.DESCRIPCION_OPERACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.INGRESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESONull()
            Me(Me.tableKARDEX_VALORIZADO.INGRESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALIDANull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.SALIDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALIDANull()
            Me(Me.tableKARDEX_VALORIZADO.SALIDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDONull()
            Me(Me.tableKARDEX_VALORIZADO.SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECIO_UNITARIONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.PRECIO_UNITARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECIO_UNITARIONull()
            Me(Me.tableKARDEX_VALORIZADO.PRECIO_UNITARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECIO_PROMEDIONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.PRECIO_PROMEDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECIO_PROMEDIONull()
            Me(Me.tableKARDEX_VALORIZADO.PRECIO_PROMEDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO_VALORIZADONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.SALDO_VALORIZADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO_VALORIZADONull()
            Me(Me.tableKARDEX_VALORIZADO.SALDO_VALORIZADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableKARDEX_VALORIZADO.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPONull()
            Me(Me.tableKARDEX_VALORIZADO.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class STOCK_VALORIZADORow
        Inherits Global.System.Data.DataRow
        
        Private tableSTOCK_VALORIZADO As STOCK_VALORIZADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTOCK_VALORIZADO = CType(Me.Table,STOCK_VALORIZADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_VALORIZADO.PRODUCTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRODUCTO' de la tabla 'STOCK_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_VALORIZADO.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION_AMPLIADA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_VALORIZADO.DESCRIPCION_AMPLIADAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION_AMPLIADA' de la tabla 'STOCK_VALORIZADO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_VALORIZADO.DESCRIPCION_AMPLIADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_VALORIZADO.INGRESOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESO' de la tabla 'STOCK_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_VALORIZADO.INGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALIDA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_VALORIZADO.SALIDAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALIDA' de la tabla 'STOCK_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_VALORIZADO.SALIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_VALORIZADO.SALDOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO' de la tabla 'STOCK_VALORIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_VALORIZADO.SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_PROMEDIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_VALORIZADO.PRECIO_PROMEDIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRECIO_PROMEDIO' de la tabla 'STOCK_VALORIZADO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_VALORIZADO.PRECIO_PROMEDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO_VALORIZADO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCK_VALORIZADO.SALDO_VALORIZADOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_VALORIZADO' de la tabla 'STOCK_VALORIZADO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCK_VALORIZADO.SALDO_VALORIZADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTONull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_VALORIZADO.PRODUCTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTONull()
            Me(Me.tableSTOCK_VALORIZADO.PRODUCTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCION_AMPLIADANull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_VALORIZADO.DESCRIPCION_AMPLIADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCION_AMPLIADANull()
            Me(Me.tableSTOCK_VALORIZADO.DESCRIPCION_AMPLIADAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESONull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_VALORIZADO.INGRESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESONull()
            Me(Me.tableSTOCK_VALORIZADO.INGRESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALIDANull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_VALORIZADO.SALIDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALIDANull()
            Me(Me.tableSTOCK_VALORIZADO.SALIDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDONull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_VALORIZADO.SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDONull()
            Me(Me.tableSTOCK_VALORIZADO.SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECIO_PROMEDIONull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_VALORIZADO.PRECIO_PROMEDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECIO_PROMEDIONull()
            Me(Me.tableSTOCK_VALORIZADO.PRECIO_PROMEDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO_VALORIZADONull() As Boolean
            Return Me.IsNull(Me.tableSTOCK_VALORIZADO.SALDO_VALORIZADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO_VALORIZADONull()
            Me(Me.tableSTOCK_VALORIZADO.SALDO_VALORIZADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KARDEX_VALORIZADO_ALMACENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KARDEX_VALORIZADO_ALMACENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KARDEX_VALORIZADO_ALMACENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KARDEX_VALORIZADO_ALMACENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KARDEX_VALORIZADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KARDEX_VALORIZADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KARDEX_VALORIZADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KARDEX_VALORIZADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class STOCK_VALORIZADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As STOCK_VALORIZADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As STOCK_VALORIZADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As STOCK_VALORIZADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
