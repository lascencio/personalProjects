'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8009
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsOperacionesAlmacen"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsOperacionesAlmacen
    Inherits Global.System.Data.DataSet
    
    Private tableOPERACIONES_ALMACEN As OPERACIONES_ALMACENDataTable
    
    Private tableOPERACIONES_ALMACEN_LISTA As OPERACIONES_ALMACEN_LISTADataTable
    
    Private tableOPERACIONES_ALMACEN_DET As OPERACIONES_ALMACEN_DETDataTable
    
    Private tableDETALLES_OPERACION As DETALLES_OPERACIONDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OPERACIONES_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New OPERACIONES_ALMACENDataTable(ds.Tables("OPERACIONES_ALMACEN")))
            End If
            If (Not (ds.Tables("OPERACIONES_ALMACEN_LISTA")) Is Nothing) Then
                MyBase.Tables.Add(New OPERACIONES_ALMACEN_LISTADataTable(ds.Tables("OPERACIONES_ALMACEN_LISTA")))
            End If
            If (Not (ds.Tables("OPERACIONES_ALMACEN_DET")) Is Nothing) Then
                MyBase.Tables.Add(New OPERACIONES_ALMACEN_DETDataTable(ds.Tables("OPERACIONES_ALMACEN_DET")))
            End If
            If (Not (ds.Tables("DETALLES_OPERACION")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLES_OPERACIONDataTable(ds.Tables("DETALLES_OPERACION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OPERACIONES_ALMACEN() As OPERACIONES_ALMACENDataTable
        Get
            Return Me.tableOPERACIONES_ALMACEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OPERACIONES_ALMACEN_LISTA() As OPERACIONES_ALMACEN_LISTADataTable
        Get
            Return Me.tableOPERACIONES_ALMACEN_LISTA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OPERACIONES_ALMACEN_DET() As OPERACIONES_ALMACEN_DETDataTable
        Get
            Return Me.tableOPERACIONES_ALMACEN_DET
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DETALLES_OPERACION() As DETALLES_OPERACIONDataTable
        Get
            Return Me.tableDETALLES_OPERACION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsOperacionesAlmacen = CType(MyBase.Clone,dsOperacionesAlmacen)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("OPERACIONES_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New OPERACIONES_ALMACENDataTable(ds.Tables("OPERACIONES_ALMACEN")))
            End If
            If (Not (ds.Tables("OPERACIONES_ALMACEN_LISTA")) Is Nothing) Then
                MyBase.Tables.Add(New OPERACIONES_ALMACEN_LISTADataTable(ds.Tables("OPERACIONES_ALMACEN_LISTA")))
            End If
            If (Not (ds.Tables("OPERACIONES_ALMACEN_DET")) Is Nothing) Then
                MyBase.Tables.Add(New OPERACIONES_ALMACEN_DETDataTable(ds.Tables("OPERACIONES_ALMACEN_DET")))
            End If
            If (Not (ds.Tables("DETALLES_OPERACION")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLES_OPERACIONDataTable(ds.Tables("DETALLES_OPERACION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableOPERACIONES_ALMACEN = CType(MyBase.Tables("OPERACIONES_ALMACEN"),OPERACIONES_ALMACENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOPERACIONES_ALMACEN) Is Nothing) Then
                Me.tableOPERACIONES_ALMACEN.InitVars
            End If
        End If
        Me.tableOPERACIONES_ALMACEN_LISTA = CType(MyBase.Tables("OPERACIONES_ALMACEN_LISTA"),OPERACIONES_ALMACEN_LISTADataTable)
        If (initTable = true) Then
            If (Not (Me.tableOPERACIONES_ALMACEN_LISTA) Is Nothing) Then
                Me.tableOPERACIONES_ALMACEN_LISTA.InitVars
            End If
        End If
        Me.tableOPERACIONES_ALMACEN_DET = CType(MyBase.Tables("OPERACIONES_ALMACEN_DET"),OPERACIONES_ALMACEN_DETDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOPERACIONES_ALMACEN_DET) Is Nothing) Then
                Me.tableOPERACIONES_ALMACEN_DET.InitVars
            End If
        End If
        Me.tableDETALLES_OPERACION = CType(MyBase.Tables("DETALLES_OPERACION"),DETALLES_OPERACIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDETALLES_OPERACION) Is Nothing) Then
                Me.tableDETALLES_OPERACION.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsOperacionesAlmacen"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsOperacionesAlmacen.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableOPERACIONES_ALMACEN = New OPERACIONES_ALMACENDataTable
        MyBase.Tables.Add(Me.tableOPERACIONES_ALMACEN)
        Me.tableOPERACIONES_ALMACEN_LISTA = New OPERACIONES_ALMACEN_LISTADataTable
        MyBase.Tables.Add(Me.tableOPERACIONES_ALMACEN_LISTA)
        Me.tableOPERACIONES_ALMACEN_DET = New OPERACIONES_ALMACEN_DETDataTable
        MyBase.Tables.Add(Me.tableOPERACIONES_ALMACEN_DET)
        Me.tableDETALLES_OPERACION = New DETALLES_OPERACIONDataTable
        MyBase.Tables.Add(Me.tableDETALLES_OPERACION)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOPERACIONES_ALMACEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOPERACIONES_ALMACEN_LISTA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOPERACIONES_ALMACEN_DET() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDETALLES_OPERACION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsOperacionesAlmacen = New dsOperacionesAlmacen
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub OPERACIONES_ALMACENRowChangeEventHandler(ByVal sender As Object, ByVal e As OPERACIONES_ALMACENRowChangeEvent)
    
    Public Delegate Sub OPERACIONES_ALMACEN_LISTARowChangeEventHandler(ByVal sender As Object, ByVal e As OPERACIONES_ALMACEN_LISTARowChangeEvent)
    
    Public Delegate Sub OPERACIONES_ALMACEN_DETRowChangeEventHandler(ByVal sender As Object, ByVal e As OPERACIONES_ALMACEN_DETRowChangeEvent)
    
    Public Delegate Sub DETALLES_OPERACIONRowChangeEventHandler(ByVal sender As Object, ByVal e As DETALLES_OPERACIONRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OPERACIONES_ALMACENDataTable
        Inherits Global.System.Data.TypedTableBase(Of OPERACIONES_ALMACENRow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnALMACEN As Global.System.Data.DataColumn
        
        Private columnOPERACION As Global.System.Data.DataColumn
        
        Private columnTIPO_OPERACION As Global.System.Data.DataColumn
        
        Private columnEJERCICIO As Global.System.Data.DataColumn
        
        Private columnMES As Global.System.Data.DataColumn
        
        Private columnFECHA_OPERACION As Global.System.Data.DataColumn
        
        Private columnCOMENTARIO As Global.System.Data.DataColumn
        
        Private columnTIPO_ES As Global.System.Data.DataColumn
        
        Private columnREFERENCIA_CUENTA_COMERCIAL As Global.System.Data.DataColumn
        
        Private columnREFERENCIA_TIPO As Global.System.Data.DataColumn
        
        Private columnREFERENCIA_SERIE As Global.System.Data.DataColumn
        
        Private columnREFERENCIA_NUMERO As Global.System.Data.DataColumn
        
        Private columnREFERENCIA_FECHA As Global.System.Data.DataColumn
        
        Private columnREFERENCIA_TIPO_MONEDA As Global.System.Data.DataColumn
        
        Private columnREFERENCIA_IMPORTE_TOTAL As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_REGISTRO As Global.System.Data.DataColumn
        
        Private columnFECHA_REGISTRO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_MODIFICA As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OPERACIONES_ALMACEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMACENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMACEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_OPERACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_OPERACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EJERCICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEJERCICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_OPERACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_OPERACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMENTARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMENTARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_ESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_ES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERENCIA_CUENTA_COMERCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA_CUENTA_COMERCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERENCIA_TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA_TIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERENCIA_SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA_SERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERENCIA_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERENCIA_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERENCIA_TIPO_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA_TIPO_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERENCIA_IMPORTE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERENCIA_IMPORTE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OPERACIONES_ALMACENRow
            Get
                Return CType(Me.Rows(index),OPERACIONES_ALMACENRow)
            End Get
        End Property
        
        Public Event OPERACIONES_ALMACENRowChanging As OPERACIONES_ALMACENRowChangeEventHandler
        
        Public Event OPERACIONES_ALMACENRowChanged As OPERACIONES_ALMACENRowChangeEventHandler
        
        Public Event OPERACIONES_ALMACENRowDeleting As OPERACIONES_ALMACENRowChangeEventHandler
        
        Public Event OPERACIONES_ALMACENRowDeleted As OPERACIONES_ALMACENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOPERACIONES_ALMACENRow(ByVal row As OPERACIONES_ALMACENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOPERACIONES_ALMACENRow( _
                    ByVal EMPRESA As String,  _
                    ByVal ALMACEN As String,  _
                    ByVal OPERACION As String,  _
                    ByVal TIPO_OPERACION As String,  _
                    ByVal EJERCICIO As String,  _
                    ByVal MES As String,  _
                    ByVal FECHA_OPERACION As Date,  _
                    ByVal COMENTARIO As String,  _
                    ByVal TIPO_ES As String,  _
                    ByVal REFERENCIA_CUENTA_COMERCIAL As String,  _
                    ByVal REFERENCIA_TIPO As String,  _
                    ByVal REFERENCIA_SERIE As String,  _
                    ByVal REFERENCIA_NUMERO As String,  _
                    ByVal REFERENCIA_FECHA As Date,  _
                    ByVal REFERENCIA_TIPO_MONEDA As String,  _
                    ByVal REFERENCIA_IMPORTE_TOTAL As Decimal,  _
                    ByVal ESTADO As String,  _
                    ByVal USUARIO_REGISTRO As String,  _
                    ByVal FECHA_REGISTRO As Date,  _
                    ByVal USUARIO_MODIFICA As String,  _
                    ByVal FECHA_MODIFICA As Date) As OPERACIONES_ALMACENRow
            Dim rowOPERACIONES_ALMACENRow As OPERACIONES_ALMACENRow = CType(Me.NewRow,OPERACIONES_ALMACENRow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, ALMACEN, OPERACION, TIPO_OPERACION, EJERCICIO, MES, FECHA_OPERACION, COMENTARIO, TIPO_ES, REFERENCIA_CUENTA_COMERCIAL, REFERENCIA_TIPO, REFERENCIA_SERIE, REFERENCIA_NUMERO, REFERENCIA_FECHA, REFERENCIA_TIPO_MONEDA, REFERENCIA_IMPORTE_TOTAL, ESTADO, USUARIO_REGISTRO, FECHA_REGISTRO, USUARIO_MODIFICA, FECHA_MODIFICA}
            rowOPERACIONES_ALMACENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOPERACIONES_ALMACENRow)
            Return rowOPERACIONES_ALMACENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEMPRESAALMACENOPERACION(ByVal EMPRESA As String, ByVal ALMACEN As String, ByVal OPERACION As String) As OPERACIONES_ALMACENRow
            Return CType(Me.Rows.Find(New Object() {EMPRESA, ALMACEN, OPERACION}),OPERACIONES_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OPERACIONES_ALMACENDataTable = CType(MyBase.Clone,OPERACIONES_ALMACENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OPERACIONES_ALMACENDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnALMACEN = MyBase.Columns("ALMACEN")
            Me.columnOPERACION = MyBase.Columns("OPERACION")
            Me.columnTIPO_OPERACION = MyBase.Columns("TIPO_OPERACION")
            Me.columnEJERCICIO = MyBase.Columns("EJERCICIO")
            Me.columnMES = MyBase.Columns("MES")
            Me.columnFECHA_OPERACION = MyBase.Columns("FECHA_OPERACION")
            Me.columnCOMENTARIO = MyBase.Columns("COMENTARIO")
            Me.columnTIPO_ES = MyBase.Columns("TIPO_ES")
            Me.columnREFERENCIA_CUENTA_COMERCIAL = MyBase.Columns("REFERENCIA_CUENTA_COMERCIAL")
            Me.columnREFERENCIA_TIPO = MyBase.Columns("REFERENCIA_TIPO")
            Me.columnREFERENCIA_SERIE = MyBase.Columns("REFERENCIA_SERIE")
            Me.columnREFERENCIA_NUMERO = MyBase.Columns("REFERENCIA_NUMERO")
            Me.columnREFERENCIA_FECHA = MyBase.Columns("REFERENCIA_FECHA")
            Me.columnREFERENCIA_TIPO_MONEDA = MyBase.Columns("REFERENCIA_TIPO_MONEDA")
            Me.columnREFERENCIA_IMPORTE_TOTAL = MyBase.Columns("REFERENCIA_IMPORTE_TOTAL")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnUSUARIO_REGISTRO = MyBase.Columns("USUARIO_REGISTRO")
            Me.columnFECHA_REGISTRO = MyBase.Columns("FECHA_REGISTRO")
            Me.columnUSUARIO_MODIFICA = MyBase.Columns("USUARIO_MODIFICA")
            Me.columnFECHA_MODIFICA = MyBase.Columns("FECHA_MODIFICA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnALMACEN = New Global.System.Data.DataColumn("ALMACEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMACEN)
            Me.columnOPERACION = New Global.System.Data.DataColumn("OPERACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPERACION)
            Me.columnTIPO_OPERACION = New Global.System.Data.DataColumn("TIPO_OPERACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_OPERACION)
            Me.columnEJERCICIO = New Global.System.Data.DataColumn("EJERCICIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEJERCICIO)
            Me.columnMES = New Global.System.Data.DataColumn("MES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES)
            Me.columnFECHA_OPERACION = New Global.System.Data.DataColumn("FECHA_OPERACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_OPERACION)
            Me.columnCOMENTARIO = New Global.System.Data.DataColumn("COMENTARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMENTARIO)
            Me.columnTIPO_ES = New Global.System.Data.DataColumn("TIPO_ES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_ES)
            Me.columnREFERENCIA_CUENTA_COMERCIAL = New Global.System.Data.DataColumn("REFERENCIA_CUENTA_COMERCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA_CUENTA_COMERCIAL)
            Me.columnREFERENCIA_TIPO = New Global.System.Data.DataColumn("REFERENCIA_TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA_TIPO)
            Me.columnREFERENCIA_SERIE = New Global.System.Data.DataColumn("REFERENCIA_SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA_SERIE)
            Me.columnREFERENCIA_NUMERO = New Global.System.Data.DataColumn("REFERENCIA_NUMERO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA_NUMERO)
            Me.columnREFERENCIA_FECHA = New Global.System.Data.DataColumn("REFERENCIA_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA_FECHA)
            Me.columnREFERENCIA_TIPO_MONEDA = New Global.System.Data.DataColumn("REFERENCIA_TIPO_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA_TIPO_MONEDA)
            Me.columnREFERENCIA_IMPORTE_TOTAL = New Global.System.Data.DataColumn("REFERENCIA_IMPORTE_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERENCIA_IMPORTE_TOTAL)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnUSUARIO_REGISTRO = New Global.System.Data.DataColumn("USUARIO_REGISTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_REGISTRO)
            Me.columnFECHA_REGISTRO = New Global.System.Data.DataColumn("FECHA_REGISTRO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_REGISTRO)
            Me.columnUSUARIO_MODIFICA = New Global.System.Data.DataColumn("USUARIO_MODIFICA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_MODIFICA)
            Me.columnFECHA_MODIFICA = New Global.System.Data.DataColumn("FECHA_MODIFICA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEMPRESA, Me.columnALMACEN, Me.columnOPERACION}, true))
            Me.columnEMPRESA.AllowDBNull = false
            Me.columnEMPRESA.MaxLength = 3
            Me.columnALMACEN.AllowDBNull = false
            Me.columnALMACEN.MaxLength = 3
            Me.columnOPERACION.AllowDBNull = false
            Me.columnOPERACION.MaxLength = 12
            Me.columnTIPO_OPERACION.AllowDBNull = false
            Me.columnTIPO_OPERACION.MaxLength = 2
            Me.columnEJERCICIO.AllowDBNull = false
            Me.columnEJERCICIO.MaxLength = 4
            Me.columnMES.AllowDBNull = false
            Me.columnMES.MaxLength = 2
            Me.columnCOMENTARIO.AllowDBNull = false
            Me.columnCOMENTARIO.MaxLength = 150
            Me.columnTIPO_ES.AllowDBNull = false
            Me.columnTIPO_ES.MaxLength = 1
            Me.columnREFERENCIA_CUENTA_COMERCIAL.AllowDBNull = false
            Me.columnREFERENCIA_CUENTA_COMERCIAL.MaxLength = 8
            Me.columnREFERENCIA_TIPO.AllowDBNull = false
            Me.columnREFERENCIA_TIPO.MaxLength = 2
            Me.columnREFERENCIA_SERIE.AllowDBNull = false
            Me.columnREFERENCIA_SERIE.MaxLength = 4
            Me.columnREFERENCIA_NUMERO.AllowDBNull = false
            Me.columnREFERENCIA_NUMERO.MaxLength = 10
            Me.columnREFERENCIA_FECHA.AllowDBNull = false
            Me.columnREFERENCIA_TIPO_MONEDA.AllowDBNull = false
            Me.columnREFERENCIA_TIPO_MONEDA.MaxLength = 1
            Me.columnREFERENCIA_IMPORTE_TOTAL.AllowDBNull = false
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO.MaxLength = 1
            Me.columnUSUARIO_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_REGISTRO.MaxLength = 12
            Me.columnFECHA_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_MODIFICA.MaxLength = 12
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOPERACIONES_ALMACENRow() As OPERACIONES_ALMACENRow
            Return CType(Me.NewRow,OPERACIONES_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OPERACIONES_ALMACENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OPERACIONES_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OPERACIONES_ALMACENRowChangedEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACENRowChanged(Me, New OPERACIONES_ALMACENRowChangeEvent(CType(e.Row,OPERACIONES_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OPERACIONES_ALMACENRowChangingEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACENRowChanging(Me, New OPERACIONES_ALMACENRowChangeEvent(CType(e.Row,OPERACIONES_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OPERACIONES_ALMACENRowDeletedEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACENRowDeleted(Me, New OPERACIONES_ALMACENRowChangeEvent(CType(e.Row,OPERACIONES_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OPERACIONES_ALMACENRowDeletingEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACENRowDeleting(Me, New OPERACIONES_ALMACENRowChangeEvent(CType(e.Row,OPERACIONES_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOPERACIONES_ALMACENRow(ByVal row As OPERACIONES_ALMACENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOperacionesAlmacen = New dsOperacionesAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OPERACIONES_ALMACENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OPERACIONES_ALMACEN_LISTADataTable
        Inherits Global.System.Data.TypedTableBase(Of OPERACIONES_ALMACEN_LISTARow)
        
        Private columnOPERACION As Global.System.Data.DataColumn
        
        Private columnFECHA_REGISTRO As Global.System.Data.DataColumn
        
        Private columnCOMENTARIO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OPERACIONES_ALMACEN_LISTA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMENTARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMENTARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OPERACIONES_ALMACEN_LISTARow
            Get
                Return CType(Me.Rows(index),OPERACIONES_ALMACEN_LISTARow)
            End Get
        End Property
        
        Public Event OPERACIONES_ALMACEN_LISTARowChanging As OPERACIONES_ALMACEN_LISTARowChangeEventHandler
        
        Public Event OPERACIONES_ALMACEN_LISTARowChanged As OPERACIONES_ALMACEN_LISTARowChangeEventHandler
        
        Public Event OPERACIONES_ALMACEN_LISTARowDeleting As OPERACIONES_ALMACEN_LISTARowChangeEventHandler
        
        Public Event OPERACIONES_ALMACEN_LISTARowDeleted As OPERACIONES_ALMACEN_LISTARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOPERACIONES_ALMACEN_LISTARow(ByVal row As OPERACIONES_ALMACEN_LISTARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOPERACIONES_ALMACEN_LISTARow(ByVal OPERACION As String, ByVal FECHA_REGISTRO As Date, ByVal COMENTARIO As String, ByVal ESTADO As String) As OPERACIONES_ALMACEN_LISTARow
            Dim rowOPERACIONES_ALMACEN_LISTARow As OPERACIONES_ALMACEN_LISTARow = CType(Me.NewRow,OPERACIONES_ALMACEN_LISTARow)
            Dim columnValuesArray() As Object = New Object() {OPERACION, FECHA_REGISTRO, COMENTARIO, ESTADO}
            rowOPERACIONES_ALMACEN_LISTARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOPERACIONES_ALMACEN_LISTARow)
            Return rowOPERACIONES_ALMACEN_LISTARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOPERACION(ByVal OPERACION As String) As OPERACIONES_ALMACEN_LISTARow
            Return CType(Me.Rows.Find(New Object() {OPERACION}),OPERACIONES_ALMACEN_LISTARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OPERACIONES_ALMACEN_LISTADataTable = CType(MyBase.Clone,OPERACIONES_ALMACEN_LISTADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OPERACIONES_ALMACEN_LISTADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOPERACION = MyBase.Columns("OPERACION")
            Me.columnFECHA_REGISTRO = MyBase.Columns("FECHA_REGISTRO")
            Me.columnCOMENTARIO = MyBase.Columns("COMENTARIO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOPERACION = New Global.System.Data.DataColumn("OPERACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPERACION)
            Me.columnFECHA_REGISTRO = New Global.System.Data.DataColumn("FECHA_REGISTRO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_REGISTRO)
            Me.columnCOMENTARIO = New Global.System.Data.DataColumn("COMENTARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMENTARIO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("OPERACIONES_ALMACEN_LISTAKey1", New Global.System.Data.DataColumn() {Me.columnOPERACION}, true))
            Me.columnOPERACION.AllowDBNull = false
            Me.columnOPERACION.Unique = true
            Me.columnOPERACION.MaxLength = 12
            Me.columnFECHA_REGISTRO.AllowDBNull = false
            Me.columnCOMENTARIO.AllowDBNull = false
            Me.columnCOMENTARIO.MaxLength = 100
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOPERACIONES_ALMACEN_LISTARow() As OPERACIONES_ALMACEN_LISTARow
            Return CType(Me.NewRow,OPERACIONES_ALMACEN_LISTARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OPERACIONES_ALMACEN_LISTARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OPERACIONES_ALMACEN_LISTARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OPERACIONES_ALMACEN_LISTARowChangedEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACEN_LISTARowChanged(Me, New OPERACIONES_ALMACEN_LISTARowChangeEvent(CType(e.Row,OPERACIONES_ALMACEN_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OPERACIONES_ALMACEN_LISTARowChangingEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACEN_LISTARowChanging(Me, New OPERACIONES_ALMACEN_LISTARowChangeEvent(CType(e.Row,OPERACIONES_ALMACEN_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OPERACIONES_ALMACEN_LISTARowDeletedEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACEN_LISTARowDeleted(Me, New OPERACIONES_ALMACEN_LISTARowChangeEvent(CType(e.Row,OPERACIONES_ALMACEN_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OPERACIONES_ALMACEN_LISTARowDeletingEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACEN_LISTARowDeleting(Me, New OPERACIONES_ALMACEN_LISTARowChangeEvent(CType(e.Row,OPERACIONES_ALMACEN_LISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOPERACIONES_ALMACEN_LISTARow(ByVal row As OPERACIONES_ALMACEN_LISTARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOperacionesAlmacen = New dsOperacionesAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OPERACIONES_ALMACEN_LISTADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OPERACIONES_ALMACEN_DETDataTable
        Inherits Global.System.Data.TypedTableBase(Of OPERACIONES_ALMACEN_DETRow)
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnALMACEN As Global.System.Data.DataColumn
        
        Private columnOPERACION As Global.System.Data.DataColumn
        
        Private columnLINEA As Global.System.Data.DataColumn
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnPRECIO_UNITARIO As Global.System.Data.DataColumn
        
        Private columnNUMERO_SERIE As Global.System.Data.DataColumn
        
        Private columnNUMERO_LOTE As Global.System.Data.DataColumn
        
        Private columnFECHA_VENCIMIENTO As Global.System.Data.DataColumn
        
        Private columnCOMENTARIO As Global.System.Data.DataColumn
        
        Private columnTIPO_ES As Global.System.Data.DataColumn
        
        Private columnEJERCICIO As Global.System.Data.DataColumn
        
        Private columnMES As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_REGISTRO As Global.System.Data.DataColumn
        
        Private columnFECHA_REGISTRO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_MODIFICA As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OPERACIONES_ALMACEN_DET"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMACENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMACEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LINEAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINEA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_UNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_SERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_LOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_LOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENCIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VENCIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMENTARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMENTARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_ESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_ES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EJERCICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEJERCICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OPERACIONES_ALMACEN_DETRow
            Get
                Return CType(Me.Rows(index),OPERACIONES_ALMACEN_DETRow)
            End Get
        End Property
        
        Public Event OPERACIONES_ALMACEN_DETRowChanging As OPERACIONES_ALMACEN_DETRowChangeEventHandler
        
        Public Event OPERACIONES_ALMACEN_DETRowChanged As OPERACIONES_ALMACEN_DETRowChangeEventHandler
        
        Public Event OPERACIONES_ALMACEN_DETRowDeleting As OPERACIONES_ALMACEN_DETRowChangeEventHandler
        
        Public Event OPERACIONES_ALMACEN_DETRowDeleted As OPERACIONES_ALMACEN_DETRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOPERACIONES_ALMACEN_DETRow(ByVal row As OPERACIONES_ALMACEN_DETRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOPERACIONES_ALMACEN_DETRow( _
                    ByVal EMPRESA As String,  _
                    ByVal ALMACEN As String,  _
                    ByVal OPERACION As String,  _
                    ByVal LINEA As String,  _
                    ByVal PRODUCTO As String,  _
                    ByVal CANTIDAD As Decimal,  _
                    ByVal PRECIO_UNITARIO As Decimal,  _
                    ByVal NUMERO_SERIE As String,  _
                    ByVal NUMERO_LOTE As String,  _
                    ByVal FECHA_VENCIMIENTO As Date,  _
                    ByVal COMENTARIO As String,  _
                    ByVal TIPO_ES As String,  _
                    ByVal EJERCICIO As String,  _
                    ByVal MES As String,  _
                    ByVal ESTADO As String,  _
                    ByVal USUARIO_REGISTRO As String,  _
                    ByVal FECHA_REGISTRO As Date,  _
                    ByVal USUARIO_MODIFICA As String,  _
                    ByVal FECHA_MODIFICA As Date) As OPERACIONES_ALMACEN_DETRow
            Dim rowOPERACIONES_ALMACEN_DETRow As OPERACIONES_ALMACEN_DETRow = CType(Me.NewRow,OPERACIONES_ALMACEN_DETRow)
            Dim columnValuesArray() As Object = New Object() {EMPRESA, ALMACEN, OPERACION, LINEA, PRODUCTO, CANTIDAD, PRECIO_UNITARIO, NUMERO_SERIE, NUMERO_LOTE, FECHA_VENCIMIENTO, COMENTARIO, TIPO_ES, EJERCICIO, MES, ESTADO, USUARIO_REGISTRO, FECHA_REGISTRO, USUARIO_MODIFICA, FECHA_MODIFICA}
            rowOPERACIONES_ALMACEN_DETRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOPERACIONES_ALMACEN_DETRow)
            Return rowOPERACIONES_ALMACEN_DETRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEMPRESAALMACENOPERACIONLINEA(ByVal EMPRESA As String, ByVal ALMACEN As String, ByVal OPERACION As String, ByVal LINEA As String) As OPERACIONES_ALMACEN_DETRow
            Return CType(Me.Rows.Find(New Object() {EMPRESA, ALMACEN, OPERACION, LINEA}),OPERACIONES_ALMACEN_DETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OPERACIONES_ALMACEN_DETDataTable = CType(MyBase.Clone,OPERACIONES_ALMACEN_DETDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OPERACIONES_ALMACEN_DETDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnALMACEN = MyBase.Columns("ALMACEN")
            Me.columnOPERACION = MyBase.Columns("OPERACION")
            Me.columnLINEA = MyBase.Columns("LINEA")
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnPRECIO_UNITARIO = MyBase.Columns("PRECIO_UNITARIO")
            Me.columnNUMERO_SERIE = MyBase.Columns("NUMERO_SERIE")
            Me.columnNUMERO_LOTE = MyBase.Columns("NUMERO_LOTE")
            Me.columnFECHA_VENCIMIENTO = MyBase.Columns("FECHA_VENCIMIENTO")
            Me.columnCOMENTARIO = MyBase.Columns("COMENTARIO")
            Me.columnTIPO_ES = MyBase.Columns("TIPO_ES")
            Me.columnEJERCICIO = MyBase.Columns("EJERCICIO")
            Me.columnMES = MyBase.Columns("MES")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnUSUARIO_REGISTRO = MyBase.Columns("USUARIO_REGISTRO")
            Me.columnFECHA_REGISTRO = MyBase.Columns("FECHA_REGISTRO")
            Me.columnUSUARIO_MODIFICA = MyBase.Columns("USUARIO_MODIFICA")
            Me.columnFECHA_MODIFICA = MyBase.Columns("FECHA_MODIFICA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnALMACEN = New Global.System.Data.DataColumn("ALMACEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMACEN)
            Me.columnOPERACION = New Global.System.Data.DataColumn("OPERACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPERACION)
            Me.columnLINEA = New Global.System.Data.DataColumn("LINEA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINEA)
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnPRECIO_UNITARIO = New Global.System.Data.DataColumn("PRECIO_UNITARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_UNITARIO)
            Me.columnNUMERO_SERIE = New Global.System.Data.DataColumn("NUMERO_SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_SERIE)
            Me.columnNUMERO_LOTE = New Global.System.Data.DataColumn("NUMERO_LOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_LOTE)
            Me.columnFECHA_VENCIMIENTO = New Global.System.Data.DataColumn("FECHA_VENCIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VENCIMIENTO)
            Me.columnCOMENTARIO = New Global.System.Data.DataColumn("COMENTARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMENTARIO)
            Me.columnTIPO_ES = New Global.System.Data.DataColumn("TIPO_ES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_ES)
            Me.columnEJERCICIO = New Global.System.Data.DataColumn("EJERCICIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEJERCICIO)
            Me.columnMES = New Global.System.Data.DataColumn("MES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnUSUARIO_REGISTRO = New Global.System.Data.DataColumn("USUARIO_REGISTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_REGISTRO)
            Me.columnFECHA_REGISTRO = New Global.System.Data.DataColumn("FECHA_REGISTRO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_REGISTRO)
            Me.columnUSUARIO_MODIFICA = New Global.System.Data.DataColumn("USUARIO_MODIFICA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_MODIFICA)
            Me.columnFECHA_MODIFICA = New Global.System.Data.DataColumn("FECHA_MODIFICA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEMPRESA, Me.columnALMACEN, Me.columnOPERACION, Me.columnLINEA}, true))
            Me.columnEMPRESA.AllowDBNull = false
            Me.columnEMPRESA.MaxLength = 3
            Me.columnALMACEN.AllowDBNull = false
            Me.columnALMACEN.MaxLength = 3
            Me.columnOPERACION.AllowDBNull = false
            Me.columnOPERACION.MaxLength = 12
            Me.columnLINEA.AllowDBNull = false
            Me.columnLINEA.MaxLength = 3
            Me.columnPRODUCTO.AllowDBNull = false
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnCANTIDAD.AllowDBNull = false
            Me.columnPRECIO_UNITARIO.AllowDBNull = false
            Me.columnNUMERO_SERIE.AllowDBNull = false
            Me.columnNUMERO_SERIE.MaxLength = 20
            Me.columnNUMERO_LOTE.AllowDBNull = false
            Me.columnNUMERO_LOTE.MaxLength = 20
            Me.columnCOMENTARIO.AllowDBNull = false
            Me.columnCOMENTARIO.MaxLength = 100
            Me.columnTIPO_ES.AllowDBNull = false
            Me.columnTIPO_ES.MaxLength = 1
            Me.columnEJERCICIO.AllowDBNull = false
            Me.columnEJERCICIO.MaxLength = 4
            Me.columnMES.AllowDBNull = false
            Me.columnMES.MaxLength = 2
            Me.columnESTADO.AllowDBNull = false
            Me.columnESTADO.MaxLength = 1
            Me.columnUSUARIO_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_REGISTRO.MaxLength = 12
            Me.columnFECHA_REGISTRO.AllowDBNull = false
            Me.columnUSUARIO_MODIFICA.MaxLength = 12
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOPERACIONES_ALMACEN_DETRow() As OPERACIONES_ALMACEN_DETRow
            Return CType(Me.NewRow,OPERACIONES_ALMACEN_DETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OPERACIONES_ALMACEN_DETRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OPERACIONES_ALMACEN_DETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OPERACIONES_ALMACEN_DETRowChangedEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACEN_DETRowChanged(Me, New OPERACIONES_ALMACEN_DETRowChangeEvent(CType(e.Row,OPERACIONES_ALMACEN_DETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OPERACIONES_ALMACEN_DETRowChangingEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACEN_DETRowChanging(Me, New OPERACIONES_ALMACEN_DETRowChangeEvent(CType(e.Row,OPERACIONES_ALMACEN_DETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OPERACIONES_ALMACEN_DETRowDeletedEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACEN_DETRowDeleted(Me, New OPERACIONES_ALMACEN_DETRowChangeEvent(CType(e.Row,OPERACIONES_ALMACEN_DETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OPERACIONES_ALMACEN_DETRowDeletingEvent) Is Nothing) Then
                RaiseEvent OPERACIONES_ALMACEN_DETRowDeleting(Me, New OPERACIONES_ALMACEN_DETRowChangeEvent(CType(e.Row,OPERACIONES_ALMACEN_DETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOPERACIONES_ALMACEN_DETRow(ByVal row As OPERACIONES_ALMACEN_DETRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOperacionesAlmacen = New dsOperacionesAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OPERACIONES_ALMACEN_DETDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DETALLES_OPERACIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of DETALLES_OPERACIONRow)
        
        Private columnLINEA As Global.System.Data.DataColumn
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION_AMPLIADA As Global.System.Data.DataColumn
        
        Private columnNUMERO_LOTE As Global.System.Data.DataColumn
        
        Private columnFECHA_VENCIMIENTO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnPRECIO_UNITARIO As Global.System.Data.DataColumn
        
        Private columnINDICA_LOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DETALLES_OPERACION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LINEAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINEA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCION_AMPLIADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION_AMPLIADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_LOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_LOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENCIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VENCIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECIO_UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIO_UNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDICA_LOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDICA_LOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DETALLES_OPERACIONRow
            Get
                Return CType(Me.Rows(index),DETALLES_OPERACIONRow)
            End Get
        End Property
        
        Public Event DETALLES_OPERACIONRowChanging As DETALLES_OPERACIONRowChangeEventHandler
        
        Public Event DETALLES_OPERACIONRowChanged As DETALLES_OPERACIONRowChangeEventHandler
        
        Public Event DETALLES_OPERACIONRowDeleting As DETALLES_OPERACIONRowChangeEventHandler
        
        Public Event DETALLES_OPERACIONRowDeleted As DETALLES_OPERACIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDETALLES_OPERACIONRow(ByVal row As DETALLES_OPERACIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDETALLES_OPERACIONRow(ByVal LINEA As String, ByVal PRODUCTO As String, ByVal DESCRIPCION_AMPLIADA As String, ByVal NUMERO_LOTE As String, ByVal FECHA_VENCIMIENTO As Date, ByVal CANTIDAD As Decimal, ByVal PRECIO_UNITARIO As Decimal, ByVal INDICA_LOTE As String) As DETALLES_OPERACIONRow
            Dim rowDETALLES_OPERACIONRow As DETALLES_OPERACIONRow = CType(Me.NewRow,DETALLES_OPERACIONRow)
            Dim columnValuesArray() As Object = New Object() {LINEA, PRODUCTO, DESCRIPCION_AMPLIADA, NUMERO_LOTE, FECHA_VENCIMIENTO, CANTIDAD, PRECIO_UNITARIO, INDICA_LOTE}
            rowDETALLES_OPERACIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDETALLES_OPERACIONRow)
            Return rowDETALLES_OPERACIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLINEA(ByVal LINEA As String) As DETALLES_OPERACIONRow
            Return CType(Me.Rows.Find(New Object() {LINEA}),DETALLES_OPERACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DETALLES_OPERACIONDataTable = CType(MyBase.Clone,DETALLES_OPERACIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DETALLES_OPERACIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLINEA = MyBase.Columns("LINEA")
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnDESCRIPCION_AMPLIADA = MyBase.Columns("DESCRIPCION_AMPLIADA")
            Me.columnNUMERO_LOTE = MyBase.Columns("NUMERO_LOTE")
            Me.columnFECHA_VENCIMIENTO = MyBase.Columns("FECHA_VENCIMIENTO")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnPRECIO_UNITARIO = MyBase.Columns("PRECIO_UNITARIO")
            Me.columnINDICA_LOTE = MyBase.Columns("INDICA_LOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLINEA = New Global.System.Data.DataColumn("LINEA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINEA)
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnDESCRIPCION_AMPLIADA = New Global.System.Data.DataColumn("DESCRIPCION_AMPLIADA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION_AMPLIADA)
            Me.columnNUMERO_LOTE = New Global.System.Data.DataColumn("NUMERO_LOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_LOTE)
            Me.columnFECHA_VENCIMIENTO = New Global.System.Data.DataColumn("FECHA_VENCIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VENCIMIENTO)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnPRECIO_UNITARIO = New Global.System.Data.DataColumn("PRECIO_UNITARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIO_UNITARIO)
            Me.columnINDICA_LOTE = New Global.System.Data.DataColumn("INDICA_LOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDICA_LOTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLINEA}, true))
            Me.columnLINEA.AllowDBNull = false
            Me.columnLINEA.Unique = true
            Me.columnLINEA.MaxLength = 3
            Me.columnPRODUCTO.AllowDBNull = false
            Me.columnPRODUCTO.MaxLength = 8
            Me.columnDESCRIPCION_AMPLIADA.AllowDBNull = false
            Me.columnDESCRIPCION_AMPLIADA.MaxLength = 200
            Me.columnNUMERO_LOTE.AllowDBNull = false
            Me.columnNUMERO_LOTE.MaxLength = 20
            Me.columnCANTIDAD.AllowDBNull = false
            Me.columnPRECIO_UNITARIO.AllowDBNull = false
            Me.columnINDICA_LOTE.AllowDBNull = false
            Me.columnINDICA_LOTE.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDETALLES_OPERACIONRow() As DETALLES_OPERACIONRow
            Return CType(Me.NewRow,DETALLES_OPERACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DETALLES_OPERACIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DETALLES_OPERACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DETALLES_OPERACIONRowChangedEvent) Is Nothing) Then
                RaiseEvent DETALLES_OPERACIONRowChanged(Me, New DETALLES_OPERACIONRowChangeEvent(CType(e.Row,DETALLES_OPERACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DETALLES_OPERACIONRowChangingEvent) Is Nothing) Then
                RaiseEvent DETALLES_OPERACIONRowChanging(Me, New DETALLES_OPERACIONRowChangeEvent(CType(e.Row,DETALLES_OPERACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DETALLES_OPERACIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent DETALLES_OPERACIONRowDeleted(Me, New DETALLES_OPERACIONRowChangeEvent(CType(e.Row,DETALLES_OPERACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DETALLES_OPERACIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent DETALLES_OPERACIONRowDeleting(Me, New DETALLES_OPERACIONRowChangeEvent(CType(e.Row,DETALLES_OPERACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDETALLES_OPERACIONRow(ByVal row As DETALLES_OPERACIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOperacionesAlmacen = New dsOperacionesAlmacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DETALLES_OPERACIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OPERACIONES_ALMACENRow
        Inherits Global.System.Data.DataRow
        
        Private tableOPERACIONES_ALMACEN As OPERACIONES_ALMACENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOPERACIONES_ALMACEN = CType(Me.Table,OPERACIONES_ALMACENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMACEN() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.ALMACENColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.ALMACENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPERACION() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.OPERACIONColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.OPERACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_OPERACION() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.TIPO_OPERACIONColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.TIPO_OPERACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EJERCICIO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.EJERCICIOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.EJERCICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.MESColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.MESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_OPERACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPERACIONES_ALMACEN.FECHA_OPERACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_OPERACION' de la tabla 'OPERACIONES_ALMACEN' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.FECHA_OPERACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMENTARIO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.COMENTARIOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.COMENTARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_ES() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.TIPO_ESColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.TIPO_ESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERENCIA_CUENTA_COMERCIAL() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_CUENTA_COMERCIALColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_CUENTA_COMERCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERENCIA_TIPO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_TIPOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERENCIA_SERIE() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_SERIEColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERENCIA_NUMERO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_NUMEROColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERENCIA_FECHA() As Date
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERENCIA_TIPO_MONEDA() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_TIPO_MONEDAColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_TIPO_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERENCIA_IMPORTE_TOTAL() As Decimal
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_IMPORTE_TOTALColumn),Decimal)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.REFERENCIA_IMPORTE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.ESTADOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_REGISTRO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.USUARIO_REGISTROColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.USUARIO_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_REGISTRO() As Date
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN.FECHA_REGISTROColumn),Date)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.FECHA_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_MODIFICA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPERACIONES_ALMACEN.USUARIO_MODIFICAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO_MODIFICA' de la tabla 'OPERACIONES_ALMACEN' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.USUARIO_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPERACIONES_ALMACEN.FECHA_MODIFICAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MODIFICA' de la tabla 'OPERACIONES_ALMACEN' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN.FECHA_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_OPERACIONNull() As Boolean
            Return Me.IsNull(Me.tableOPERACIONES_ALMACEN.FECHA_OPERACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_OPERACIONNull()
            Me(Me.tableOPERACIONES_ALMACEN.FECHA_OPERACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIO_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableOPERACIONES_ALMACEN.USUARIO_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIO_MODIFICANull()
            Me(Me.tableOPERACIONES_ALMACEN.USUARIO_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableOPERACIONES_ALMACEN.FECHA_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICANull()
            Me(Me.tableOPERACIONES_ALMACEN.FECHA_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OPERACIONES_ALMACEN_LISTARow
        Inherits Global.System.Data.DataRow
        
        Private tableOPERACIONES_ALMACEN_LISTA As OPERACIONES_ALMACEN_LISTADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOPERACIONES_ALMACEN_LISTA = CType(Me.Table,OPERACIONES_ALMACEN_LISTADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPERACION() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_LISTA.OPERACIONColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_LISTA.OPERACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_REGISTRO() As Date
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_LISTA.FECHA_REGISTROColumn),Date)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_LISTA.FECHA_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMENTARIO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_LISTA.COMENTARIOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_LISTA.COMENTARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_LISTA.ESTADOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_LISTA.ESTADOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OPERACIONES_ALMACEN_DETRow
        Inherits Global.System.Data.DataRow
        
        Private tableOPERACIONES_ALMACEN_DET As OPERACIONES_ALMACEN_DETDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOPERACIONES_ALMACEN_DET = CType(Me.Table,OPERACIONES_ALMACEN_DETDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.EMPRESAColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMACEN() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.ALMACENColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.ALMACENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPERACION() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.OPERACIONColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.OPERACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LINEA() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.LINEAColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.LINEAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.PRODUCTOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As Decimal
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.CANTIDADColumn),Decimal)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_UNITARIO() As Decimal
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.PRECIO_UNITARIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.PRECIO_UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_SERIE() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.NUMERO_SERIEColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.NUMERO_SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_LOTE() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.NUMERO_LOTEColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.NUMERO_LOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VENCIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.FECHA_VENCIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VENCIMIENTO' de la tabla 'OPERACIONES_ALMACEN_DET' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.FECHA_VENCIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMENTARIO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.COMENTARIOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.COMENTARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_ES() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.TIPO_ESColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.TIPO_ESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EJERCICIO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.EJERCICIOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.EJERCICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.MESColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.MESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.ESTADOColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_REGISTRO() As String
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.USUARIO_REGISTROColumn),String)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.USUARIO_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_REGISTRO() As Date
            Get
                Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.FECHA_REGISTROColumn),Date)
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.FECHA_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_MODIFICA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.USUARIO_MODIFICAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO_MODIFICA' de la tabla 'OPERACIONES_ALMACEN_DET' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.USUARIO_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPERACIONES_ALMACEN_DET.FECHA_MODIFICAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MODIFICA' de la tabla 'OPERACIONES_ALMACEN_DET' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPERACIONES_ALMACEN_DET.FECHA_MODIFICAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENCIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableOPERACIONES_ALMACEN_DET.FECHA_VENCIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENCIMIENTONull()
            Me(Me.tableOPERACIONES_ALMACEN_DET.FECHA_VENCIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIO_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableOPERACIONES_ALMACEN_DET.USUARIO_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIO_MODIFICANull()
            Me(Me.tableOPERACIONES_ALMACEN_DET.USUARIO_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICANull() As Boolean
            Return Me.IsNull(Me.tableOPERACIONES_ALMACEN_DET.FECHA_MODIFICAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICANull()
            Me(Me.tableOPERACIONES_ALMACEN_DET.FECHA_MODIFICAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DETALLES_OPERACIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableDETALLES_OPERACION As DETALLES_OPERACIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDETALLES_OPERACION = CType(Me.Table,DETALLES_OPERACIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LINEA() As String
            Get
                Return CType(Me(Me.tableDETALLES_OPERACION.LINEAColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_OPERACION.LINEAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Return CType(Me(Me.tableDETALLES_OPERACION.PRODUCTOColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_OPERACION.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION_AMPLIADA() As String
            Get
                Return CType(Me(Me.tableDETALLES_OPERACION.DESCRIPCION_AMPLIADAColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_OPERACION.DESCRIPCION_AMPLIADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_LOTE() As String
            Get
                Return CType(Me(Me.tableDETALLES_OPERACION.NUMERO_LOTEColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_OPERACION.NUMERO_LOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VENCIMIENTO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDETALLES_OPERACION.FECHA_VENCIMIENTOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VENCIMIENTO' de la tabla 'DETALLES_OPERACION' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLES_OPERACION.FECHA_VENCIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As Decimal
            Get
                Return CType(Me(Me.tableDETALLES_OPERACION.CANTIDADColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLES_OPERACION.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECIO_UNITARIO() As Decimal
            Get
                Return CType(Me(Me.tableDETALLES_OPERACION.PRECIO_UNITARIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLES_OPERACION.PRECIO_UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDICA_LOTE() As String
            Get
                Return CType(Me(Me.tableDETALLES_OPERACION.INDICA_LOTEColumn),String)
            End Get
            Set
                Me(Me.tableDETALLES_OPERACION.INDICA_LOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENCIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableDETALLES_OPERACION.FECHA_VENCIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENCIMIENTONull()
            Me(Me.tableDETALLES_OPERACION.FECHA_VENCIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OPERACIONES_ALMACENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OPERACIONES_ALMACENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OPERACIONES_ALMACENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OPERACIONES_ALMACENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OPERACIONES_ALMACEN_LISTARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OPERACIONES_ALMACEN_LISTARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OPERACIONES_ALMACEN_LISTARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OPERACIONES_ALMACEN_LISTARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OPERACIONES_ALMACEN_DETRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OPERACIONES_ALMACEN_DETRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OPERACIONES_ALMACEN_DETRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OPERACIONES_ALMACEN_DETRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DETALLES_OPERACIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DETALLES_OPERACIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DETALLES_OPERACIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DETALLES_OPERACIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
